"use strict";(self.webpackChunkfull_stack_chronicles=self.webpackChunkfull_stack_chronicles||[]).push([[89450],{16029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way","metadata":{"permalink":"/recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-06-06-recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way/index.md","source":"@site/blog/2022-06-06-recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way/index.md","title":"Recurse JavaScript Object to Get Values for a Given Key the Easy Way","description":"I dad a scenario where I needed to find values for a key in a complex JavaScript object which could be nested *n* levels deep.","date":"2022-06-06T00:00:00.000Z","formattedDate":"June 6, 2022","tags":[{"label":"nodejs","permalink":"/tags/nodejs"},{"label":"javascript","permalink":"/tags/javascript"},{"label":"openapi","permalink":"/tags/openapi"},{"label":"swagger","permalink":"/tags/swagger"}],"readingTime":1.45,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way","title":"Recurse JavaScript Object to Get Values for a Given Key the Easy Way","authors":["jeffreyaven"],"draft":false,"tags":["nodejs","javascript","openapi","swagger"],"keywords":["nodejs","javascript","openapi","swagger"]},"nextItem":{"title":"DataOps with Container Images and Multi-Stage Builds","permalink":"/dataops-with-container-images-and-multi-stage-builds"}},"content":"I dad a scenario where I needed to find values for a key in a complex JavaScript object which could be nested __*n*__ levels deep.  \\r\\n\\r\\nI found numerous approaches to doing this, most were overly complicated, so I thought I would share the simplest, most succinct approach to doing this.  \\r\\n\\r\\n## the Code\\r\\n\\r\\nOne simple function implementing the __*\\"tail call recursion\\"*__ pattern, to search for a key (`key`) from the root of an object (`obj`), excluding any keys in `excludeKeys`.  \\r\\n\\r\\nThis will return a list of values for the given key, searching all levels in all branches of the object.   \\r\\n\\r\\n```javascript\\r\\nfunction getAllValuesForKey(obj, key, excludeKeys=[], values=[]) {\\r\\n    for (let k in obj) {\\r\\n        if (typeof obj[k] === \\"object\\") {\\r\\n            if(!excludeKeys.includes(k)){\\r\\n                getAllValuesForKey(obj[k], key, excludeKeys, values)\\r\\n            }\\r\\n        } else {\\r\\n            if (k === key){\\r\\n                values.push(obj[k]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return values;\\r\\n}\\r\\n```\\r\\n\\r\\n## Example\\r\\n\\r\\nIn parsing an OpenAPI or Swagger specification, I am looking for all of the schema `refs` in a successful response body, for example:  \\r\\n\\r\\n```yaml\\r\\npaths:\\r\\n\\t\'/orgs/{org}/actions/permissions/selected-actions\':\\r\\n\\t\\tget:\\r\\n\\t\\t  ...\\r\\n\\t\\t  responses:\\r\\n\\t\\t\\t\'200\': \'...\'\\r\\n```\\r\\n\\r\\nhowever these refs can present in various different ways depending upon the response type, such as:  \\r\\n\\r\\n```yaml\\r\\n\'200\':\\r\\n\\t$ref: \'#/components/responses/actions_runner_labels\'\\r\\n```\\r\\n\\r\\nor  \\r\\n\\r\\n```yaml\\r\\n\'200\':      \\r\\n\\tcontent:\\r\\n\\t\\tapplication/json:\\r\\n\\t\\t  schema:\\r\\n\\t\\t\\t$ref: \'#/components/schemas/runner\'\\r\\n```\\r\\n\\r\\nor  \\r\\n\\r\\n```yaml\\r\\n\'200\':\\r\\n  content:\\r\\n\\tapplication/json:\\r\\n\\t  schema:\\r\\n\\t\\tanyOf:\\r\\n\\t\\t  - $ref: \'#/components/schemas/interaction-limit-response\'\\r\\n```\\r\\n\\r\\nor\\r\\n\\r\\n```yaml\\r\\n\'200\':\\r\\n  content:\\r\\n\\tapplication/json:\\r\\n\\t  schema:\\r\\n\\t\\ttype: object\\r\\n\\t\\trequired:\\r\\n\\t\\t  - total_count\\r\\n\\t\\t  - runners\\r\\n\\t\\tproperties:\\r\\n\\t\\t  total_count:\\r\\n\\t\\t\\ttype: integer\\r\\n\\t\\t  runners:\\r\\n\\t\\t\\ttype: array\\r\\n\\t\\t\\titems:\\r\\n\\t\\t\\t  $ref: \'#/components/schemas/runner\'\\r\\n```\\r\\n\\r\\nTo find all of the schema refs without knowing the response type or structure I used the above function as follows (excluding refs for `examples`):  \\r\\n\\r\\n```javascript\\r\\nfunction getRespSchemaName(op){\\r\\n    for(let respCode in op.responses){\\r\\n        if(respCode.startsWith(\'2\')){\\r\\n            return getAllValuesForKey(op.responses[respCode], \\"$ref\\", [\'examples\']);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nYou can find this implementation in [__`openapi-doc-util`__](https://github.com/stackql/openapi-doc-util) and [__`@stackql/openapi-doc-util`__](https://www.npmjs.com/package/@stackql/openapi-doc-util).  \\r\\n\\r\\nsimple!"},{"id":"dataops-with-container-images-and-multi-stage-builds","metadata":{"permalink":"/dataops-with-container-images-and-multi-stage-builds","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-05-28-dataops-with-container-images-and-multi-stage-builds/index.md","source":"@site/blog/2022-05-28-dataops-with-container-images-and-multi-stage-builds/index.md","title":"DataOps with Container Images and Multi-Stage Builds","description":"","date":"2022-05-28T00:00:00.000Z","formattedDate":"May 28, 2022","tags":[{"label":"python","permalink":"/tags/python"},{"label":"docker","permalink":"/tags/docker"},{"label":"ci-cd","permalink":"/tags/ci-cd"},{"label":"data engineering","permalink":"/tags/data-engineering"},{"label":"poetry","permalink":"/tags/poetry"}],"readingTime":7.15,"truncated":false,"authors":[{"name":"Chris Ottinger","title":"Senior Technologist","url":"https://github.com/datwiz","imageURL":"http://0.gravatar.com/avatar/f9af9c3fae755ac170c5798c53c5267d?s=80","key":"chrisottinger"}],"frontMatter":{"slug":"dataops-with-container-images-and-multi-stage-builds","title":"DataOps with Container Images and Multi-Stage Builds","authors":["chrisottinger"],"draft":false,"image":"/img/blog/dataops-featured-image.png","tags":["python","docker","ci-cd","data engineering","poetry"],"keywords":["python","docker","ci-cd","data engineering","poetry"]},"prevItem":{"title":"Recurse JavaScript Object to Get Values for a Given Key the Easy Way","permalink":"/recurse-javascript-object-to-get-values-for-a-given-key-the-easy-way"},"nextItem":{"title":"Using the Snowflake SQL API with TypeScript","permalink":"/using-the-snowflake-sql-api-with-typescript"}},"content":"import Tabs from \'@theme/Tabs\';\\r\\nimport TabItem from \'@theme/TabItem\';\\r\\n\\r\\nContainer images provide an ideal software packaging solution for DataOps and python based data pipeline workloads.  Containers enable Data Scientists and Data Engineers to incorporate the latest packages and libraries without the issues associated with introducing breaking changes into shared environments.  A Data Engineer or Data Scienctist can quickly release new functionality with the best tools available.  \\r\\n\\r\\nContainer images provide safer developer environments but as the number of container images used for production workloads grow, a maintenance challenge can emerge.  Whether using [pip](https://pypi.org/project/pip) or [poetry](https://python-poetry.org/) to manage python packages and dependencies, updating a container definition requires edits to the explicit package versions as well as to the pinned or locked versions of the package dependencies. This process can be error prone without automation and a repeatable CICD workflow.  \\r\\n\\r\\nA workflow pattern based on [docker buildkit](https://docs.docker.com/develop/develop-images/build_enhancements/) / [moby buildkit](https://github.com/moby/buildkit) multi-stage builds provides an approach that maintains all the build specifications in a single `Dockerfile`, while build tools like `make` provide a simple and consistent interface into the container build stages.  The data pipeline challenges addresses with a multi-stage build pattern include:  \\r\\n\\r\\n- automating lifecycle management of the Python packages used by data pipelines\\r\\n- integrating smoke testing of container images to weed out compatibility issues early\\r\\n- simplifying the developer experience with tools like `make` that can be used both locally and in CI/CD pipelines\\r\\n\\r\\nThe `Dockerfile` contains the definitions of the different target build stages and order of execution from one stage to the next.  The `Makefile` wraps the Dockerfile build targets into a standard set of workflow activities, following a similar to `$ config && make && make install` \\r\\n\\r\\n## The DataOps Container Lifecycle Workflow\\r\\n\\r\\nA typical dataops/gitops style workflow for maintaining container images includes actions in the local environment to define the required packages and produce the pinned dependency `poetry.lock` file or `requirements.txt` packages list containing the full set of pinned dependent packages.  \\r\\n\\r\\nGiven and existing project in a remote git repository with a CI/CD pipeline defined, the following workflow would be used to update package versions and dependencies:  \\r\\n\\r\\n<Tabs\\r\\n  defaultValue=\\"flow\\"\\r\\n  values={[\\r\\n    { label: \'Workflow\', value: \'flow\', },\\r\\n    { label: \'PlantUML\', value: \'plantuml\', },\\r\\n  ]\\r\\n}>\\r\\n<TabItem value=\\"flow\\">\\r\\n\\r\\n[![Multi-stage build workflow](images/multi-stage-build-workflow.png)](images/multi-stage-build-workflow.png) \\r\\n\\r\\n</TabItem>\\r\\n<TabItem value=\\"plantuml\\">\\r\\n\\r\\n```plantuml\\r\\n@startuml Multi-stage build workflow\\r\\n|Local Maintainer|\\r\\nstart\\r\\n:Clone git repository and\\r\\ncreate a feature branch;\\r\\n:Update declared\\r\\ndependencies;\\r\\n:Run build with\\r\\nrefresh option;\\r\\n:Update new pinned\\r\\npackages file in the\\r\\ngit repository;\\r\\n:Commit changes and push\\r\\nto remote repository;\\r\\n|Remote Git Service|\\r\\n:Validate feature branch\\r\\nchanges;\\r\\n:Merge changes into\\r\\nmain branch;\\r\\n:build target image and\\r\\npush to package registry;\\r\\n|Package Registry|\\r\\n:publish new image;\\r\\nstop\\r\\n@enduml\\r\\n```\\r\\n\\r\\n</TabItem>\\r\\n</Tabs>\\r\\n\\r\\nThe image maintainer selects the packages to update or refresh using a local development environment, working from a feature branch.  This includes performing an image smoke-test to validate the changes within the container image.  \\r\\n\\r\\nOnce refreshed image has been validated, the lock file or full pinned package list is commited back to the repository and pushed to the remote repository.  The CI/CD pipeline performs a trial build and conducts smoke testing.  On merge into the main branch, the target image is built, re-validated, and pushed to the container image registry.  \\r\\n\\r\\nThe multi-stage build pattern can support both defining both the declared packages for an environment as well as the dependent packages, but `poetry` splits the two into distinct files, a `pyproject.toml` file containing the declated packages and a `poetry.lock` file that contains the full set of declared and dependent packages, including pinned versions.  `pip` supports loading packages from different files, but requires a convention for which requirements file contains the declared packages and while contains the full set of pinned package versions produced by `pip freeze`.  The example code repo contains examples using both `pip` and `poetry`.  \\r\\n\\r\\nThe following example uses [poetry](https://python-poetry.org/) in a `python:3.8` base image to illustrate managing the dependencies and version pinning of python packages.  \\r\\n\\r\\n## Multi-stage Dockerfile\\r\\n\\r\\nThe `Dockerfile` defines the build stages used for both local refresh and by the CICD pipelines to build the target image.  \\r\\n\\r\\n<Tabs\\r\\n  defaultValue=\\"stages\\"\\r\\n  values={[\\r\\n    { label: \'Stages\', value: \'stages\', },\\r\\n    { label: \'PlantUML\', value: \'plantuml\', },\\r\\n  ]\\r\\n}>\\r\\n<TabItem value=\\"stages\\">\\r\\n\\r\\n[![Dockerfile Stages](images/Dockerfile-stages.png)](images/Dockerfile-stages.png) \\r\\n\\r\\n</TabItem>\\r\\n<TabItem value=\\"plantuml\\">\\r\\n\\r\\n```plantuml\\r\\n@startuml Dockerfile stages\\r\\n!define C4_PLANTUML https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master\\r\\n!include C4_PLANTUML/C4_Component.puml\\r\\n\\r\\nHIDE_STEREOTYPE()\\r\\nUpdateElementStyle(Container, $bgColor=green)\\r\\n\\r\\nTitle: Docker build stages\\r\\nContainer(pre, base-pre-pkg,)\\r\\nContainer(refresh, python-pkg-refresh,)\\r\\nContainer(pinned, python-pkg-pinned,)\\r\\nContainer(post, base-post-pkg,)\\r\\nContainer(smoke, smoke-test,)\\r\\nContainer(target, target-image,)\\r\\n\\r\\nRel(pre, refresh, \\"refresh\\")\\r\\nRel(pre, pinned, \\"pinned\\")\\r\\nRel(refresh, post, \\" \\")\\r\\nRel(pinned, post, \\" \\")\\r\\nRel(post, smoke, \\"QA\\")\\r\\nRel(post, target, \\"artefact\\")\\r\\n@enduml\\r\\n```\\r\\n\\r\\n</TabItem>\\r\\n</Tabs>\\r\\n\\r\\nThe Dockerfile makes use of the docker build arguments feature to pass in whether the build should refresh package versions or build the image from pinned packages.  \\r\\n\\r\\n### Build Stage: base-pre-pkg\\r\\n\\r\\nAny image setup and pre-python package installation steps.  For `poetry`, this includes setting the config option to skip the creation of a virtual environment as the container already provides the required isolation.  \\r\\n\\r\\n```Dockerfile\\r\\nARG PYTHON_PKG_VERSIONS=pinned\\r\\nFROM python:3.8 as base-pre-pkg\\r\\n\\r\\nRUN install -d /src && \\\\\\r\\n    pip install --no-cache-dir poetry==1.1.13 && \\\\\\r\\n    poetry config virtualenvs.create false\\r\\nWORKDIR /src\\r\\n```\\r\\n\\r\\n### Build Stage: python-pkg-refresh\\r\\n\\r\\nThe steps to generate a `poetry.lock` file containing the pinned package versions.  \\r\\n\\r\\n```Dockerfile\\r\\nFROM base-pre-pkg as python-pkg-refresh\\r\\nCOPY pyproject.toml poetry.lock /src/\\r\\nRUN poetry update && \\\\\\r\\n    poetry install \\r\\n```\\r\\n\\r\\n### Build Stage: python-pkg-pinned\\r\\n\\r\\nThe steps to install packages using the pinned package versions.\\r\\n\\r\\n```Dockerfile\\r\\nFROM base-pre-pkg as python-pkg-pinned\\r\\nCOPY pyproject.toml poetry.lock /src/\\r\\nRUN poetry install \\r\\n```\\r\\n\\r\\n### Build Stage: base-post-pkg\\r\\n\\r\\nA consolidation build target that can refer to either the python-pkg-refresh or the python-pkg-pinned stages, depending on the docker build argument and includes any post-package installation steps.  \\r\\n\\r\\n```Dockerfile\\r\\nFROM python-pkg-${PYTHON_PKG_VERSIONS} as base-post-pkg\\r\\n```\\r\\n\\r\\n### Build Stage: smoke-test\\r\\n\\r\\nSimple smoke tests and validation commands to validate the built image.  \\r\\n\\r\\n```Dockerfile\\r\\nFROM base-post-pkg as smoke-test\\r\\nWORKDIR /src\\r\\nCOPY tests/ ./tests\\r\\nRUN poetry --version && \\\\\\r\\n    python ./tests/module_smoke_test.py\\r\\n```\\r\\n\\r\\n### Build Stage: target-image\\r\\n\\r\\nThe final build target container image.  Listing the `target-image` as the last stage in the `Dockerfile` has the effect of also making this the default build target.  \\r\\n\\r\\n```Dockerfile\\r\\nFROM base-post-pkg as target-image\\r\\n```\\r\\n\\r\\n## Multi-stage Makefile\\r\\n\\r\\nThe Makefile provides a workflow oriented wrapper over the Dockerfile build stage targets.  The Makefile targets can be executed both in a local development environment as well as via a CICD pipeline.  The `Makefile` includes several variables that can either be run using default values, or overridden by the CI/CD pipeline.  \\r\\n\\r\\n<Tabs\\r\\n  defaultValue=\\"targets\\"\\r\\n  values={[\\r\\n    { label: \'Targets\', value: \'targets\', },\\r\\n    { label: \'PlantUML\', value: \'plantuml\', },\\r\\n  ]\\r\\n}>\\r\\n<TabItem value=\\"targets\\">\\r\\n\\r\\n[![Makefile targets](images/Makefile-targets.png)](images/Makefile-targets.png) \\r\\n\\r\\n</TabItem>\\r\\n<TabItem value=\\"plantuml\\">\\r\\n\\r\\n```plantuml\\r\\n@startuml Makefile targets\\r\\n!define C4_PLANTUML https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master\\r\\n!include C4_PLANTUML/C4_Component.puml\\r\\n\\r\\nHIDE_STEREOTYPE()\\r\\n\\r\\nTitle: Makefile targets\\r\\nContainer(style, style-check,)\\r\\nContainer(refresh, python-pkg-refresh, \\"docker target=smoke-test\\")\\r\\nContainer(smoke, smoke-test, \\"docker target=smoke-test\\")\\r\\nContainer(build, build, \\"docker target=target-image\\")\\r\\n\\r\\nRel(style, refresh, \\" \\")\\r\\nRel(style, build, \\" \\")\\r\\nRel(build, smoke, \\" \\")\\r\\n\\r\\n@enduml\\r\\n```\\r\\n\\r\\n</TabItem>\\r\\n</Tabs>\\r\\n\\r\\n## Make Target: style-check\\r\\n\\r\\nLinting and style checking of source code.  Can include both application code as well as the Dockerfile itself using tools such as [hadolint](https://github.com/hadolint/hadolint).  \\r\\n\\r\\n```Makefile\\r\\nstyle-check:\\r\\n\\thadolint ./Dockerfile\\r\\n```\\r\\n\\r\\n## Make Target: python-pkg-refresh\\r\\n\\r\\nThe `python-pkg-refresh` target builds a version of the target image with refreshed package versions. A temporary container instance is created from the target image and the `poetry.lock` file is copied into the local file system. The `smoke-test` docker build target is used to ensure image validation is also performed.\\r\\nThe temporary container as well as the package refresh image are removed after the build.  \\r\\n\\r\\n```Makefile\\r\\npython-pkg-refresh:\\r\\n\\t@echo \\">> Update python packages in container image\\"\\r\\n\\tdocker build ${DOCKER_BUILD_ARGS} \\\\\\r\\n\\t       --target smoke-test \\\\\\r\\n\\t\\t   --build-arg PYTHON_PKG_VERSIONS=refresh \\\\\\r\\n\\t\\t   --tag ${TARGET_IMAGE_NAME}:$@ .\\r\\n\\t@echo \\">> Copy the new poetry.lock file with updated package versions\\"\\r\\n\\tdocker create --name ${TARGET_IMAGE_NAME}-$@ ${TARGET_IMAGE_NAME}:$@\\r\\n\\tdocker cp ${TARGET_IMAGE_NAME}-$@:/src/poetry.lock .\\r\\n\\t@echo \\">> Clean working container and refresh image\\"\\r\\n\\tdocker rm ${TARGET_IMAGE_NAME}-$@\\r\\n\\tdocker rmi ${TARGET_IMAGE_NAME}:$@\\r\\n```\\r\\n\\r\\n### Make Target: build\\r\\n\\r\\nThe standard build target using pinned python package versions.  \\r\\n\\r\\n```Makefile\\r\\nbuild:\\r\\n\\tdocker build ${DOCKER_BUILD_ARGS} \\\\\\r\\n\\t       --target target-image \\\\\\r\\n\\t\\t   --tag ${TARGET_IMAGE_NAME}:${BUILD_TAG} .\\r\\n\\r\\n```\\r\\n\\r\\n### Make Target: smoke-test\\r\\n\\r\\nBuilds an image and peforms smoke testing.  The smoke-testing image is removed after the build.  \\r\\n\\r\\n```Makefile\\r\\nsmoke-test:\\r\\n\\tdocker build ${DOCKER_BUILD_ARGS} \\\\\\r\\n\\t       --target smoke-test \\\\\\r\\n\\t\\t   --tag ${TARGET_IMAGE_NAME}:$@ .\\r\\n\\tdocker rmi ${TARGET_IMAGE_NAME}:$@\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nThe toolchain combination of multi-stage container image builds with `make` provides a codified method for the lifecycle management of the containers used in data science and data engineering workloads.  \\r\\n\\r\\nThe maintainer:  \\r\\n\\r\\n```bash\\r\\ngit checkout -b my-refresh-feature\\r\\nmake python-pkg-refresh\\r\\nmake smoke-test\\r\\ngit add pyproject.toml poetry.lock\\r\\ngit commit -m \\"python package versions updated\\"\\r\\ngit push\\r\\n```\\r\\n\\r\\nThe CICD pipeline:  \\r\\n\\r\\n```bash\\r\\nmake build\\r\\nmake smoke-test\\r\\ndocker push <target-image>:<build-tag>\\r\\n```\\r\\n\\r\\n:::info\\r\\n\\r\\nYou can find the complete source code for this article at [https://gitlab.com/datwiz/multistage-pipeline-image-builds](https://gitlab.com/datwiz/multistage-pipeline-image-builds)\\r\\n\\r\\n:::"},{"id":"using-the-snowflake-sql-api-with-typescript","metadata":{"permalink":"/using-the-snowflake-sql-api-with-typescript","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-05-19-using-the-snowflake-sql-api-with-typescript/index.md","source":"@site/blog/2022-05-19-using-the-snowflake-sql-api-with-typescript/index.md","title":"Using the Snowflake SQL API with TypeScript","description":"This article demonstrates how to use the Snowflake REST API to retrieve data for a web application using TypeScript","date":"2022-05-19T00:00:00.000Z","formattedDate":"May 19, 2022","tags":[{"label":"snowflake","permalink":"/tags/snowflake"},{"label":"sql","permalink":"/tags/sql"},{"label":"typescript","permalink":"/tags/typescript"},{"label":"react","permalink":"/tags/react"},{"label":"jamstack","permalink":"/tags/jamstack"}],"readingTime":2.045,"truncated":false,"authors":[{"name":"Yuncheng Yang","title":"Full Stack Engineer","url":"https://www.linkedin.com/in/yuncheng-fabio-yang/","imageURL":"https://en.gravatar.com/userimage/195643035/72fc562ee87d0c67847c8989d2808129.jpg?size=80","key":"yunchengyang"}],"frontMatter":{"slug":"using-the-snowflake-sql-api-with-typescript","title":"Using the Snowflake SQL API with TypeScript","authors":["yunchengyang"],"draft":false,"image":"/img/blog/snowflake-sql-api-featured-image.png","tags":["snowflake","sql","typescript","react","jamstack"],"keywords":["snowflake","sql","typescript","react","jamstack"],"description":"This article demonstrates how to use the Snowflake REST API to retrieve data for a web application using TypeScript"},"prevItem":{"title":"DataOps with Container Images and Multi-Stage Builds","permalink":"/dataops-with-container-images-and-multi-stage-builds"},"nextItem":{"title":"Split a large Open API or Swagger Specification into smaller documents","permalink":"/split-a-large-swagger-openapi-specification-into-smaller-documents"}},"content":"import Gist from \'react-gist\';\\r\\n\\r\\nThis article demonstrates how to use the Snowflake REST API to retrieve data for a web application using TypeScript, in this case we are using keypair authentication with Snowflake.  \\r\\n\\r\\n## Overview\\r\\n\\r\\nSnowflake\u2019s SQL API allows you to access snowflake objects using SQL via a REST API request, this allows for easy integration with your applications and deployment pipelines. You can use the API to execute most DDL and DML statements.  \\r\\n\\r\\nThere are some limitations you need to be aware of however, for example interactions with stages (using PUT and GET aren\u2019t supported via the Snowflake API) or stored procedure operations (using CALL), you can read more on this [here](https://docs.snowflake.com/en/developer-guide/sql-api/intro.html#limitations-of-the-sql-api).  \\r\\n\\r\\n\\r\\n## Endpoints\\r\\n\\r\\nThere are three endpoints provided:  \\r\\n\\r\\n- `/api/v2/statements/`\\r\\n- `/api/v2/statement/<statementHandle>`\\r\\n- `/api/v2/statements/<statementHandle/cancel`\\r\\n\\r\\nWe will be looking at the first two in this article.  \\r\\n\\r\\n## Authentication Methods\\r\\n\\r\\nThere are two types of Authentication methods for the API, __OAuth__ and __Key Pair__. For OAuth method, you can choose to use `X-Snowflake-Authorization-Token-Type` header, if this header is not present, Snowflake assumes that the token in the `Authorization` header is an OAuth token. For Key Pair method, the JWT token will be in the `Authorization` header as `Bearer <your token>`.  \\r\\n\\r\\nLet\u2019s walk through how to generate and use the JWT.  \\r\\n\\r\\n## Generating the JWT\\r\\n\\r\\nHere\'s whats needed:  \\r\\n\\r\\n[![Snowflake JWT](images/snowflake-jwt.png)](images/snowflake-jwt.png)\\r\\n\\r\\n### the Code\\r\\n\\r\\n<Gist id=\\"6fbe63cace2ad993ac06b324954b7daa\\" \\r\\n/>\\r\\n\\r\\n## Request Body\\r\\n\\r\\nNow we need a request body:  \\r\\n\\r\\n<Gist id=\\"ae0ebbedf51f232e7147e72f11007b68\\" \\r\\n/>\\r\\n\\r\\n## Submitting the Request\\r\\n\\r\\nWe will need to include the __region__ and __account identifier__, for instance if your account identifier includes a region (e.g. xy12345.us-east2.aws.snowflakecomputing.com).  \\r\\n\\r\\n<Gist id=\\"535123dda1536b5a48c6213470e83d6f\\" \\r\\n/>\\r\\n\\r\\n## Response Handling\\r\\n\\r\\nWhen making a `SELECT` query, there are three things worth noting:  \\r\\n1.\\t`rowType` fields in the `resultSetMetaData` represent the columns\\r\\n2.\\tdata without column names is in the format of `string[][]`\\r\\n3.\\t`partitionInfo` is an array of object representing different partitions\\r\\n\\r\\nFor more information see [Handling Responses from the SQL API - Snowflake Documentation](https://docs.snowflake.com/en/developer-guide/sql-api/handling-responses.html).  \\r\\n\\r\\n### Parsing data\\r\\n\\r\\nHere is a Typescript code snippet demonstrating parsing return data:  \\r\\n\\r\\n<Gist id=\\"d397621879b063ea0761233984aafe69\\" \\r\\n/>\\r\\n\\r\\n### Handling multiple partitions\\r\\n\\r\\nLarge result sets are paginated into *partitions*, each partition is a set of rows.\\r\\n\\r\\n:::note\\r\\n\\r\\nNote that the pages (referred to as partitions) are __NOT__ based on row count, instead they are based on the compressed batch size, so they will not be uniform in terms of the number of rows.\\r\\n\\r\\n:::\\r\\n\\r\\nTo get a partition, send a `GET` request with Url `https://<accountIdentifier>.snowflakecomputing.com/api/v2/statements/?partition=<partitionId>`.  \\r\\n\\r\\n<Gist id=\\"7f2b0443a9ca5e8284b987a9e84ca301\\" \\r\\n/>\\r\\n\\r\\nThanks!"},{"id":"split-a-large-swagger-openapi-specification-into-smaller-documents","metadata":{"permalink":"/split-a-large-swagger-openapi-specification-into-smaller-documents","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-05-02-split-a-large-swagger-openapi-specification-into-smaller-documents/index.md","source":"@site/blog/2022-05-02-split-a-large-swagger-openapi-specification-into-smaller-documents/index.md","title":"Split a large Open API or Swagger Specification into smaller documents","description":"Simple utility to split a large Open API or Swagger specification into smaller documents.","date":"2022-05-02T00:00:00.000Z","formattedDate":"May 2, 2022","tags":[{"label":"openapi","permalink":"/tags/openapi"},{"label":"swagger","permalink":"/tags/swagger"},{"label":"api","permalink":"/tags/api"},{"label":"stackql","permalink":"/tags/stackql"}],"readingTime":1.32,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"split-a-large-swagger-openapi-specification-into-smaller-documents","title":"Split a large Open API or Swagger Specification into smaller documents","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/split-up-large-openapi-docs.png","tags":["openapi","swagger","api","stackql"],"keywords":["openapi","swagger","api","stackql"],"description":"Simple utility to split a large Open API or Swagger specification into smaller documents."},"prevItem":{"title":"Using the Snowflake SQL API with TypeScript","permalink":"/using-the-snowflake-sql-api-with-typescript"},"nextItem":{"title":"Stream Processing with Spark Structured Streaming, Kafka and Snowflake using Python","permalink":"/stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python"}},"content":"Open API specifications can get quite large, especially for providers with upwards of 500 routes or operations.  \\r\\n\\r\\nThe challenge is to create standalone documents scoped by a service or path within the parent API specification and include only the components (schemas, responses, etc.) that pertain to operations included in the child document.  \\r\\n\\r\\nWhen I went looking for library or utility to do this, I couldn\u2019t find one... so I have developed one myself.  \\r\\n\\r\\nIt\'s a simple command (nodejs based but can be run in a bash terminal or from the Windows command line) which requires a few options, including:  \\r\\n\\r\\n- the __*provider name*__ (e.g. `github`)\\r\\n- a __*provider version*__ which is a version you set - allowing you to make minor modifications to the output documents (e.g. `v0.1.0`)\\r\\n- a __*service discriminator*__ which is a JSONPath expression to identify a service name within each route in the parent file, this is used to assign operations to services in separate documents (e.g. `\'$[\\"x-github\\"].category\'`)\\r\\n- an __*output directory*__ (e.g. `./dev`)\\r\\n\\r\\nand of course, the __*openapi spec document*__ you are splitting up.\\r\\n\\r\\nan example is shown here:\\r\\n\\r\\n```\\r\\nopenapi-doc-util split \\\\\\r\\n-n github \\\\\\r\\n-v v0.1.0 \\\\\\r\\n-s \'$[\\"x-github\\"].category\' \\\\\\r\\n-o ./dev \\\\\\r\\nref/github/api.github.com.yaml\\r\\n```\\r\\n\\r\\nHelp for the command is available using `openapi-doc-util split`.  \\r\\n\\r\\nThe net result is 59 self-contained, service scoped documents, containing only the components referenced by routes in the service document.\\r\\n\\r\\nYou can access this utility via [__NPMJS__](https://www.npmjs.com/package/@stackql/openapi-doc-util) or via [__GitHub__](https://github.com/stackql/openapi-doc-util).  \\r\\n\\r\\nSplitting up a large open API spec document, is the first stage in developing a [__StackQL__](https://github.com/stackql/stackql) provider which we will discuss next time!"},{"id":"stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python","metadata":{"permalink":"/stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-04-28-stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python/index.md","source":"@site/blog/2022-04-28-stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python/index.md","title":"Stream Processing with Spark Structured Streaming, Kafka and Snowflake using Python","description":"Simple demonstration of stream processing with Spark Structured Streaming, Kafka and Snowflake using Python","date":"2022-04-28T00:00:00.000Z","formattedDate":"April 28, 2022","tags":[{"label":"snowflake","permalink":"/tags/snowflake"},{"label":"kafka","permalink":"/tags/kafka"},{"label":"spark","permalink":"/tags/spark"},{"label":"sql","permalink":"/tags/sql"},{"label":"streaming","permalink":"/tags/streaming"}],"readingTime":3.555,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python","title":"Stream Processing with Spark Structured Streaming, Kafka and Snowflake using Python","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/kafka-spark-snowflake.png","tags":["snowflake","kafka","spark","sql","streaming"],"keywords":["snowflake","kafka","spark","sql","streaming"],"description":"Simple demonstration of stream processing with Spark Structured Streaming, Kafka and Snowflake using Python"},"prevItem":{"title":"Split a large Open API or Swagger Specification into smaller documents","permalink":"/split-a-large-swagger-openapi-specification-into-smaller-documents"},"nextItem":{"title":"Simple CLI Application to Login to Okta using PKCE","permalink":"/simple-cli-pkce-auth-using-okta"}},"content":"Structured Streaming in Spark provides a powerful framework for stream processing an analysis, such as streaming transformations, stateful streaming or sliding window operations.  \\r\\n\\r\\nKafka is a common streaming source and sink for Spark Streaming and Structured Streaming operations.  However, there may be situations where a data warehouse (such as Snowflake) is a more appropriate target for streaming operations, especially where there is a reporting or long-term storage requirement on the data derived from the streaming source.  \\r\\n\\r\\nThis article will demonstrate just how easy this is to implement using Python.  \\r\\n\\r\\n## Design\\r\\n\\r\\nThe following diagram illustrates the ingestion design for this example:  \\r\\n\\r\\n[![Spark Structured Streaming using Kafka and Snowflake](images/spark-streaming-kafka-snowflake.png)](images/spark-streaming-kafka-snowflake.png)\\r\\n\\r\\n## Snowflake Setup\\r\\n\\r\\nSome prerequisites for Snowflake:  \\r\\n\\r\\n1.\\tYou will need to create a user (or use an existing user), in either case the user will need to be identified by a private key.  You will need to generate a key pair as follows:  \\r\\n\\r\\n```bash\\r\\nopenssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8 -nocrypt\\r\\nopenssl rsa -in rsa_key.p8 -pubout -out rsa_key.pub\\r\\n```\\r\\ncopy the contents of the `rsa_key.pub` file, remove the `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----` strings, then remove the line breaks to form one string, use this string as the `RSA_PUBLIC_KEY` in a `CREATE USER` or `ALTER USER` statement in Snowflake, like:  \\r\\n\\r\\n```sql\\r\\nALTER USER youruser SET RSA_PUBLIC_KEY=\'MIIBI...\';\\r\\n```\\r\\n\\r\\n2.  Now setup the target database, schema and table you will use to write out your stream data (the schema for the table must match the schema for the Data Stream you will use the `DataStreamWriter` to emit records to Snowflake  \\r\\n\\r\\nThe user you will be using (that you setup the key pair authentication for) will need to be assigned a default role to which the appropriate write permissions are granted to the target objects in Snowflake.  You will also need to designate a virtual warehouse (which your user must have `USAGE` permissions to.  \\r\\n\\r\\n## The Code\\r\\n\\r\\nNow that we have the objects and user setup in Snowflake, we can construct our Spark application.  \\r\\n\\r\\nFirst, you will need to start your Spark session (either using `pyspark` or `spark-submit`) including the packages that Spark will need to connect to Kafka and to Snowflake.  \\r\\n\\r\\nThe Snowflake packages include a JDBC driver and the Snowflake Connector for Spark, see [Snowflake Connector for Spark](https://docs.snowflake.com/en/user-guide/spark-connector.html).  \\r\\n\\r\\nAn example is shown here (package versions may vary depending upon the version of Spark you are using):  \\r\\n\\r\\n```bash\\r\\npyspark \\\\\\r\\n--packages \\\\\\r\\nnet.snowflake:snowflake-jdbc:3.13.14,\\\\\\r\\nnet.snowflake:spark-snowflake_2.12:2.10.0-spark_3.1,\\\\\\r\\norg.apache.spark:spark-sql-kafka-0-10_2.12:3.2.1\\r\\n```\\r\\n\\r\\nNow that we have a spark session with the necessary packages, lets go...  \\r\\n\\r\\n```python\\r\\n# import any required functions, set the checkpoint directory, and log level (optional)\\r\\nfrom pyspark.sql.functions import split\\r\\nspark.sparkContext.setLogLevel(\\"ERROR\\")\\r\\nspark.conf.set(\\"spark.sql.streaming.checkpointLocation\\", \\"file:///tmp\\")\\r\\n```\\r\\n\\r\\nsetup connection options for Snowflake by creating an `sfOptions` dictionary  \\r\\n\\r\\n```python\\r\\nsfOptions = {\\r\\n\\t  \\"sfURL\\" : sfUrl,\\r\\n\\t  \\"sfUser\\" : \\"avensolutions\\",\\r\\n\\t  \\"pem_private_key\\": private_key,\\r\\n\\t  \\"sfDatabase\\" : \\"SPARK_SNOWFLAKE_DEMO\\",\\r\\n\\t  \\"sfSchema\\" : \\"PUBLIC\\",\\r\\n\\t  \\"sfWarehouse\\" : \\"COMPUTE_WH\\",\\r\\n\\t  \\"streaming_stage\\" : \\"mystage\\"\\r\\n}\\r\\n```\\r\\n\\r\\nset a variable for the Snowflake Spark connector  \\r\\n\\r\\n```python\\r\\nSNOWFLAKE_SOURCE_NAME = \\"net.snowflake.spark.snowflake\\"\\r\\n```\\r\\n\\r\\nread messages from Kafka:    \\r\\n\\r\\n```python\\r\\nlines = spark \\\\\\r\\n  .readStream \\\\\\r\\n  .format(\\"kafka\\") \\\\\\r\\n  .option(\\"kafka.bootstrap.servers\\", \\"kafkabroker:9092\\") \\\\\\r\\n  .option(\\"subscribe\\", \\"weblogs\\") \\\\\\r\\n  .load()\\r\\n```\\r\\n\\r\\nperform necessary transformations (the fields and data types in the resultant data structure must match the target table you created in Snowflake:  \\r\\n\\r\\n```python\\r\\nlog_recs = lines.select(\\r\\n    split(lines.value.cast(\\"string\\"), \\" \\").alias(\\"data\\")\\r\\n    )\\r\\n    \\r\\nlog_data = log_recs.selectExpr(\\r\\n  \\"CAST(data[0] as string) as date\\",\\r\\n  \\"CAST(data[1] as string) as time\\",\\r\\n  \\"CAST(data[2] as string) as c_ip\\",  \\r\\n  \\"CAST(data[3] as string) as cs_username\\",\\r\\n  \\"CAST(data[4] as string) as s_sitename\\",  \\r\\n  \\"CAST(data[5] as string) as s_computername\\",\\r\\n  \\"CAST(data[6] as string) as s_ip\\",    \\r\\n  \\"CAST(data[7] as int) as s_port\\",  \\r\\n  \\"CAST(data[8] as string) as cs_method\\",    \\r\\n  \\"CAST(data[9] as string) as cs_uri_stem\\",  \\r\\n  \\"CAST(data[10] as string) as cs_uri_query\\",  \\r\\n  \\"CAST(data[11] as int) as sc_status\\",\\r\\n  \\"CAST(data[12] as int) as time_taken\\",    \\r\\n  \\"CAST(data[13] as string) as cs_version\\",    \\r\\n  \\"CAST(data[14] as string) as cs_host\\",\\r\\n  \\"CAST(data[15] as string) as User_Agent\\",\\r\\n  \\"CAST(data[16] as string) as Referer\\",    \\r\\n)\\r\\n```\\r\\n\\r\\nwrite to Snowflake!  \\r\\n\\r\\n```python\\r\\nquery = log_data\\\\\\r\\n\\t.writeStream\\\\\\r\\n\\t.format(SNOWFLAKE_SOURCE_NAME) \\\\\\r\\n\\t.options(**sfOptions) \\\\\\r\\n\\t.option(\\"dbtable\\", \\"WEB_LOGS\\") \\\\\\r\\n\\t.trigger(processingTime=\'30 seconds\') \\\\\\r\\n\\t.start()\\r\\n\\t\\r\\nquery.awaitTermination()\\r\\n```\\r\\n\\r\\n:::info\\r\\n\\r\\nNote that I have included the `processingTime` trigger of `30 seconds` (this is akin to the `batchInterval` in the DStream API), you should tune this to get a balance between batch sizes to ingest into Snowflake (which will benefit from larger batches) and latency.\\r\\n\\r\\n:::\\r\\n\\r\\n## The Results\\r\\n\\r\\n[![Spark Structured Streaming into Snowflake](images/snowflake-screenshot.png)](images/snowflake-screenshot.png)\\r\\n\\r\\nEnjoy!"},{"id":"simple-cli-pkce-auth-using-okta","metadata":{"permalink":"/simple-cli-pkce-auth-using-okta","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-04-17-simple-cli-pkce-auth-using-okta/index.md","source":"@site/blog/2022-04-17-simple-cli-pkce-auth-using-okta/index.md","title":"Simple CLI Application to Login to Okta using PKCE","description":"Simple command line application to login to an Okta authorization server using a PKCE flow.","date":"2022-04-17T00:00:00.000Z","formattedDate":"April 17, 2022","tags":[{"label":"okta","permalink":"/tags/okta"},{"label":"oauth2","permalink":"/tags/oauth-2"},{"label":"cli","permalink":"/tags/cli"},{"label":"golang","permalink":"/tags/golang"},{"label":"pkce","permalink":"/tags/pkce"}],"readingTime":2.09,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"simple-cli-pkce-auth-using-okta","title":"Simple CLI Application to Login to Okta using PKCE","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/okta-pkce-cli-blog-image.png","tags":["okta","oauth2","cli","golang","pkce"],"keywords":["okta","oauth2","cli","golang","pkce"],"description":"Simple command line application to login to an Okta authorization server using a PKCE flow."},"prevItem":{"title":"Stream Processing with Spark Structured Streaming, Kafka and Snowflake using Python","permalink":"/stream-processing-with-spark-structured-streaming-kafka-and-snowflake-using-python"},"nextItem":{"title":"Cloudy with a Chance of Big Data has Moved","permalink":"/cloudy-with-a-chance-of-big-data-has-moved"}},"content":"import Gist from \'react-gist\';\\r\\n\\r\\nThis article demonstrates a simple command line utility to login to an authorization server (Okta in this case) using a PKCE (Proof Key for Code Exchange) flow.  This is the preferred flow for public clients (such as Single Page Applications).  \\r\\n\\r\\n> The code for this article is available on [__GitHub__](https://github.com/stackql/okta-pkce-login)\\r\\n\\r\\n## Example\\r\\n\\r\\n[![Okta PKCE cli login example](images/okta-pkce-cli-login.png)](images/okta-pkce-cli-login.png)\\r\\n\\r\\n## Overview\\r\\n\\r\\nThis application can be used to illustrate the authorization/authentication flow discussed in [Simple SSO with an external IdP using Active Directory and Okta](https://fullstackchronicles.io/simple-sso-with-an-external-idp-using-active-directory-and-okta).  A flow which is pictured here:  \\r\\n\\r\\n[![PKCE Authorization t Okta using an AD IdP](images/seqdiagram.png)](images/seqdiagram.png)\\r\\n\\r\\n## Steps\\r\\n\\r\\nThe steps involved in the implementation of a PKCE login flow are as follows:\\r\\n\\r\\n### Generate a `code_challenge`\\r\\n\\r\\nTo implement a PKCE flow, you first need to generate a *Code Verifier* (which is a random value you create), the *Code Verifier* is then hashed using a SHA256 algorithm.  The hash is then used as the *Code Challenge*.  An example function to generate a code challenge is shown below:  \\r\\n \\r\\n<Gist id=\\"9a2a162813d77b83821d821b6a4a390a\\" \\r\\n/>\\r\\n\\r\\nFor more information see [Use PKCE to Make Your Apps More Secure](https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#:~:text=PKCE%20works%20by%20having%20the,is%20called%20the%20Code%20Challenge). \\r\\n\\r\\n### Build the `authorize` url\\r\\n\\r\\nThe `authorize` url is used to initiate the authorization flow with the authorization server.  An example function to construct the `authorize` url is shown below:  \\r\\n\\r\\n<Gist id=\\"9e628b905a532e5bd59f022a4adca340\\" \\r\\n/>\\r\\n\\r\\n### Get the authorization code via redirect uri\\r\\n\\r\\nThe `redirecturi` parameter supplied in the `authorize` url is used to retrieve the authorization code from the authorization server.  In order to get this code using a front end flow, you need to define a handler that will get the authorization code, call the token endpoint, and close the HTTP server, as shown here:  \\r\\n\\r\\n<Gist id=\\"617417bdcc54efcea9d37d27228f7f2a\\" \\r\\n/>\\r\\n\\r\\n### Exchange the code for an access token\\r\\n\\r\\nThe access token is what you ultimatly want, as this is the token that will be used to access protected resources.  An example function to exchange the authorization code for an access token is shown below:  \\r\\n\\r\\n<Gist id=\\"0a990674d8bde2baffc0b0231f52ed52\\" \\r\\n/>\\r\\n\\r\\n### (Optional) Get the user profile\\r\\n\\r\\nThe access token can be used to get the user profile, this is done by calling the `userinfo` endpoint using the token.  An example function to get the user profile is shown below:  \\r\\n\\r\\n<Gist id=\\"f04e8b018417a73986d3696c58f735cb\\" \\r\\n/>\\r\\n\\r\\n## with inspiration from...\\r\\n\\r\\n- [Auth0 PKCE flow for a CLI built in golang](https://gist.github.com/ogazitt/f749dad9cca8d0ac6607f93a42adf322)\\r\\n- [Golang sample for a CLI obtaining an access token using the PKCE flow](https://community.auth0.com/t/golang-sample-for-a-cli-obtaining-an-access-token-using-the-pkce-flow/40922)\\r\\n- [oktadev/okta-node-cli-example](https://github.com/oktadev/okta-node-cli-example)\\r\\n- [Build a Command Line Application with Node.js](https://developer.okta.com/blog/2019/06/18/command-line-app-with-nodejs)\\r\\n- [About the Authorization Code grant with PKCE](https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/#about-the-authorization-code-grant-with-pkce)"},{"id":"cloudy-with-a-chance-of-big-data-has-moved","metadata":{"permalink":"/cloudy-with-a-chance-of-big-data-has-moved","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-04-08-cloudy-with-a-chance-of-big-data-has-moved/index.md","source":"@site/blog/2022-04-08-cloudy-with-a-chance-of-big-data-has-moved/index.md","title":"Cloudy with a Chance of Big Data has Moved","description":"Cloudy with a chance of Big Data is now Full Stack Chronicles.","date":"2022-04-08T00:00:00.000Z","formattedDate":"April 8, 2022","tags":[{"label":"blog","permalink":"/tags/blog"},{"label":"cloudywithachanceofbigdata.com","permalink":"/tags/cloudywithachanceofbigdata-com"},{"label":"fullstackchronicles.io","permalink":"/tags/fullstackchronicles-io"}],"readingTime":0.095,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"cloudy-with-a-chance-of-big-data-has-moved","title":"Cloudy with a Chance of Big Data has Moved","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/full-stack-chronicles-blog.png","tags":["blog","cloudywithachanceofbigdata.com","fullstackchronicles.io"],"keywords":["blog","cloudywithachanceofbigdata.com","fullstackchronicles.io"],"description":"Cloudy with a chance of Big Data is now Full Stack Chronicles."},"prevItem":{"title":"Simple CLI Application to Login to Okta using PKCE","permalink":"/simple-cli-pkce-auth-using-okta"},"nextItem":{"title":"Scaling up Prefect with GitStorage","permalink":"/scaling-up-prefect-with-gitstorage"}},"content":"> Our blog has moved to [__fullstackchronicles.io__](https://fullstackchronicles.io/), same content with a new home!  Much more content to come, enjoy!"},{"id":"scaling-up-prefect-with-gitstorage","metadata":{"permalink":"/scaling-up-prefect-with-gitstorage","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-02-28-scaling-up-prefect-with-gitstorage/index.md","source":"@site/blog/2022-02-28-scaling-up-prefect-with-gitstorage/index.md","title":"Scaling up Prefect with GitStorage","description":"Prefect.io is a python based Data Engineering toolbox for building and","date":"2022-02-28T00:00:00.000Z","formattedDate":"February 28, 2022","tags":[{"label":"prefect","permalink":"/tags/prefect"},{"label":"gitlab","permalink":"/tags/gitlab"},{"label":"docker","permalink":"/tags/docker"},{"label":"etl","permalink":"/tags/etl"}],"readingTime":6.12,"truncated":false,"authors":[{"name":"Chris Ottinger","title":"Senior Technologist","url":"https://github.com/datwiz","imageURL":"http://0.gravatar.com/avatar/f9af9c3fae755ac170c5798c53c5267d?s=80","key":"chrisottinger"}],"frontMatter":{"slug":"scaling-up-prefect-with-gitstorage","title":"Scaling up Prefect with GitStorage","authors":["chrisottinger"],"draft":false,"image":"/img/blog/scaling-up-prefect-with-gitstorage-featured-image.png","tags":["prefect","gitlab","docker","etl"],"keywords":["prefect","gitlab","docker","etl"]},"prevItem":{"title":"Cloudy with a Chance of Big Data has Moved","permalink":"/cloudy-with-a-chance-of-big-data-has-moved"},"nextItem":{"title":"Implementing a Serverless SFTP Gateway using the AWS Transfer Family","permalink":"/implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n[Prefect.io](https://prefect.io) is a python based Data Engineering toolbox for building and\\noperating Data Pipelines.  Out of the box, Prefect provides an initial workflow for managing data\\npipelines that results in a container image per data pipeline job.\\n\\nThe one-to-one relationship between data pipeline jobs and container images enables data engineers to\\ncraft pipelines that are loosely coupled and don\'t require a shared runtime environment configuration.\\nHowever, as the number of data pipeline jobs grow the default container per job approach starts to\\nintroduce workflow bottlenecks and lifecycle management overheads.  For example, in order\\nto update software components used by flows, such as upgrading the version of Prefect, all the data\\npipeline job images have to be rebuilt and redeployed.  Additionally the container image per job workflow\\nintroduces a wait time for data engineers to re-build data pipeline container images and test flows\\ncentrally on Prefect Server or Prefect Cloud environment.\\n\\nFortunately, Prefect comes to its own rescue with the ability to open up the box, exposing the flexibility\\nin the underlying framework.\\n\\n## Out of the box - Prefect DockerStorage\\nOut of the box, Prefect provides a simple workflow for defining and deploying data pipelines as container images.\\nAfter getting a first data pipeline running in a local environment, the attention turns to scaling up development\\nand deploying flows into a managed environment, using either the Prefect Cloud service or a Prefect Server.\\n\\nCombining Prefect Cloud or Prefect Server with Kubernetes provides a flexible and scalable platform\\nsolution for moving data pipelines into production.  There are a number of options for packaging\\ndata pipeline flow code for execution on kubernetes clusters.  The Docker Storage option provides\\nthe workflow for bundling the data pipeline job code into container images, enabling a common\\ncontrolled execution environment and well understood distribution mechanism.  The data pipeline runs as\\na pod using the flow container image.\\n\\nPrefect Docker Storage workflow steps for building and deploying data pipeline flows include:\\n\\n<Tabs\\n  defaultValue=\\"steps\\"\\n  values={[\\n    { label: \'Steps\', value: \'steps\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"steps\\">\\n\\n[![Workflow Steps](images/image1.png)](images/image1.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```\\n@startuml \\"docker-storage-workflow\\"\\n(*) --\x3e \\"package flow code\\ninto a container image\\" \\n--\x3e \\"register Prefect flow\\nusing image reference\\"\\n--\x3e \\"push image to container registry\\"\\n--\x3e \\"run flow in Prefect Server or Cloud\\n(new image pulled from registry)\\"\\n--\x3e (*)\\n@enduml\\n```\\n</TabItem>\\n</Tabs>\\n\\n* packaging a flow (python code) as a serialised/pickled object into a container image\\n* registering the flow using the container image name\\n* pushing the container image to a container repository accessible from the kubernetes cluster\\n* running the flow by running an instance of the named container image as a kubernetes pod\\n\\nThis is relatively simple immutable workflow.  Each data pipeline flow version is effectively a unique and\\nself contained \'point-in-time\' container image.  This initial workflow can also be extended to package\\nmultiple related flows into a single container image, reducing the number of resulting container images.\\nBut, as the number of data pipeline jobs grow, there issues of container image explosion and data engineering\\nproductivity remain.\\n\\nUsing Prefect GitStorage for flows addresses both container image proliferation as well as development\\nbottlenecks.\\n\\n## Prefect Git Storage\\nPrefect [Git Storage](https://docs.prefect.io/orchestration/flow_config/storage.html#git) provides a workflow for developing and deploying data pipelines directly from git repositories,\\nsuch as Gitlab or Github.  The data pipeline code (python) is pulled from the git repository on each invocation\\nwith the ability to reference git branches and git tags.  This approach enables:\\n* reducing the number of container images to the number of different runtime configurations to be supported.\\n* improving the data engineering development cycle time by removing the need to build and push container images\\non each code change.\\n* when combined with kubernetes Prefect Run Configs and Job templates, enables selection of specific runtime environment images\\n\\nNote that the GitStorage option does required access from the runtime kubernetes cluster to the central git storage\\nservice, e.g. gitlab, github, etc.\\n\\nPrefect Git Storage workflow steps for \'building\' and deploying data pipeline flows include:\\n\\n<Tabs\\n  defaultValue=\\"steps\\"\\n  values={[\\n    { label: \'Steps\', value: \'steps\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"steps\\">\\n\\n[![Workflow Steps](images/image2.png)](images/image2.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```\\n@startuml \\"git-storage-workflow\\"\\n(*) --\x3e \\"push commited flow code\\nchanges to git service\\"\\n--\x3e \\"register PrefectFlow\\nusing branch or tag reference\\"\\n--\x3e \\"run flow in Prefect Server or Cloud\\n(code pulled from git service)\\"\\n--\x3e (*)\\n@enduml\\n```\\n</TabItem>\\n</Tabs>\\n\\n* pushing the committed code to the central git service\\n* registering the flow using the git repository url and branch or tag reference\\n* running the flow by pulling the reference code from the git service in a kubernetes pod\\n\\nThe container image build and push steps are removed from the developer feedback cycle time.\\nDepending on network bandwidth and image build times, this can save remove 5 to 10 minutes from each deployment iteration.\\n\\n### Pushing the flow code\\nOnce a set of changes to the data pipeline code has been committed, push to the central git service.\\n```bash\\n$ git commit\\n$ git push\\n```\\n\\n### Registering the flow\\nThe flow can be registered with Prefect using either a branch (HEAD or latest) or tag reference.  Assuming\\na workflow with feature branches:\\n* feature branches: register the flow code using the feature branch.  This enables the latest version (HEAD)\\nof the pushed flow code to be used for execution.  It also enables skipping re-registration of the flow on new\\nchanges as the HEAD of the branch is pulled on each flow run\\n* main line branches: register pinned versions of the flow using git tags.  This enables the use of a \\nspecific version of the flow code to be pulled on each flow run, regardless of future changes.\\n\\nDetermining the which reference to use:\\n```python\\n# using gitpython module to work with repo info\\nfrom git import Repo\\n\\n# presidence for identifing where to find the flow code\\n# BUILD_TAG => GIT_BRANCH => active_branch\\nbuild_tag = branch_name = None\\nbuild_tag = os.getenv(\\"BUILD_TAG\\", \\"\\")\\nif build_tag == \\"\\":\\n  branch_name = os.getenv(\\"GIT_BRANCH\\", \\"\\")\\n  if branch_name == \\"\\":\\n    branch_name = str(Repo(os.getcwd()).active_branch)\\n```\\n\\nConfiguring Prefect Git storage:\\n```python\\nfrom prefect.storage import Git\\nimport my_flows.hello_flow as flow # assuming flow is defined in ./my_flows/flow.py\\n\\n# example using Gitlab\\n# either branch_name or tag must be empty string \\"\\" or None\\nstorage = Git(\\n    repo_host=git_hostname,\\n    repo=repo_path,\\n    flow_path=f\\"{flow.__name__.replace(\'.\',\'/\')}.py\\",\\n    flow_name=flow.flow.name,\\n    branch_name=branch_name,\\n    tag=build_tag,\\n    git_token_secret_name=git_token_secret_name,\\n    git_token_username=git_token_username\\n)\\n\\nstorage.add_flow(flow.flow)\\nflow.flow.storage = storage\\n\\nflow.flow.regsiter(build=False)\\n```\\n\\nOnce registered, the flow storage details can be viewed in the Prefect Server or Prefect Cloud UI.  In this example, Prefect will use the `HEAD` version of the `main` branch on each flow run.\\n\\n[![hello flow storage details](images/flow-storage-details.png)](images/flow-storage-details.png)\\n\\n## Next Steps - Run Config\\nWith Prefect Git Storage the runtime configuration and environment management is decoupled from the\\ndata pipeline development workflow.  Unlike with Docker Storage, with Git Storage, the runtime\\nexecution environment and data pipeline development workflows are defined and managed separately.\\nAs an added benefit, the developer feedback loop cycle time is also reduced.\\n\\nWith the data engineering workflow addressed, the next step in scaling out the Prefect solution\\nturns to configuration and lifecycle management of the runtime environment for data pipelines.\\nPrefect Run Configs and Job templates provide the tools retaining the flexibility on container\\nimage based runtime environments with improved manageability."},{"id":"implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family","metadata":{"permalink":"/implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-02-23-implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family/index.md","source":"@site/blog/2022-02-23-implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family/index.md","title":"Implementing a Serverless SFTP Gateway using the AWS Transfer Family","description":"An example implementation of an SFTP gateway using the AWS Transfer Family service, to store client data in an encrypted S3 bucket.","date":"2022-02-23T00:00:00.000Z","formattedDate":"February 23, 2022","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"aws transfer family","permalink":"/tags/aws-transfer-family"},{"label":"serverless","permalink":"/tags/serverless"},{"label":"snowflake","permalink":"/tags/snowflake"},{"label":"snowpipe","permalink":"/tags/snowpipe"},{"label":"sftp","permalink":"/tags/sftp"},{"label":"managed file transfer","permalink":"/tags/managed-file-transfer"}],"readingTime":5.935,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family","title":"Implementing a Serverless SFTP Gateway using the AWS Transfer Family","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/aws-transfer-for-sftp.png","tags":["aws","aws transfer family","serverless","snowflake","snowpipe","sftp","managed file transfer"],"keywords":["aws","aws transfer family","serverless","snowflake","snowpipe","sftp","managed file transfer"],"description":"An example implementation of an SFTP gateway using the AWS Transfer Family service, to store client data in an encrypted S3 bucket."},"prevItem":{"title":"Scaling up Prefect with GitStorage","permalink":"/scaling-up-prefect-with-gitstorage"},"nextItem":{"title":"Simple SSO with an external IdP using Active Directory and Okta","permalink":"/simple-sso-with-an-external-idp-using-active-directory-and-okta"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Gist from \'react-gist\';\\n\\n> When you want the SFTP service without the SFTP Server.  \\n\\nIn implementing data platforms with external data providers, it is common to use a managed file transfer platform or an SFTP gateway as an entry point for providers to supply data to your system.  \\n\\nOften in past implementations this would involve deploying a sever (typically a Linux VM) and provisioning and configuring an SFTP service.  If you wanted the data sent by clients to be copied to another storage medium (such as S3 or EFS) you would need to roll your own code or subscribe to a marketplace offering to do so.  \\n\\nI recently trialled the [AWS Transfer Family SFTP gateway](https://docs.aws.amazon.com/transfer/index.html) offering from AWS and sharing my adventures here.  \\n\\n## Architecture\\n\\nIn this reference architecture, we are deploying an SFTP service which uses a path in an S3 bucket as a user\u2019s home directory.  Objects in the bucket are encrypted with a customer managed KMS key.  The SFTP server front end address is mapped to a vanity URL using Route53.  The bucket and path are integrated with a `STORAGE INTEGRATION`, `STAGE` and `PIPE` definition in Snowflake.  The Snowflake bits are covered in more detail in this blog: __[Automating Snowflake Role Based Storage Integration for AWS](automating-snowflake-role-based-storage-integration-for-aws)__.  This article just details the AWS Transfer Family SFTP setup.\\n\\n<Tabs\\n  defaultValue=\\"architecture\\"\\n  values={[\\n    { label: \'Architecture\', value: \'architecture\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"architecture\\">\\n\\n[![AWS Transfer SFTP Architecture](images/aws-transfer-sftp-architecture.png)](images/aws-transfer-sftp-architecture.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```\\n@startuml\\n\\nskinparam rectangle<<boundary>> {\\n    Shadowing false\\n    StereotypeFontSize 0\\n    FontColor #444444\\n    BorderColor #444444\\n    BorderStyle dashed\\n}\\n\\nskinparam defaultTextAlignment center\\n\\n!$imgroot = \\"https://github.com/avensolutions/plantuml-cloud-image-library/raw/main/images\\"\\n\\n!unquoted procedure $AwsS3($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS S3\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/Storage/S3.png>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Kms($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS KMS\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/SecurityIdentityCompliance/kms.png{scale=0.80}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Route53($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS Route53\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/Networking/route53.png{scale=0.80}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $AwsTransferFamily($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS Transfer Family\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/MigrationTransfer/TransferFamily.png>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Data($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Data\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/general/documents.png>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Snowpipe($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Snowpipe\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/snowflake/snowpipe.png{scale=0.60}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $SnowflakeDb($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Snowflake DB\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/snowflake/snowflakeDB.png{scale=0.70}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n$Data(supplier, Data Supplier, External Client)\\n\\nrectangle \\"AWS Environment\\" <<boundary>> {\\n    $AwsTransferFamily(sftpgw, SFTP/FTPS Gateway, AWS Transfer Family)\\n    $AwsS3(s3staging, Staging Bucket, AWS S3 Bucket)\\n    $Kms(kms, KMS Key, Customer Managed Key)\\n    $Route53(r53, CNAME Record, Route53 Record)\\n}\\n\\nrectangle \\"Snowflake Environment\\" <<boundary>> {\\n    $Snowpipe(snowpipe, Snowpipe, Snowpipe)\\n    $SnowflakeDb(db, Snowflake DB, Snowflake DB)\\n}\\n\\nr53 -[hidden]D- sftpgw\\nsupplier -> r53 : resolves name\\nr53 -> supplier : gets address\\nsupplier -RIGHT-> sftpgw : SFTP\\nsftpgw -DOWN-> kms : uses\\nsftpgw -RIGHT-> s3staging: writes to\\ns3staging -RIGHT-> snowpipe: writes to\\nsnowpipe -DOWN-> kms: uses\\nsnowpipe -RIGHT-> db: writes to\\n\\n@enduml\\n```\\n</TabItem>\\n</Tabs>\\n\\n## Setup\\n\\nThe steps to set up this pattern are detailed below.  \\n\\n:::info\\n\\nThis example uses the Jsonnet/CloudFormation pattern described in this article: __[Simplifying Large CloudFormation Templates using Jsonnet](simplifying-large-cloudformation-templates-using-jsonnet)__.  This is a useful pattern for breaking up a monolithic CloudFormation template at design time to more manageable resource scoped documents, then pre-processing these in a CI routine (GitLab CI, GitHub Actions, etc) to create a complete template.\\n\\n:::\\n\\n## Setup the Service\\n\\nTo setup the SFTP transfer service use the `AWS::Transfer::Server` resource type as shown below:  \\n\\n<Gist id=\\"c8b4ce8ab478715753aab73d478f4fcd\\" \\n/>\\n\\n:::note\\n\\nUse the `tags` shown to display the custom hostname (used as a vanity url) in the Transfer UI in the AWS console.\\n\\n:::\\n\\n## Create the S3 Bucket\\n\\nCreate a bucket which will be used to store incoming files sent via SFTP.  \\n\\n<Gist id=\\"82eb106bc13f1a888f823cc71a7ff933\\" \\n/>\\n\\n:::note\\n\\nThis example logs to a logging bucket, not shown for brevity.\\n\\n:::\\n\\n## Create a Customer Managed KMS Key\\n\\nCreate a customer managed KMS key which will be used to encrypt data stored in the S3 bucket created in the previous step.  \\n\\n<Gist id=\\"2c563411442c4541584815389de8a3b5\\" \\n/>\\n\\n# Create an IAM role to access the bucket\\n\\nCreate an IAM role which will be assumed by the AWS Transfer Service to read and write to the S3 staging bucket.  \\n\\n<Gist id=\\"57e23a5c99c22f5550e99b086db5f9f1\\" \\n/>\\n\\n:::important\\n\\nYou must assign permissions to use the KMS key created previously, failure to do so will result in errors such as:\\n\\n```\\nremote readdir(): Permission denied\\n```\\n\\n:::\\n\\n## User Directory Mappings\\n\\nAn SFTP users home directory is mapped to a path in your S3 bucket.  It is recommended to use the `LOGICAL` `HomeDirectoryType`.  This will prevent SFTP users from:\\n\\n- seeing or being able to access other users home directories\\n- seeing the bucket name or paths in the bucket above their home directory\\n\\nThere are some trade offs for this which can make deployment a little more challenging but we will cover off the steps from here.\\n\\n### Create a Scoped Down Policy\\n\\nA \\"scoped down\\" policy prevents users from seeing or accessing objects in other users home directories.  This is a text file that will be sourced as a string into the `Policy` parameter of each SFTP user you create.\\n\\n<Gist id=\\"5e876bbf95b1b36355fa8af868572a26\\" \\n/>\\n\\n:::important\\n\\nUsing the `LOGICAL` `HomeDirectoryType` you don\'t have access to variables which represent the bucket, so this needs to be hard coded in the `policy.txt` document.  \\n\\nAlso if you are using a customer managed KMS key to encrypt the data in the bucket (which you should be), you need to add permissions to the key - which again cannot be represented by a variable.  \\n\\nFailure to do so will result in errors when trying to `ls`, `put`, etc into the user\'s home directory such as:  \\n\\n```\\nCouldn\'t read directory: Permission denied\\nCouldn\'t close file: Permission denied\\n```\\n\\nSince these properties are unlikely to change for the lifetime of your service this should not be an issue.  \\n\\n:::\\n\\n### Create a user\\n\\nUsers are identified by a username and an SSH key, providing the public key to the server.  A sample user is shown here:  \\n\\n<Gist id=\\"1b946b07374b78e0aca380317729bfa9\\" \\n/>\\n\\n:::tip\\n\\nAs discussed previously, it is recommended to use `LOGICAL` home directory mappings, which prevents users from seeing information about the bucket or other directories on the SFTP server (including other users directories).\\n\\n:::\\n\\n## Create a Route 53 CNAME record\\n\\nIdeally you want to use a vanity url for users to access your SFTP service, such as `sftp.yourcompany.com`.  This can be accomplished by using a Route 53 CNAME record as shown here:  \\n\\n<Gist id=\\"0098851edc8d60b45534f6b1134be8cd\\" \\n/>\\n\\n## Create some shared Tags\\n\\nYou would have noticed a shared `Tags` definition in many of the `libsonnet` files shown, an example `Tags` source file is shown here:  \\n\\n<Gist id=\\"8323d49f1045d2cd8c874d5a00e82a5e\\" \\n/>\\n\\n## Pull it all together!\\n\\nNow that we have all of the input files, lets pull them all together in a `jsonnet` file, which will be preprocessed in a CI process to create a template we can deploy with AWS CloudFormation.  \\n\\n<Gist id=\\"f56065c075af9cc33853b0624f6ef636\\" \\n/>\\n\\nYour customers would now connect to your service using they private key which corresponds to the public key they supplied to you in one of the previous steps, for example:    \\n\\n```bash\\nsftp -i mysftpkey jeffrey_aven@sftp.yourdomain.com\\n```\\n\\nAdd more users and enjoy!"},{"id":"simple-sso-with-an-external-idp-using-active-directory-and-okta","metadata":{"permalink":"/simple-sso-with-an-external-idp-using-active-directory-and-okta","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-02-04-simple-sso-with-an-external-idp-using-active-directory-and-okta/index.md","source":"@site/blog/2022-02-04-simple-sso-with-an-external-idp-using-active-directory-and-okta/index.md","title":"Simple SSO with an external IdP using Active Directory and Okta","description":"A simple SSO pattern for authenticating and authorizing users from an external AD and to your application without requiring federation.","date":"2022-02-04T00:00:00.000Z","formattedDate":"February 4, 2022","tags":[{"label":"okta","permalink":"/tags/okta"},{"label":"azure","permalink":"/tags/azure"},{"label":"active directory","permalink":"/tags/active-directory"},{"label":"azure active directory","permalink":"/tags/azure-active-directory"},{"label":"sso","permalink":"/tags/sso"},{"label":"single sign on","permalink":"/tags/single-sign-on"},{"label":"identity","permalink":"/tags/identity"}],"readingTime":3.48,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"simple-sso-with-an-external-idp-using-active-directory-and-okta","title":"Simple SSO with an external IdP using Active Directory and Okta","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/okta-ad-sso-featured-image.png","tags":["okta","azure","active directory","azure active directory","sso","single sign on","identity"],"keywords":["okta","azure","active directory","azure active directory","sso","single sign on","identity"],"description":"A simple SSO pattern for authenticating and authorizing users from an external AD and to your application without requiring federation."},"prevItem":{"title":"Implementing a Serverless SFTP Gateway using the AWS Transfer Family","permalink":"/implementing-a-serverless-sftp-gateway-using-the-aws-transfer-family"},"nextItem":{"title":"Converting to local time in AWS Lambda using Node.js","permalink":"/converting-to-local-time-in-aws-lambda-using-nodejs"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Gist from \'react-gist\';\\n\\nThis article describes a simple SSO pattern for authenticating and authorizing users from an external AD and to your application without requiring federation.  \\n\\n## the Challenge  \\n\\nYou need to authenticate external users to use your application, these users belong to an organization using Azure Active Directory with specific login policies (such as password strength and expiry, multi factor authentication, etc).  Your requirements (if you choose to accept them) are:\\n\\n1.\\tYou are required to provide SSO to these users using their home AD tenant and policies\\n2.\\tThe solution does not include SAML based federation between directories (yours and theirs)\\n3.\\tThe solution does not require any changes on the external AD tenant (no new AAD applications, client secrets, etc)\\n\\n## the Solution\\n\\nUsing an IDAM/IDaaS platform (such as Okta in this case), along with an AAD application (in your AD tenant in your Azure subscription), you can create a local AD app using this magic property to accomplish all of the above requirements (requiring zero changes on the third-party AD).  \\n\\n[![Azure AD App Registration](images/azure-ad-app-registration.png)](images/azure-ad-app-registration.png) \\n\\nThis is what it looks like using the `az` cli:\\n\\n<Gist id=\\"8b70fbe242da02ca844bf2fe53355743\\" \\n/>\\n\\nthe `--available-to-other-tenants` property is Microsoft\'s way of allowing you to implicitly trust other AAD/Office 365 tenants, meaning the authentication request is passed to the target AD tenant from your application.  \\n\\nHere is a context diagram which explains the interactions in the context of a Jamstack application (using a library such as Auth.js).  \\n\\n<Tabs\\n  defaultValue=\\"overview\\"\\n  values={[\\n    { label: \'Overview\', value: \'overview\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"overview\\">\\n\\n[![Okta AD SSO Context Diagram](images/okta-ad-sso-context-diagram.png)](images/okta-ad-sso-context-diagram.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```plantuml\\n@startuml\\n\\n!define C4Puml https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master\\n!includeurl C4Puml/C4_Context.puml\\n!includeurl C4Puml/C4_Component.puml\\n!includeurl C4Puml/C4_Container.puml\\n\\n\'left to right direction\\n\\n!define Rel_NoRank(e_from,e_to, e_label=\\" \\") Rel_(e_from,e_to, e_label, \\"-[norank]->\\")\\n\\n!$imgroot = \\"https://github.com/avensolutions/plantuml-cloud-image-library/raw/main/images\\"\\n\\n!unquoted procedure $AzureActiveDirectory($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Azure Active Directory\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/azure/AzureActiveDirectory.png{scale=0.75}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Okta($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Okta\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/okta/okta.png{scale=1}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\nPerson(user, User\\\\n<i>UserAgent (Browser) )\\nPerson(admin, Application Admin)\\nnote right\\nCreate users in the Okta org with the same email as the users email address in their AD (external AD)\\nend note\\nrectangle \\"Application Environment\\" <<boundary>> as app{\\n    $AzureActiveDirectory(localad, Local AD Tenant, Azure Active Directory)\\n    $Okta(okta, Local Okta Org, Okta)\\n}\\n$AzureActiveDirectory(otherad, Azure AD Tenant\\\\n<i>(External AD), Azure Active Directory)\\n\\nLay_D(user, okta)\\nLay_R(okta, localad)\\nLay_R(localad, otherad)\\nLay_D(okta, admin)\\n\\nRel_U(okta, user, access code)\\nRel_D(user, okta, authorize request)\\nRel_R(okta, localad, routes to)\\nRel_R(localad, otherad, forwards to)\\nRel_U(admin, okta, creates users)\\n\\n@enduml\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Setup and Configuration  \\n\\nThe following flowchart explains the steps involved in setting this up.  The highlighted nodes are part of normal application lifecycle operations as users get created and deactivated.  \\n\\n<Tabs\\n  defaultValue=\\"flowchart\\"\\n  values={[\\n    { label: \'Flowchart\', value: \'flowchart\', },\\n    { label: \'Mermaid\', value: \'mermaidCode\', },\\n  ]\\n}>\\n<TabItem value=\\"flowchart\\">\\n\\n[![Okta AD SSO Setup Flowchart](images/okta-ad-sso-setup-flowchart.svg)](images/okta-ad-sso-setup-flowchart.svg) \\n\\n</TabItem>\\n<TabItem value=\\"mermaidCode\\">\\n\\n```mermaid\\nflowchart TD;\\n  subgraph Local Azure AD;\\n    a1(1. Create AD App);\\n  end;\\n  subgraph Okta;\\n    b1(2. Create IdP)--\x3eb2(3. Create Application);\\n    b2--\x3eb3(4. Create IdP\\\\nRouting Rule\\\\nfor Application);\\n    b3--\x3eb4(5. Create Group);\\n    b4--\x3eb5(6. Assign Group\\\\nto Application);\\n    b5--\x3ec1(7. Create User);\\n    c1--\x3ec2(8. Add User to Group);\\n    style c1 fill:#f9f,stroke:#333,stroke-width:4px;\\n    style c2 fill:#f9f,stroke:#333,stroke-width:4px;\\n  end;\\n  subgraph Application;\\n    d1(9. Configure ISSUER\\\\nand CLIENTID);\\t\\t\\n  end;\\n  a1--\x3eOkta;\\n  b3--\x3eApplication;\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Authorisation flow\\n\\nThe authorization flow for a public client (SPA) using PKCE (Proof Key for Code Exchange) is shown here:    \\n\\n<Tabs\\n  defaultValue=\\"sequence\\"\\n  values={[\\n    { label: \'Sequence\', value: \'sequence\', },\\n    { label: \'Mermaid\', value: \'mermaidCode\', },\\n  ]\\n}>\\n<TabItem value=\\"sequence\\">\\n\\n[![Okta AD SSO Authorization Flow](images/okta-ad-sso-authorization-flow.svg)](images/okta-ad-sso-authorization-flow.svg)\\n\\n</TabItem>\\n<TabItem value=\\"mermaidCode\\">\\n\\n```mermaid\\nsequenceDiagram;\\n  %%{init: {\'theme\': \'base\', \'themeVariables\': { \'primaryColor\': \'#AACCFF\', \'primaryBorderColor\': \'#999000\', \'actorLineColor\': \'#000000\' }}}%%;\\n  participant user as User;\\n  participant spa as User Agent (SPA);\\n  participant be as Back End APIs;\\n  participant okta as Okta;\\n  participant msft as Microsoft Login;\\n  user->>spa: ;\\n  spa->>okta: local.okta.com/../authorize;\\n  Note over spa,okta: includes client_id (okta), code_challenge (PKCE), redirect_uri (to app), response_type, scope\\n  okta--\x3e>spa: 302 REDIRECT; \\n  spa->>msft: login.microsoftonline.com/../authorize;\\n  Note over spa,msft: includes client_id (msft app id), state, redirect_uri (to okta), response_type, scope\\n  msft->>msft: authenticate;\\n  msft--\x3e>okta: local.okta.com/../authorize/callback;\\n  okta--\x3e>msft:  302 REDIRECT;\\n  msft--\x3e>spa: app/callback?code=xxx;\\n  spa->>okta: exchange code for an access token;\\n  okta->>spa: token;\\n  spa->>be: present token to access resources;\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Next up\\n\\n`Code!`  Stay tuned..."},{"id":"converting-to-local-time-in-aws-lambda-using-nodejs","metadata":{"permalink":"/converting-to-local-time-in-aws-lambda-using-nodejs","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2022-01-29-converting-to-local-time-in-aws-lambda-using-nodejs/index.md","source":"@site/blog/2022-01-29-converting-to-local-time-in-aws-lambda-using-nodejs/index.md","title":"Converting to local time in AWS Lambda using Node.js","description":"A simple pattern for converting dates in AWS Lambda using a Node.js runtime from GMT/UTC (the default) to a local time observing daylight savings time.","date":"2022-01-29T00:00:00.000Z","formattedDate":"January 29, 2022","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"lambda","permalink":"/tags/lambda"},{"label":"nodejs","permalink":"/tags/nodejs"},{"label":"javascript","permalink":"/tags/javascript"}],"readingTime":4.62,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"converting-to-local-time-in-aws-lambda-using-nodejs","title":"Converting to local time in AWS Lambda using Node.js","authors":["jeffreyaven"],"draft":false,"tags":["aws","lambda","nodejs","javascript"],"keywords":["aws","lambda","nodejs","javascript"],"description":"A simple pattern for converting dates in AWS Lambda using a Node.js runtime from GMT/UTC (the default) to a local time observing daylight savings time."},"prevItem":{"title":"Simple SSO with an external IdP using Active Directory and Okta","permalink":"/simple-sso-with-an-external-idp-using-active-directory-and-okta"},"nextItem":{"title":"Automating Snowflake Role Based Storage Integration for AWS","permalink":"/automating-snowflake-role-based-storage-integration-for-aws"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n## Background  \\n\\nAWS Lambda instances will return UTC/GMT time for any date time object created using the `Date.now()` function in JavaScript as shown here:  \\n\\n```javascript\\nlet now = new Date();\\nconst tzOffset = now.getTimezoneOffset();\\nconsole.log(`Default Timezone Offset: ${tzOffset}`);\\n// results in ...\\n// Default Timezone Offset: 0\\n```\\nMoreover, Lambda instances are stateless and have no concept of local time.  This can make dealing with dates more challenging.  \\n\\nThis is compounded for localities which have legislated Daylight Savings Time during part of the year.  \\n\\n## Solution\\n\\nA simple (vanilla JavaScript - no third party libraries or external API calls) to adjust the time to local time adjusted for Daylight Savings Time is provided here:  \\n\\n<Tabs\\n  defaultValue=\\"commented\\"\\n  values={[\\n    { label: \'Commented\', value: \'commented\', },\\n    { label: \'Uncommented\', value: \'uncommented\', },\\n  ]\\n}>\\n<TabItem value=\\"commented\\">\\n\\n```javascript\\nfunction getGmtDstTransitionDate(year, month, transitionDay, hour){\\n    const firstDayOfTheMonth = new Date(year, month, 1);\\n    let transitionDate = new Date(firstDayOfTheMonth);\\n    // find the first transition day of the month if the first day of the month is not a transition day\\n    if (firstDayOfTheMonth.getDay() !== transitionDay) {\\n        transitionDate = new Date(firstDayOfTheMonth.setDate(firstDayOfTheMonth.getDate() + (transitionDay - firstDayOfTheMonth.getDay())));\\n    };\\n    // return the transition date and time\\n    return new Date(transitionDate.getTime() + (hour * 60 * 60000));\\n};\\n\\nfunction getLocalDateTime(date) {\\n    // default to GMT+11 for AEDT\\n    let offsetInHours = 11;\\n    // if month is between April and October check further, if not return AEDT offset\\n    // remeber getMonth is zero based!\\n    if (date.getMonth() >= 3 && date.getMonth() <= 9) {\\n        // DST starts at 0200 on the First Sunday in October, which is 1600 (16) on the First Saturday (6) in October (9) GMT\\n        const dstStartDate = getGmtDstTransitionDate(date.getFullYear(), 9, 6, 16);\\n        // DST ends at 0300 on the First Sunday in April, which is 1600 (16) on the First Saturday (6) in April (3) GMT\\n        const dstEndDate = getGmtDstTransitionDate(date.getFullYear(), 3, 6, 16);\\n        if (date >= dstEndDate && date < dstStartDate) {\\n            offsetInHours = 10;\\n        };\\n    };\\n    // return the date and time in local time\\n    return new Date(date.getTime() + (offsetInHours * 60 * 60000));\\n}\\n\\n// get current timestamp\\nlet now = new Date();\\nconsole.log(`UTC Date: ${now}`);\\nnow = getLocalDateTime(now);\\nconsole.log(`Local toLocaleString: ${now.toLocaleString()}`);\\n```\\n\\n</TabItem>\\n<TabItem value=\\"uncommented\\">\\n\\n```javascript\\nfunction getGmtDstTransitionDate(year, month, transitionDay, hour){\\n    const firstDayOfTheMonth = new Date(year, month, 1);\\n    let transitionDate = new Date(firstDayOfTheMonth);\\n    if (firstDayOfTheMonth.getDay() !== transitionDay) {\\n        transitionDate = new Date(firstDayOfTheMonth.setDate(firstDayOfTheMonth.getDate() + (transitionDay - firstDayOfTheMonth.getDay())));\\n    };\\n    return new Date(transitionDate.getTime() + (hour * 60 * 60000));\\n};\\n\\nfunction getLocalDateTime(date) {\\n    let offsetInHours = 11;\\n    if (date.getMonth() >= 3 && date.getMonth() <= 9) {\\n        const dstStartDate = getGmtDstTransitionDate(date.getFullYear(), 9, 6, 16);\\n        const dstEndDate = getGmtDstTransitionDate(date.getFullYear(), 3, 6, 16);\\n        if (date >= dstEndDate && date < dstStartDate) {\\n            offsetInHours = 10;\\n        };\\n    };\\n    return new Date(date.getTime() + (offsetInHours * 60 * 60000));\\n}\\n\\nlet now = new Date();\\nconsole.log(`UTC Date: ${now}`);\\nnow = getLocalDateTime(now);\\nconsole.log(`Local toLocaleString: ${now.toLocaleString()}`);\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Breaking it down\\n\\nThis solution is comprised of two functions for DRY purposes.  \\n\\nThe main function `getLocalDateTime` takes a date object representing the current time in UTC and returns a date object representing the local (DST adjusted) time.  \\n\\nThe `getLocalDateTime` function sets a default DST adjusted offset in hours (11 in the case of AEDT), if the month is between April and October the `getGmtDstTransitionDate` is used to determine the exact boundaries between Standard Time and Daylight Savings Time.  \\n\\nIn the case of AEST/AEDT this is the first Sunday in October at 0200 to enter Daylight Savings Time and the first Sunday in April at 0300 to end Daylight Savings Time (both dates and times are adjusted to their equivalent GMT times) and return to Standard Time (10 hours in the cases of AEST).  \\n\\nThe `offsetInHours` variable and the arguments for `getGmtDstTransitionDate` can be easily modified for other timezones.  \\n\\n### Tests\\n\\nSome simple tests to run to check if the code is working correctly, to help with this I have set up the following unit test function:  \\n\\n```javascript\\nfunction unitTest(inputDate, expOutputDate, testCase) {\\n\\tif (getLocalDateTime(inputDate).toUTCString() === expOutputDate.toUTCString()) {\\n\\t\\tconsole.log(`TEST PASSED ${testCase}`)\\n\\t} else {\\n\\t\\tconsole.log(`TEST FAILED ${testCase} : input date in GMT ${inputDate} should equal ${expOutputDate}`)\\n\\t};\\n};\\n```\\n\\nfirst create dates representing the beginning of Daylight Savings Time (immediately before the beginning, at the beginning and immediately after the beginning):  \\n\\n```javascript\\nunitTest(new Date(2022, 9, 1, 15, 59, 59, 999), new Date(2022, 9, 2, 1, 59, 59, 999), \\"one ms before dst start\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED one ms before dst start\\nunitTest(new Date(2022, 9, 1, 16, 0, 0, 0), new Date(2022, 9, 2, 3, 0, 0, 0), \\"dst start\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED dst start    \\nunitTest(new Date(2022, 9, 1, 16, 0, 0, 1), new Date(2022, 9, 2, 3, 0, 0, 1), \\"one ms after dst start\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED one ms after dst start\\n```\\n\\nnext create dates similar tests representing the end of Daylight Savings Time (or beginning of Standard Time):  \\n\\n```javascript\\nunitTest(new Date(2022, 3, 2, 15, 59, 59, 999), new Date(2022, 3, 3, 2, 59, 59, 999), \\"one ms before dst end\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED one ms before dst end    \\nunitTest(new Date(2022, 3, 2, 16, 0, 0, 0), new Date(2022, 3, 3, 2, 0, 0, 0), \\"dst end\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED dst end    \\nunitTest(new Date(2022, 3, 2, 16, 0, 0, 1), new Date(2022, 3, 3, 2, 0, 0, 1), \\"one ms after dst end\\");\\n// returns...\\n// ...\\tINFO\\tTEST PASSED one ms after dst end\\n```\\n\\nEnjoy"},{"id":"automating-snowflake-role-based-storage-integration-for-aws","metadata":{"permalink":"/automating-snowflake-role-based-storage-integration-for-aws","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-12-18-automating-snowflake-role-based-storage-integration-for-aws/index.md","source":"@site/blog/2021-12-18-automating-snowflake-role-based-storage-integration-for-aws/index.md","title":"Automating Snowflake Role Based Storage Integration for AWS","description":"Automate the creation of a Storage Integration in Snowflake which allows a Snowflake External Stage to access objects in your AWS S3 bucket.","date":"2021-12-18T00:00:00.000Z","formattedDate":"December 18, 2021","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"snowflake","permalink":"/tags/snowflake"},{"label":"snowpipe","permalink":"/tags/snowpipe"},{"label":"powershell","permalink":"/tags/powershell"},{"label":"snowsql","permalink":"/tags/snowsql"},{"label":"infrastructureascode","permalink":"/tags/infrastructureascode"},{"label":"iac","permalink":"/tags/iac"},{"label":"cloudautomation","permalink":"/tags/cloudautomation"}],"readingTime":4.085,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"automating-snowflake-role-based-storage-integration-for-aws","title":"Automating Snowflake Role Based Storage Integration for AWS","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/snowflake-storage-integration-aws-image.png","tags":["aws","snowflake","snowpipe","powershell","snowsql","infrastructureascode","iac","cloudautomation"],"keywords":["aws","snowflake","snowpipe","powershell","snowsql","infrastructureascode","iac","cloudautomation"],"description":"Automate the creation of a Storage Integration in Snowflake which allows a Snowflake External Stage to access objects in your AWS S3 bucket."},"prevItem":{"title":"Converting to local time in AWS Lambda using Node.js","permalink":"/converting-to-local-time-in-aws-lambda-using-nodejs"},"nextItem":{"title":"Simplifying Large CloudFormation Templates using Jsonnet","permalink":"/simplifying-large-cloudformation-templates-using-jsonnet"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Gist from \'react-gist\';\\n\\nI have used the instructions [here](https://docs.snowflake.com/en/user-guide/data-load-snowpipe-auto-s3.html) to configure Snowpipe for several projects.  \\n\\nAlthough it is accurate, it is entirely click-ops oriented.  I like to automate (and script) everything, so I have created a fully automated implementation using PowerShell, the `aws` and `snowsql` CLIs.  \\n\\nThe challenge is that you need to go back and forth between AWS and Snowflake, exchanging information from each platform with the other.  \\n\\n## Overview  \\n\\nA Role Based Storage Integration in Snowflake allows a user (an AWS user arn) in your Snowflake account to use a role in your AWS account, which in turns enables access to S3 and KMS resources used by Snowflake for an external stage.  \\n\\nThe following diagram explains this (along with the PlantUML code used to create the diagram..):  \\n\\n<Tabs\\n  defaultValue=\\"overview\\"\\n  values={[\\n    { label: \'Overview\', value: \'overview\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"overview\\">\\n\\n[![Snowflake S3 Storage Integration](images/snowflake-aws-storage-integration.png)](images/snowflake-aws-storage-integration.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```plantuml\\n@startuml\\n\\nskinparam rectangle<<boundary>> {\\n    Shadowing false\\n    StereotypeFontSize 0\\n    FontColor #444444\\n    BorderColor #444444\\n    BorderStyle dashed\\n}\\n\\nskinparam defaultTextAlignment center\\n\\n!$imgroot = \\"https://github.com/avensolutions/plantuml-cloud-image-library/raw/main/images\\"\\n\\n!unquoted procedure $AwsIam($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS IAM\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/SecurityIdentityCompliance/Iam.png>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $AwsS3($alias, $label, $techn, $descr=\\"\\", $stereo=\\"AWS S3\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/aws/Storage/S3.png>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\n!unquoted procedure $Snowflake($alias, $label, $techn, $descr=\\"\\", $stereo=\\"Snowflake\\")\\n    rectangle \\"==$label\\\\n\\\\n<img:$imgroot/snowflake/snowflakeDB.png{scale=0.70}>\\\\n//<size:12>[$techn]</size>//\\" <<$stereo>> as $alias #white\\n!endprocedure\\n\\nrectangle \\"Snowflake\\" <<boundary>> {\\n    $AwsIam(user, Snowflake IAM User, AWS IAM User)\\n    $Snowflake(int, Storage Integration, Storage Integration)\\n    $Snowflake(stage, External Stage, Stage)\\n}\\n\\nrectangle \\"AWS\\" <<boundary>> {\\n    $AwsS3(bucket, Stage Bucket, AWS S3 Bucket)\\n    $AwsIam(role, Snowflake Access Role, IAM Role)\\n    $AwsIam(policy, Snowflake Access Policy, IAM Policy)\\n}\\n\\nstage -UP-> int : uses\\nint -RIGHT-> user : uses\\nuser -RIGHT-> role : uses\\npolicy -UP-> role : attached to\\nrole -RIGHT-> bucket : allows access to\\n\\n@enduml\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Setup  \\n\\nSome prerequisites (removed for brevity):  \\n\\n1.\\tset the following variables in your script:  \\n- `$accountid` \u2013 your AWS account ID\\n- `$bucketname` \u2013 the bucket you are letting Snowflake use as an External Stage\\n- `$bucketarn` \u2013 used in policy statements (you could easily derive this from the bucket name)\\n- `$kmskeyarn` \u2013 assuming you are used customer managed encryption keys, your Snowflake storage integration will need to use these to decrypt data in the stage\\n- `$prefix` \u2013 if you want to set up granular access (on a key/path basis)\\n2.\\tConfigure Snowflake access credentials using environment variables or using the `~/.snowsql/config` file (you should definitely use the `SNOWSQL_PWD` env var for your password however)\\n3.\\tConfigure access to AWS using `aws configure`\\n\\n:::note\\n\\nThe actions performed in both AWS and Snowflake required privileged access on both platforms.\\n\\n:::\\n\\n## The Code  \\n\\nI have broken this into steps, the complete code is included at the end of the article.  \\n\\n### Create Policy Documents  \\n\\nYou will need to create the policy documents to allow the role you will create to access objects in the target S3 bucket, you will also need an initial \u201cAssume Role\u201d policy document which will be used to create the role and then updated with information you will get from Snowflake later.  \\n\\n<Gist id=\\"73d507126c114e6ee7398226cf004f55\\" \\n/>\\n\\n### Create Snowflake Access Policy  \\n\\nUse the `snowflake_policy_doc.json` policy document created in the previous step to create a managed policy, you will need the `arn` returned in a subsequent statement.  \\n\\n<Gist id=\\"65be4f7c104f92fa3dbf9342813b3fd2\\" \\n/>\\n\\n### Create Snowflake IAM Role  \\n\\nUse the initial `assume_role_policy_doc.json` created to create a new Snowflake access role, you will need the `arn` for this resource when you configure the Storage Integration in Snowflake.  \\n\\n<Gist id=\\"e1bdd5316fe7cb106de1edcff77d8e2b\\" \\n/>\\n\\n### Attach S3 Access Policy to the Role  \\n\\nNow you will attach the `snowflake-access-policy` to the `snowflake-access-role` using the `$policyarn` captured from the policy creation statement.  \\n\\n<Gist id=\\"d2d54b43e379a26bd264a4c97939250c\\" \\n/>\\n\\n### Create Storage Integration in Snowflake  \\n\\nUse the `snowsql` CLI to create a Storage Integration in Snowflake supplying the `$rolearn` captured from the role creation statement.  \\n\\n<Gist id=\\"8e4617227bcd68be74c2a5d694c85f91\\" \\n/>\\n\\n### Get `STORAGE_AWS_IAM_USER_ARN` and `STORAGE_AWS_EXTERNAL_ID`  \\n\\nYou will need the `STORAGE_AWS_IAM_USER_ARN` and `STORAGE_AWS_EXTERNAL_ID` values for the storage integration you created in the previous statement, these will be used to updated the assume role policy in your `snowflake-access-role`.  \\n\\n<Gist id=\\"14dbf570030cad1a46d88d2e87006c8e\\" \\n/>\\n\\n### Update Snowflake Access Policy  \\n\\nUsing the `STORAGE_AWS_IAM_USER_ARN` and `STORAGE_AWS_EXTERNAL_ID` values retrieved in the previous statements, you will update the `assume-role-policy` for the `snowflake-access-role`.  \\n\\n<Gist id=\\"944c39205e142de9a76266f7f3cd260b\\" \\n/>\\n\\n### Test the Storage Integration  \\n\\nTo test the connectivity between your Snowflake account and your AWS external stage using the Storage Integartion just created, create a stage as shown here:  \\n\\n<Gist id=\\"99c24e8c80c6556fe381cf64c841f739\\" \\n/>\\n\\nNow list objects in the stage (assuming there are any).  \\n\\n```js\\nlist @my_stage;\\n```\\nThis should just work!  You can use your storage integration to create different stages for different paths in your External Stage bucket and use both of these objects to create Snowpipes for automated ingestion.  Enjoy!  \\n\\n### Complete Code  \\n\\nThe complete code for this example is shown here:  \\n\\n<Gist id=\\"5f4cba25f4eac380d63f5829c56d0306\\" \\n/>"},{"id":"simplifying-large-cloudformation-templates-using-jsonnet","metadata":{"permalink":"/simplifying-large-cloudformation-templates-using-jsonnet","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-11-21-simplifying-large-cloudformation-templates-using-jsonnet/index.md","source":"@site/blog/2021-11-21-simplifying-large-cloudformation-templates-using-jsonnet/index.md","title":"Simplifying Large CloudFormation Templates using Jsonnet","description":"A simple pattern to break up large CloudFormation templates into smaller, more manageable modules using Jsonnet and GitLab CI.","date":"2021-11-21T00:00:00.000Z","formattedDate":"November 21, 2021","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"awscloudformation","permalink":"/tags/awscloudformation"},{"label":"jsonnet","permalink":"/tags/jsonnet"},{"label":"gitlab","permalink":"/tags/gitlab"},{"label":"gitlabci","permalink":"/tags/gitlabci"},{"label":"infrastructureascode","permalink":"/tags/infrastructureascode"},{"label":"iac","permalink":"/tags/iac"},{"label":"cloudautomation","permalink":"/tags/cloudautomation"}],"readingTime":2.47,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"simplifying-large-cloudformation-templates-using-jsonnet","title":"Simplifying Large CloudFormation Templates using Jsonnet","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/cloudformation-jsonnet-featured-image.png","tags":["aws","awscloudformation","jsonnet","gitlab","gitlabci","infrastructureascode","iac","cloudautomation"],"keywords":["aws","awscloudformation","jsonnet","gitlab","gitlabci","infrastructureascode","iac","cloudautomation"],"description":"A simple pattern to break up large CloudFormation templates into smaller, more manageable modules using Jsonnet and GitLab CI."},"prevItem":{"title":"Automating Snowflake Role Based Storage Integration for AWS","permalink":"/automating-snowflake-role-based-storage-integration-for-aws"},"nextItem":{"title":"Simplified AWS Deployments with CloudFormation and GitLab CI","permalink":"/aws-deployments-with-cloudformation-and-gitlab-ci"}},"content":"import Gist from \'react-gist\';\\n\\nCloudFormation templates in large environments can grow beyond a manageable point.  This article provides one approach to breaking up CloudFormation templates into modules which can be imported and used to create a larger template to deploy a complex AWS stack \u2013 using Jsonnet.  \\n\\nJsonnet is a json pre-processing and templating library which includes features including user defined and built-in functions, objects, and inheritance amongst others.  If you are not familiar with Jsonnet, here are some good resources to start with:  \\n\\n- [Jsonnet](https://jsonnet.org/)\\n- [Blog Article: Using Jsonnet to Configure Multiple Environments](https://cloudywithachanceofbigdata.com/using-jsonnet-to-configure-multiple-environments)\\n- [Blog Article: Using the Jsonnet Map Function](https://docs.infraql.io/blog/using-the-jsonnet-map-function)\\n\\n## Advantages\\n\\nUsing Jsonnet you can use imports to break up large stacks into smaller files scoped for each resource.  This approach makes CloudFormation template easier to read and write and allows you to apply the DRY (Do Not Repeat Yourself) coding principle (not possible with native CloudFormation templates.  \\n\\nAdditionally, although as the template fragments are in Jsonnet format, you can add annotations or comments to your code similar to YAML (not possible with a JSON template alone), although the rendered template is in legal CloudFormation Json format.  \\n\\n## Process Overview\\n\\nThe process is summarised here: \\n\\n[![CloudFormation and Jsonnet](images/cloudformation-jsonnet.png)](images/cloudformation-jsonnet.png) \\n\\n## Code\\n\\nThis example will deploy a stack with a VPC and an S3 bucket with logging.  The project directory structure would look like this:  \\n\\n```bash\\ntemplates/\\n\u251c\u2500 includes/\\n\u2502  \u251c\u2500 vpc.libsonnet\\n\u2502  \u251c\u2500 s3landingbucket.libsonnet\\n\u2502  \u251c\u2500 s3loggingbucket.libsonnet\\n\u2502  \u251c\u2500 tags.libsonnet\\n\u251c\u2500 template.jsonnet\\n```\\n\\nLets look at all of the constituent files:  \\n\\n### `template.jsonnet`\\nThis is the root document which will be processed by Jsonnet to render a legal CloudFormation JSON template.  It will import the other files in the includes directory.  \\n\\n<Gist id=\\"8f2cc0c464de762f73b3f81c75a13832\\" \\n/>\\n\\n### `includes/tags.libsonnet`\\n\\nThis code module is used to generate re-usable tags for other resources (DRY).  \\n\\n<Gist id=\\"82e21743e845355ba0ef7240f1f7327a\\" \\n/>\\n\\n### `includes/vpc.libsonnet`\\nThis code module defines a VPC resource to be created with CloudFormation.  \\n\\n<Gist id=\\"e79189bbc1cfb8b72bd860c6381f6130\\" \\n/>\\n\\n### `includes/s3loggingbucket.libsonnet`\\nThis code module defines an S3 bucket resource to be created in the stack which will be used for logging for other buckets.  \\n\\n<Gist id=\\"187c97deca224617b064c4028ebbbee2\\" \\n/>\\n\\n### `includes/s3landingbucket.libsonnet`\\nThis code module defines an S3 landing bucket resource to be created in the stack.  \\n\\n<Gist id=\\"c0dc5d868809f98ef672aca738bb1e5e\\" \\n/>\\n\\n## Testing\\nTo test the pre-processing, you will need a Jsonnet binary/executable for your environment.  You can find Docker images which include this for you, or you could build it yourself.  \\n\\nOnce you have a compiled binary, you can run the following to generate a rendered CloudFormation template.  \\n\\n```bash\\njsonnet template.jsonnet -o template.json\\n```\\nYou can validate this template using the AWS CLI as shown here:  \\n\\n```bash\\naws cloudformation validate-template --template-body file://template.json\\n```\\n## Deployment\\nIn a previous article, [Simplified AWS Deployments with CloudFormation and GitLab CI](https://cloudywithachanceofbigdata.com/aws-deployments-with-cloudformation-and-gitlab-ci), I demonstrated an end-to-end deployment pipeline using GitLab CI.  Jsonnet pre-processing can be added to this pipeline as an initial \u2018preprocess\u2019 stage and job.  A snippet from the `.gitlab-ci.yml` file is included here:  \\n\\n<Gist id=\\"14c4c2fdccb27884c69c31f7b3a17a99\\" \\n/>\\n\\nEnjoy!"},{"id":"aws-deployments-with-cloudformation-and-gitlab-ci","metadata":{"permalink":"/aws-deployments-with-cloudformation-and-gitlab-ci","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-11-11-aws-deployments-with-cloudformation-and-gitlab-ci/index.md","source":"@site/blog/2021-11-11-aws-deployments-with-cloudformation-and-gitlab-ci/index.md","title":"Simplified AWS Deployments with CloudFormation and GitLab CI","description":"A simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI which allows you to review changes before deploying.","date":"2021-11-11T00:00:00.000Z","formattedDate":"November 11, 2021","tags":[{"label":"gitlab","permalink":"/tags/gitlab"},{"label":"gitlabci","permalink":"/tags/gitlabci"},{"label":"aws","permalink":"/tags/aws"},{"label":"awscloudformation","permalink":"/tags/awscloudformation"},{"label":"infrastructureascode","permalink":"/tags/infrastructureascode"},{"label":"iac","permalink":"/tags/iac"},{"label":"cloudautomation","permalink":"/tags/cloudautomation"}],"readingTime":2.125,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"aws-deployments-with-cloudformation-and-gitlab-ci","title":"Simplified AWS Deployments with CloudFormation and GitLab CI","authors":["jeffreyaven"],"draft":false,"image":"/img/blog/gitlabci-cloudformation-featured-image.png","tags":["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],"keywords":["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],"description":"A simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI which allows you to review changes before deploying."},"prevItem":{"title":"Simplifying Large CloudFormation Templates using Jsonnet","permalink":"/simplifying-large-cloudformation-templates-using-jsonnet"},"nextItem":{"title":"From Wordpress to Jamstack","permalink":"/from-wordpress-to-jamstack"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Gist from \'react-gist\';\\n\\nManaging cloud deployments and IaC pipelines can be challenging.  I\u2019ve put together a simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI.  \\n\\nThis deployment framework enables you to target different environments based upon refs (branches or tags) for instance deploy to a dev environment for a push or merge into develop and deploy to prod on a push or merge into main, otherwise just lint/validate (e.g., for a push to a non-protected feature branch).  Templates are uploaded to a designated S3 bucket and staged for use in the pipeline and can be retained as an additional audit trail (in addition to the GitLab project history).  \\n\\nFurthermore, you can review changes (by inspecting change set contents) before deploying, saving you from fat finger deployments \ud83d\ude0a.  \\n \\n## How it works\\nThe logic is described here:  \\n\\n<Tabs\\n  defaultValue=\\"flow\\"\\n  values={[\\n    { label: \'Flow\', value: \'flow\', },\\n    { label: \'PlantUML\', value: \'plantuml\', },\\n  ]\\n}>\\n<TabItem value=\\"flow\\">\\n\\n[![GitLab CI](images/gitlabci-cloudformation-flow.png)](images/gitlabci-cloudformation-flow.png) \\n\\n</TabItem>\\n<TabItem value=\\"plantuml\\">\\n\\n```plantuml\\n@startuml\\n\\npartition prepare {\\n  (*) --\x3e === S1 ===\\n  === S1 === --\x3e \\"Validate Template\\"\\n  --\x3e === S2 ===\\n  === S1 === --\x3e \\"Check Stack State\\"\\n  --\x3e === S2 ===\\n}\\n\\npartition publish {\\n  --\x3e \\"Publish Template to S3\\"\\n}\\n\\npartition plan {\\n  --\x3e \\"Stack Exists?\\"\\n  --\x3e === S3 ===\\n  === S3 === --\x3e [Yes] \\"Create Change Set\\"\\n  === S3 === --\x3e [No] === S4 ===\\n  \\"Create Change Set\\" --\x3e === S4 ===\\n}\\n\\npartition deploy {\\n  --\x3e \\"MANUAL: Review Changes\\"\\n  --\x3e \\"Deploy Change Set\\"\\n}\\n\\n--\x3e(*)\\n\\n@enduml\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nThe pipleline looks like this in GitLab:  \\n\\n[![GitLab CI](images/gitlab-ci.png)](images/gitlab-ci.png)  \\n\\n## Prerequisites\\nYou will need to set up GitLab CI variables for `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and optionally `AWS_DEFAULT_REGION`.  You can do this via __Settings -> CI/CD -> Variables__ in your GitLab project.   As `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` are secrets, they should be configured as `protected` (as they are only required for protected branches) and `masked` so they are not printed in job logs.\\n\\n## `.gitlab-ci.yml` code\\nThe GitLab CI code is shown here:  \\n\\n<Gist id=\\"d561e9f002048b4e4be4043cf185d1bd\\" \\n/>\\n\\n## Reviewing change sets (plans) and applying\\nOnce a pipeline is triggered for an existing stack it will run hands off until a change set (plan) is created.  You can inspect the plan by clicking on the Plan GitLab CI job where you would see output like this:  \\n\\n[![Change Set](images/gitlab-ci-cloudformation-plan.png)](images/gitlab-ci-cloudformation-plan.png)  \\n\\nIf you are OK with the changes proposed, you can simply hit the play button on the last stage of the pipeline (Deploy).  Voil\xe0, stack deployed, enjoy!"},{"id":"from-wordpress-to-jamstack","metadata":{"permalink":"/from-wordpress-to-jamstack","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-09-26-from-wordpress-to-jamstack/index.md","source":"@site/blog/2021-09-26-from-wordpress-to-jamstack/index.md","title":"From Wordpress to Jamstack","description":"I started this blog a few years back to chronicle my journeys through building cloud data platforms, along the way I gathered some friends to share their experiences as well.  The easiest platform to start this blog on was Wordpress.  This worked, but wasnt really aligned with the way myself and my collegues worked,and didnt really align with the types of things we were writing about in blog articles or embracing as general principles... e.g. \'everything-as-code\', \'gitops\', etc.","date":"2021-09-26T00:00:00.000Z","formattedDate":"September 26, 2021","tags":[{"label":"wordpress","permalink":"/tags/wordpress"},{"label":"jamstack","permalink":"/tags/jamstack"},{"label":"web development","permalink":"/tags/web-development"},{"label":"github pages","permalink":"/tags/github-pages"},{"label":"docusaurus","permalink":"/tags/docusaurus"}],"readingTime":1.7,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"from-wordpress-to-jamstack","title":"From Wordpress to Jamstack","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/AzureStaticWebApp.png","tags":["wordpress","jamstack","web development","github pages","docusaurus"],"keywords":["wordpress","jamstack","web development","github pages","docusaurus"]},"prevItem":{"title":"Simplified AWS Deployments with CloudFormation and GitLab CI","permalink":"/aws-deployments-with-cloudformation-and-gitlab-ci"},"nextItem":{"title":"Using Jsonnet to Configure Multiple Environments","permalink":"/using-jsonnet-to-configure-multiple-environments"}},"content":"I started this blog a few years back to chronicle my journeys through building cloud data platforms, along the way I gathered some friends to share their experiences as well.  The easiest platform to start this blog on was Wordpress.  This worked, but wasnt really aligned with the way myself and my collegues worked,and didnt really align with the types of things we were writing about in blog articles or embracing as general principles... e.g. \'everything-as-code\', \'gitops\', etc.  \\n\\nEnter Static Site Generators and Jamstack architecture.  Not only does a Jamstack, SSG architecture for a blog site (or docs site or any other site), allow you to manage every aspect of your web property as code, but as a static site has several other benefits inlcuding increased performance, easier distribution (using CDNs), better security (no origin server required), all this as well as being SEO friendly (and optimised in many cases).  \\n\\nBut moving the site from Wordpress to a SSG must be an onerous task.. wrong.  \\n\\nI moved this blog over a weekend which was quite simple in the end, here are the steps:  \\n\\n1. Export your Wordpress site (Tools->Export), make sure to select *All Content*.  \\n\\n2. Use [wordpress-export-to-markdown](https://github.com/lonekorean/wordpress-export-to-markdown) to convert your posts to a basic Markdown format with frontmatter, does a pretty good job\\n\\n3. Choose and deploy a Static Site Generator (I chose [Docusaurus](https://docusaurus.io/), but there are several other alternatives available such as VuePress, Jekyll, etc)  \\n\\n4. Drop your Markdown docs into your SSG content (blogs) directory (converted in step 2)  \\n\\n5. You will probably need to do some fine tuning as some things may not export cleanly, but 99% of the content will be fine  \\n\\n6. Deploy your new blog site, I am using GitHub Pages, but you could use anything similar - Netlify, Vercel, Digital Ocean, Azure Static Web Apps, etc or implement your own custom CI routine to build your project and push it to an object storage bucket configured to serve a static web site (such as Google Cloud Storage and AWS S3)  \\n\\n\\nThats it!"},{"id":"using-jsonnet-to-configure-multiple-environments","metadata":{"permalink":"/using-jsonnet-to-configure-multiple-environments","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-24-using-jsonnet-to-configure-multiple-environments/index.md","source":"@site/blog/2021-06-24-using-jsonnet-to-configure-multiple-environments/index.md","title":"Using Jsonnet to Configure Multiple Environments","description":"Everytime I start a new project I try and optimise how the application can work across multiple envronments. For those who don\'t have the luxury of developing everything in docker containers or isolated spaces, you will know my pain. How do I write code that can run on my local dev environment, migrate to the shared test and ci environment and ultimately still work in production.","date":"2021-06-24T00:00:00.000Z","formattedDate":"June 24, 2021","tags":[{"label":"ci-cd","permalink":"/tags/ci-cd"},{"label":"configuration","permalink":"/tags/configuration"},{"label":"envconfig","permalink":"/tags/envconfig"},{"label":"environments","permalink":"/tags/environments"},{"label":"hocon","permalink":"/tags/hocon"},{"label":"json","permalink":"/tags/json"},{"label":"jsonnet","permalink":"/tags/jsonnet"}],"readingTime":2.975,"truncated":false,"authors":[{"name":"Mark Stella","title":"Senior Cloud Engineer","url":"https://github.com/mpstella","imageURL":"http://1.gravatar.com/avatar/9a7465656212285f24f64326cd38d6c9?s=80","key":"markstella"}],"frontMatter":{"slug":"using-jsonnet-to-configure-multiple-environments","title":"Using Jsonnet to Configure Multiple Environments","authors":["markstella"],"draft":false,"hide_table_of_contents":true,"tags":["ci-cd","configuration","envconfig","environments","hocon","json","jsonnet"],"keywords":["ci-cd","configuration","envconfig","environments","hocon","json","jsonnet"]},"prevItem":{"title":"From Wordpress to Jamstack","permalink":"/from-wordpress-to-jamstack"},"nextItem":{"title":"Use BigQuery to trigger Cloud Run","permalink":"/use-bigquery-to-trigger-cloud-run"}},"content":"Everytime I start a new project I try and optimise how the application can work across multiple envronments. For those who don\'t have the luxury of developing everything in docker containers or isolated spaces, you will know my pain. How do I write code that can run on my local `dev` environment, migrate to the shared `test` and `ci` environment and ultimately still work in `production`.\\n\\nIn the past I tried exotic options like dynamically generating `YAML` or `JSON` using Jinja. I then graduated to `HOCON` which made my life so much easier. This was until I stumbled across [Jsonnet](https://jsonnet.org/). For those who have not seen this in action, think JSON meets Jinja meets HOCON (a Frankenstein creation that I have actually built in the past)\\n\\nTo get a feel for how it looks, below is a contrived example where I require 3 environments (dev, test and production) that have different paths, databases and vault configuration.\\n\\nEssentially, when this config is run through the Jsonnet templating engine, it will expect a variable \'`ENV`\' to ultimately refine the `environment` entry to the one we specifically want to use.\\n\\nA helpful thing I like to do with my programs is give users a bit of information as to what environments can be used. For me, running a cli that requires args should be as informative as possible - so listing out all the environments is mandatory. I achieve this with a little trickery and a lot of help from the [click](https://click.palletsprojects.com/) package!\\n\\n```jsonnet\\nlocal exe = \\"application.exe\\";\\n\\nlocal Environment(prefix) = {\\n  root: \\"/usr/\\" + prefix + \\"/app\\",\\n  path: self.root + \\"/bin/\\" + exe,\\n  database: std.asciiUpper(prefix) + \\"_DB\\",\\n  tmp_dir: \\"/tmp/\\" + prefix\\n};\\n\\nlocal Vault = {\\n  local uri = \\"http://127.0.0.1:8200/v1/secret/app\\",\\n  _: {},\\n  dev: {\\n      secrets_uri: uri,\\n      approle: \\"local\\"\\n  },\\n  tst: {\\n      secrets_uri: uri,\\n      approle: \\"local\\"\\n  },\\n  prd: {\\n      secrets_uri: \\"https://vsrvr:8200/v1/secret/app\\",\\n      approle: \\"sa_user\\"\\n  }\\n};\\n\\n{\\n\\n  environments: {\\n    _: {},\\n    dev: Environment(\\"dev\\") + Vault[std.extVar(\\"ENV\\")],\\n    tst: Environment(\\"tst\\") + Vault[std.extVar(\\"ENV\\")],\\n    prd: Environment(\\"prd\\") + Vault[std.extVar(\\"ENV\\")]\\n  },\\n\\n  environment: $[\\"environments\\"][std.extVar(\\"ENV\\")],\\n}\\n```\\n\\nThe trick I perform is to have a placeholder entry \'`_`\' that I use to initially render the template. I then use the generated JSON file and get all the environment keys so I can feed that directly into click.\\n\\n```python\\nfrom typing import Any, Dict\\nimport click\\nimport json\\nimport _jsonnet\\nfrom pprint import pprint\\n\\nENV_JSONNET = \'environment.jsonnet\'\\nENV_PFX_PLACEHOLDER = \'_\'\\n\\ndef parse_environment(prefix: str) -> Dict[str, Any]:\\n    _json_str = _jsonnet.evaluate_file(ENV_JSONNET, ext_vars={\'ENV\': prefix})\\n    return json.loads(_json_str)\\n\\n_config = parse_environment(prefix=ENV_PFX_PLACEHOLDER)\\n\\n_env_prefixes = [k for k in _config[\'environments\'].keys() if k != ENV_PFX_PLACEHOLDER]\\n\\n\\n@click.command(name=\\"EnvMgr\\")\\n@click.option(\\n    \\"-e\\",\\n    \\"--environment\\",\\n    required=True,\\n    type=click.Choice(_env_prefixes, case_sensitive=False),\\n    help=\\"Which environment this is executing on\\",\\n)\\ndef cli(environment: str) -> None:\\n    config = parse_environment(environment)\\n    pprint(config[\'environment\'])\\n\\n\\nif __name__ == \\"__main__\\":\\n    cli()\\n```\\n\\nThis now allows me to execute the application with both list checking (has the user selected an allowed environment?) and the autogenerated help that click provides.\\n\\nBelow shows running the cli with no arguments:\\n\\n```shell\\n$> python cli.py\\n\\nUsage: cli.py [OPTIONS]\\nTry \'cli.py --help\' for help.\\n\\nError: Missing option \'-e\' / \'--environment\'. Choose from:\\n        dev,\\n        prd,\\n        tst\\n```\\n\\nExecuting the application with a valid environment:\\n\\n```shell\\n$> python cli.py -e dev\\n\\n{\'approle\': \'local\',\\n \'database\': \'DEV_DB\',\\n \'path\': \'/usr/dev/app/bin/application.exe\',\\n \'root\': \'/usr/dev/app\',\\n \'secrets_uri\': \'http://127.0.0.1:8200/v1/secret/app\',\\n \'tmp_dir\': \'/tmp/dev\'}\\n```\\n\\nExecuting the application with an invalid environment:\\n\\n```shell\\n$> python cli.py -e prd3\\n\\nUsage: cli.py [OPTIONS]\\nTry \'cli.py --help\' for help.\\n\\nError: Invalid value for \'-e\' / \'--environment\': \'prd3\' is not one of \'dev\', \'prd\', \'tst\'.\\n```\\n\\nThis is only the tip of what Jsonnet can provide, I am continually learning more about the templating engine and the tool."},{"id":"use-bigquery-to-trigger-cloud-run","metadata":{"permalink":"/use-bigquery-to-trigger-cloud-run","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-19-use-bigquery-to-trigger-cloud-run/index.md","source":"@site/blog/2021-06-19-use-bigquery-to-trigger-cloud-run/index.md","title":"Use BigQuery to trigger Cloud Run","description":"So you\'re using BigQuery (BQ). It\'s all set up and humming perfectly. Maybe now, you want to run an ELT job whenever a new table partition is created, or maybe you want to retrain your ML model whenever new rows are inserted into the BQ table.","date":"2021-06-19T00:00:00.000Z","formattedDate":"June 19, 2021","tags":[{"label":"big-query","permalink":"/tags/big-query"},{"label":"bigquery","permalink":"/tags/bigquery"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"}],"readingTime":3.795,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"use-bigquery-to-trigger-cloud-run","title":"Use BigQuery to trigger Cloud Run","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"tags":["big-query","bigquery","gcp","google-cloud-platform","googlecloudplatform"],"keywords":["big-query","bigquery","gcp","google-cloud-platform","googlecloudplatform"]},"prevItem":{"title":"Using Jsonnet to Configure Multiple Environments","permalink":"/using-jsonnet-to-configure-multiple-environments"},"nextItem":{"title":"Azure Static Web App Review","permalink":"/azure-static-web-app-review"}},"content":"So you\'re using BigQuery (BQ). It\'s all set up and humming perfectly. Maybe now, you want to run an ELT job whenever a new table partition is created, or maybe you want to retrain your ML model whenever new rows are inserted into the BQ table.\\n\\nIn my previous article on [EventArc](https://cloudywithachanceofbigdata.com/eventarc-the-state-of-eventing-in-google-cloud/), we went through how Logging can help us create eventing-type functionality in your application. Let\'s take it a step further and walk through how we can couple BigQuery and Cloud Run.\\n\\nIn this article you will learn how to\\n\\n- Tie together BigQuery and Cloud Run\\n- Use BigQuery\'s audit log to trigger Cloud Run\\n- With those triggers, run your required code\\n\\n## Let\'s go!\\n\\nLet\'s create a temporary dataset within BigQuery named `tmp_bq_to_cr`.\\n\\nIn that same dataset, let\'s create a table in which we will insert some rows to test our BQ audit log. Let\'s grab some rows from a BQ public dataset to create this table:\\n\\n```sql\\nCREATE OR REPLACE TABLE tmp_bq_to_cr.cloud_run_trigger AS\\nSELECT\\n date, country_name, new_persons_vaccinated, population\\n from `bigquery-public-data.covid19_open_data.covid19_open_data`\\n where country_name=\'Australia\'\\n AND\\n date > \'2021-05-31\'\\nLIMIT 100\\n```\\n\\nFollowing this, let\'s run an insert query that will help us build our mock database trigger:\\n\\n```sql\\nINSERT INTO tmp_bq_to_cr.cloud_run_trigger\\nVALUES(\'2021-06-18\', \'Australia\', 3, 1000)\\n```\\n\\nNow, in another browser tab let\'s navigate to [BQ Audit Events](https://console.cloud.google.com/logs/query;query=bigquery.v2?_ga=2.187390252.-505923201.1592376029) and look for our `INSERT INTO` event:\\n\\n[![BQ-insert-event](images/bq-insert-event.png)](images/bq-insert-event.png)\\n\\nThere will be several audit logs for any given BQ action. Only after a query is parsed does BQ know which table we want to interact with, so the initial log will, for e.g., not have the table name.\\n\\nWe don\'t want any old audit log, so we need to ensure we look for a unique set of attributes that clearly identify our action, such as in the diagram above.\\n\\nIn the case of inserting rows, the attributes are a combination of\\n\\n- The method is `google.cloud.bigquery.v2.JobService.InsertJob`\\n- The name of the table being inserted to is the `protoPayload.resourceName`\\n- The dataset id is available as `resource.labels.dataset_id`\\n- The number of inserted rows is `protoPayload.metadata.tableDataChanged.insertedRowsCount`\\n\\n## Time for some code\\n\\nNow that we\'ve identified the payload that we\'re looking for, we can write the action for Cloud Run. We\'ve picked Python and Flask to help us in this instance. ([full code is on GitHub](https://github.com/GoogleCloudPlatform/bigquery-oreilly-book/blob/master/blogs/cloud_run/main.py)).\\n\\nFirst, let\'s filter out the noise and find the event we want to process\\n\\n```python\\n@app.route(\'/\', methods=[\'POST\'])\\ndef index():\\n    # Gets the Payload data from the Audit Log\\n    content = request.json\\n    try:\\n        ds = content[\'resource\'][\'labels\'][\'dataset_id\']\\n        proj = content[\'resource\'][\'labels\'][\'project_id\']\\n        tbl = content[\'protoPayload\'][\'resourceName\']\\n        rows = int(content[\'protoPayload\'][\'metadata\']\\n                   [\'tableDataChange\'][\'insertedRowsCount\'])\\n        if ds == \'cloud_run_tmp\' and \\\\\\n           tbl.endswith(\'tables/cloud_run_trigger\') and rows > 0:\\n            query = create_agg()\\n            return \\"table created\\", 200\\n    except:\\n        # if these fields are not in the JSON, ignore\\n        pass\\n    return \\"ok\\", 200\\n```\\n\\nNow that we\'ve found the event we want, let\'s execute the action we need. In this example, we\'ll aggregate and write out to a new table `created_by_trigger`:\\n\\n```python\\ndef create_agg():\\n    client = bigquery.Client()\\n    query = \\"\\"\\"\\n    CREATE OR REPLACE TABLE tmp_bq_to_cr.created_by_trigger AS\\n    SELECT\\n      count_name, SUM(new_persons_vaccinated) AS n\\n    FROM tmp_bq_to_cr.cloud_run_trigger\\n    \\"\\"\\"\\n    client.query(query)\\n    return query\\n```\\n\\nThe Dockerfile for the container is simply a basic Python container into which we install Flask and the BigQuery client library:\\n\\n```docker\\nFROM python:3.9-slim\\nRUN pip install Flask==1.1.2 gunicorn==20.0.4 google-cloud-bigquery\\nENV APP_HOME /app\\nWORKDIR $APP_HOME\\nCOPY *.py ./\\nCMD exec gunicorn --bind :$PORT main:app\\n```\\n\\n## Now we Cloud Run\\n\\nBuild the container and deploy it using a couple of gcloud commands:\\n\\n```bash\\nSERVICE=bq-cloud-run\\nPROJECT=$(gcloud config get-value project)\\nCONTAINER=\\"gcr.io/${PROJECT}/${SERVICE}\\"\\ngcloud builds submit --tag ${CONTAINER}\\ngcloud run deploy ${SERVICE} --image $CONTAINER --platform managed\\n```\\n\\n## I always forget about the permissions\\n\\nIn order for the trigger to work, the Cloud Run service account will need the following permissions:\\n\\n```bash\\ngcloud projects add-iam-policy-binding $PROJECT \\\\\\n    --member=\\"serviceAccount:service-${PROJECT_NO}@gcp-sa-pubsub.iam.gserviceaccount.com\\"\\\\\\n    --role=\'roles/iam.serviceAccountTokenCreator\'\\n\\ngcloud projects add-iam-policy-binding $PROJECT \\\\\\n    --member=serviceAccount:${SVC_ACCOUNT} \\\\\\n    --role=\'roles/eventarc.admin\'\\n```\\n\\n### Finally, the event trigger\\n\\n```bash\\ngcloud eventarc triggers create ${SERVICE}-trigger \\\\\\n  --location ${REGION} --service-account ${SVC_ACCOUNT} \\\\\\n  --destination-run-service ${SERVICE}  \\\\\\n  --event-filters type=google.cloud.audit.log.v1.written \\\\\\n  --event-filters methodName=google.cloud.bigquery.v2.JobService.InsertJob \\\\\\n  --event-filters serviceName=bigquery.googleapis.com\\n```\\n\\nImportant to note here is that we\'re triggering on _any_ Insert log created by BQ That\'s why in this action we had to filter these events based on the payload.\\n\\n# Take it for a spin\\n\\nNow, try out the BigQuery -> Cloud Run trigger and action. Go to the BigQuery console and insert a row or two:\\n\\n```sql\\nINSERT INTO tmp_bq_to_cr.cloud_run_trigger\\nVALUES(\'2021-06-18\', \'Australia\', 5, 25000)\\n```\\n\\nWatch as a new table called `created_by_trigger` gets created! You have successfully triggered a Cloud Run action on a database event in BigQuery.\\n\\nEnjoy!"},{"id":"azure-static-web-app-review","metadata":{"permalink":"/azure-static-web-app-review","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-18-azure-static-web-app-review/index.md","source":"@site/blog/2021-06-18-azure-static-web-app-review/index.md","title":"Azure Static Web App Review","description":"The Azure Static Web App feature is relatively new in the Azure estate which has recently become generally available, I thought I would take it for a test drive and discuss my findings.","date":"2021-06-18T00:00:00.000Z","formattedDate":"June 18, 2021","tags":[{"label":"azure","permalink":"/tags/azure"},{"label":"jamstack","permalink":"/tags/jamstack"},{"label":"microsoft-azure","permalink":"/tags/microsoft-azure"},{"label":"netlify","permalink":"/tags/netlify"},{"label":"progressive-web-application","permalink":"/tags/progressive-web-application"},{"label":"pwa","permalink":"/tags/pwa"},{"label":"react","permalink":"/tags/react"},{"label":"single-page-application","permalink":"/tags/single-page-application"},{"label":"spa","permalink":"/tags/spa"},{"label":"vercel","permalink":"/tags/vercel"},{"label":"vue-js","permalink":"/tags/vue-js"}],"readingTime":2.59,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"azure-static-web-app-review","title":"Azure Static Web App Review","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/AzureStaticWebApp.png","tags":["azure","jamstack","microsoft-azure","netlify","progressive-web-application","pwa","react","single-page-application","spa","vercel","vue-js"],"keywords":["azure","jamstack","microsoft-azure","netlify","progressive-web-application","pwa","react","single-page-application","spa","vercel","vue-js"]},"prevItem":{"title":"Use BigQuery to trigger Cloud Run","permalink":"/use-bigquery-to-trigger-cloud-run"},"nextItem":{"title":"Introducing the Metadata Hub (MDH)","permalink":"/introducing-the-metadata-hub-mdh"}},"content":"import Gist from \'react-gist\';\\n\\nThe Azure Static Web App feature is relatively new in the Azure estate which has recently become generally available, I thought I would take it for a test drive and discuss my findings.\\n\\nI am a proponent of the JAMStack architecture for front end applications and a user of CD enabled CDN services like Netlify, so this Azure feature was naturally appealing to me.\\n\\nAzure SWAs allow you to serve static assets (like JavaScript) without a origin server, meaning you don\u2019t need a web server, are able to streamline content distribution and web app performance, and reduce the attack surface area of your application.\\n\\nThe major advantage to using is simplicity, no scaffolding or infra requirements and it is seamlessly integrated into your CI/CD processes (natively if you are using GitHub).\\n\\n## Deploying Static Web Apps in Azure\\n\\nPretty simple to setup, aside from a name and a resource group, you just need to supply:\\n\\n- a **location** (Azure region to be used for serverless back end APIs via Azure Function Apps) note that this is not a location where the static web is necessarily running\\n- a GitHub or GitLab **repo URL**\\n- the **branch** you wish to use to trigger production deployments (e.g. `main`)\\n- a **path** to your code within your app (e.g. where your `package.json` file is located)\\n- an **output folder** (e.g. `dist`) this should not exist in your repo\\n- a project or personal access **token** for your GitHub account (alternatively you can perform an interactive OAuth2.0 consent if using the portal)\\n\\nAn example is shown here:\\n\\n<Gist id=\\"eef5a25ed01327a180711fd64370c457\\" \\n/>\\n\\n## GitHub Actions\\n\\nUsing the consent provided (either using the OAuth flow or by providing a token), Azure Static Web Apps will automagically create the GitHub Actions workflow to deploy your application on a push or merge event to your repo. This includes providing scoped API credentials to Azure to allow access to the Static Web App resource using secrets in GitHub (which are created automagically as well). An example workflow is shown here:\\n\\n<Gist id=\\"8e7ad2bdd9ba351368c5aedad289e972\\" \\n/>\\n\\n## Preview or Staging Releases\\n\\nSimilar to the functionality in analogous services like Netlify, you can configure preview releases of your application to be deployed from specified branches on pull request events.\\n\\n## Routes and Authorization\\n\\nRoutes (for SPAs) need to be provided to Azure by using a file named `staticwebapp.config.json` located in the application root of your repo (same level as you `package.json` file). You can also specify response codes and whether the rout requires authentication as shown here:\\n\\n<Gist id=\\"7dd3bcf05474da551b3d311ae0729e18\\" \\n/>\\n\\n## Pros\\n\\n- Globally distributed CDN\\n- Increased security posture, reduced attack surface area\\n- Simplified architecture and deployment\\n- No App Service Plan required \u2013 cost reduction\\n- Enables Continuous Deployment \u2013 incl preview/staging environments\\n- TLS and DNS can be easily configured for your app\\n\\n## Cons\\n\\n- Serverless API locations are limited\\n- Integration with other VCS/CI/CD systems like GitLab would need to be custom built (GitHub and Azure DevOps is integrated)\\n\\nOverall, this is a good feature for deploying SPAs or PWAs in Azure."},{"id":"introducing-the-metadata-hub-mdh","metadata":{"permalink":"/introducing-the-metadata-hub-mdh","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-15-introducing-the-metadata-hub-mdh/index.md","source":"@site/blog/2021-06-15-introducing-the-metadata-hub-mdh/index.md","title":"Introducing the Metadata Hub (MDH)","description":"Metadata Hub (MDH) is intended to be the source of truth for metadata around the Company\u2019s platform. It has the ability to load metadata configuration from yaml, and serve that information up via API. It will also be the store of information for pipeline information while ingesting files into the platform.","date":"2021-06-15T00:00:00.000Z","formattedDate":"June 15, 2021","tags":[{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"metadata","permalink":"/tags/metadata"}],"readingTime":9.37,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"introducing-the-metadata-hub-mdh","title":"Introducing the Metadata Hub (MDH)","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"tags":["gcp","google-cloud-platform","metadata"],"keywords":["gcp","google-cloud-platform","metadata"]},"prevItem":{"title":"Azure Static Web App Review","permalink":"/azure-static-web-app-review"},"nextItem":{"title":"Masking Private Keys in CI/CD Pipelines in GitLab","permalink":"/masking-private-keys-in-ci-cd-pipelines-in-gitlab"}},"content":"import ImageWithCaption from \'/js/ImageWithCaption/ImageWithCaption.js\';\\nimport MdhImage from \'./images/mdhoverview.png\';\\n\\nMetadata Hub (MDH) is intended to be the source of truth for metadata around the Company\u2019s platform. It has the ability to load metadata configuration from yaml, and serve that information up via API. It will also be the store of information for pipeline information while ingesting files into the platform.\\n\\n## Key philosophies:\\n\\n> **Config-Driven**. Anyone who has been authorized to do so, should be able to add another \u2018table-info.yaml\u2019 in to MDH without the need to update any code in the system\\n\\nHere\u2019s how table information makes its way into MDH:  \\n\\n<ImageWithCaption \\nimageSrc={MdhImage}\\naltText=\\"Metadata Hub\\"\\n/>\\n\\n### Paths\\n\\n|  |  |  |  |\\n| --- | --- | --- | --- |\\n| /tables | get: | summary: All tables in MDH | description: get the title of all tables that exist in MDH |\\n|  | post: | summary: Creates a new table in MDH | description: Creates a new table in MDH |\\n| /tables/{id} | get | summary: Obtain information about specific table |  |\\n| /tables/{id}/columns | get | summary: All columns for a particular table | description: Obtain information on columns for a particular table |\\n| /run | get | summary: All information about a particular end-to-end batch run of file ingestion |  |\\n|  | post | summary: Update metadata on a batch load | description: Update metadata on a batch load |\\n| /calendar | get | summary: Use this to save on calculation of business days. | description: This base response gives you today\'s date in a string |\\n| /calendar/previousBusinessDay | get | summary: Will return a string of the previous business day | description: Will return a string of the previous business day, based on the date on when it\'s called |\\n| /calendar/nextBusinessDay | get | summary: Will return a string of the next business day | description: Will return a string of the next business day, based on the date on when it\'s called |\\n|  |  |  |  |\\n\\n# Yaml to Datastore - Entity/Kind design\\n\\n### Datastore Primer\\n\\nBefore we jump right into Entity Groups in Datastore, it is important to first go over the basics and establish a common vocabulary. Datastore holds entities, which are objects, that can contain various key/value pairs, called properties. Each entity must contain a unique identifier, known as a key. When creating an entity, a user can choose to specify a custom key or let Datastore create a key. If a user decides to specify a custom key, it will contain two fields: a kind, which represents a category such as \u2018Toy\u2019 or \u2018Marital Status\u2019, and a name, which is the identifying value. If a user decides to only specify a kind when creating a key, and does not specify a unique identifier, Datastore automatically generates an ID behind the scenes. Below is an example of a Python3 script which illustrates this identifier concept.\\n\\n```python\\nfrom google.cloud import datastore\\n\\nclient = datastore.Client()\\n#Custom key- specify my kind=item and a unique_id of broker\\ncustom_key_entry = datastore.Entity(client.key(\\"table\\",\\"broker\\"))\\nclient.put(custom_key_entry)\\n\\n#Only specify kind=item, let datastore generate unique_id\\ndatastore_gen_key_entry = datastore.Entity(client.key(\\"table\\"))\\nclient.put(datastore_gen_key_entry)\\n```\\n\\nIn your GCP Console under Datastore, you will then see your two entities of kind \u201ctable\u201d. One will contain your custom key and one will contain the automatically generated key.\\n\\nAncestors and Entity Groups\\n\\nFor highly related or hierarchical data, Datastore allows entities to be stored in a parent/child relationship. This is known as an entity group or ancestor/descendent relationship.\\n\\n### Entity Group\\n\\n[![erd](images/erd.png)](images/erd.png)\\n\\n_This is an example of an entity group with kinds of types: table, column, and classification. The \u2018Grandparent\u2019 in this relationship is the \u2018table\u2019. In order to configure this, one must first create the table entity. Then, a user can create a column, and specify that the parent is a table key. In order to create the grandchild, a user then creates a classification and sets its parent to be a column key. To further add customizable attributes, a user can specify additional key-value pairs such as pii and data_type. These key-value pairs are stored as properties. We model this diagram in Datastore in our working example below._\\n\\nOne can create entity groups by setting the \u2018parent\u2019 parameter while creating an entity key for a child. This command adds the parent key to be part of the child entity key. The child\u2019s key is represented as a tuple (\u2018parent_key\u2019, \u2018child_key\u2019), such that the parents\u2019 key is the prefix of the key, which is followed by its own unique identifier. For example, follow the diagram above:\\n\\n```python\\ntable_key = datastore_client.key(\\"table\\",\\"broker\\")\\ncolumn_key = datastore_client.key(\\"column\\",\\"broker_legal_name\\", parent=table_key)\\n```\\n\\nPrinting the variable `table_key` will display: `(\\"table\\", \\"broker\\",\\"column\\", \\"broker_legal_name\\")`\\n\\nDatastore also supports chaining of parents, which can lead to very large keys for descendants with a long lineage of ancestors. Additionally, parents can have multiple children (representing a one-to-many relationship). However, there is no native support for entities to have multiple parents (representing a many-to-many relationship). Once you have configured this ancestral hierarchy, it is easy to retrieve all descendants for a given parent. You can do this by querying on the parent key by using the \u2018ancestor\u2019 parameter. For example, given the entity table_key created above, I can query for all of the tables\\n\\n```python\\ncolumns: my_query = client.query(kind=\\"table\\", ancestor = column_key) .\\n```\\n\\n# A Full Working Example for MDH\\n\\nAs per our Key Philosophies - **_Config-Driven_** - anyone should be able to add a new `table` to be processed and landed in a target-table somewhere within MDH with our yaml syntax. Below is a full working python3 example of the table/column/classification hierarchical model described above.\\n\\n```python\\nfrom google.cloud import datastore\\n\\ndatastore_client = datastore.Client()\\n\\n# Entities with kinds- table, column, classification\\nmy_entities = [\\n{\\"kind\\": \\"table\\", \\"table_id\\": \\"broker\\", \\"table_type\\": \\"snapshot\\",\\n    \\"notes\\": \\"describes mortgage brokers\\"},\\n{\\"kind\\": \\"column\\", \\"column_id\\": \\"broker_legal_name\\", \\"table_id\\": \\"broker\\",\\n    \\"data_type\\": \\"string\\", \\"size\\": 20, \\"nullable\\": 1},\\n{\\"kind\\": \\"column\\", \\"column_id\\": \\"broker_short_code\\", \\"table_id\\": \\"broker\\",\\n    \\"data_type\\": \\"string\\", \\"size\\": 3, \\"nullable\\": 1},\\n{\\"kind\\": \\"classification\\", \\"classification_id\\":\\"classif_id_REQ_01\\",\\n    \\"restriction_level\\": \\"public\\", \\"pii\\": 0, \\"if\\": \\"greater than 90 days\\",\\n    \\"column_id\\": \\"broker_legal_name\\", \\"table_id\\": \\"broker\\"},\\n{\\"kind\\": \\"classification\\", \\"classification_id\\":\\"classif_id_REQ_03\\",\\n    \\"restriction_level\\": \\"restricted\\", \\"pii\\": 0, \\"if\\": \\"less than 90 days\\",\\n    \\"column_id\\": \\"broker_legal_name\\", \\"table_id\\": \\"broker\\"},\\n{\\"kind\\": \\"classification\\", \\"classification_id\\":\\"classif_id_REQ_214\\",\\n    \\"restriction_level\\": \\"public\\", \\"pii\\": 0, \\"column_id\\": \\"broker_short_code\\",\\n    \\"table_id\\": \\"broker\\"},\\n]\\n\\n\\n# traverse my_entities, set parents and add those to datastore\\nfor entity in my_entities:\\n    kind = entity[\'kind\']\\n    parent_key = None\\n    if kind == \\"column\\":\\n        parent_key = datastore_client.key(\\"table\\", entity[\\"table_id\\"])\\n    elif kind == \\"classification\\":\\n        parent_key = datastore_client.key(\\"table\\", entity[\\"table_id\\"],\\n                                          \\"column\\", entity[\\"column_id\\"])\\n\\n    key = datastore_client.key(kind, entity[kind+\\"_id\\"],\\n        parent=parent_key)\\n    datastore_entry = datastore.Entity(key)\\n    datastore_entry.update(entity)\\n\\n    print(\\"Saving: {}\\".format(entity))\\n\\n    datastore_client.put(datastore_entry)\\n```\\n\\nThe code above assumes that you\u2019ve set yourself up with a working Service Account or authorised yourself in, and that your GCP project has been set.\\n\\nNow let\u2019s do some digging around our newly minted Datastore model. Let\u2019s grab the column \u2018broker_legal_name\u2019\\n\\n```python\\nquery1 = datastore_client.query(kind=\\"column\\")\\nquery1.add_filter(\\"column_id\\", \\"=\\", \\"broker_legal_name\\")\\n```\\n\\nNow that we have the column entity, let\u2019s locate it\u2019s parent id.\\n\\n```python\\ncolumn = list(query1.fetch())[0]\\nprint(\\"This column belongs to: \\" +str(column.key.parent.id_or_name))\\n```\\n\\nFurther to this, we can also get all data classification elements attributed to a single column using the ancestor clause query.\\n\\n```python\\nquery2 = datastore_client.query(kind=\\"classification\\", ancestor=column.key)\\nfor classification in list(query2.fetch()):\\n    print(classification.key)\\n    print(classification[\\"restriction_level\\"])\\n```\\n\\nFor more complex queries, Datastore has the concept of indexes being set, usually via it\u2019s index.yaml configuration. The following is an example of an `index.yaml` file:\\n\\n```yaml\\nindexes:\\n  - kind: Cat\\n    ancestor: no\\n    properties:\\n      - name: name\\n      - name: age\\n        direction: desc\\n\\n  - kind: Cat\\n    properties:\\n      - name: name\\n        direction: asc\\n      - name: whiskers\\n        direction: desc\\n\\n  - kind: Store\\n    ancestor: yes\\n    properties:\\n      - name: business\\n        direction: asc\\n      - name: owner\\n        direction: asc\\n```\\n\\nIndexes are important when attempting to add filters on more than one particular attribute within a Datastore entity. For example, the following code will fail:\\n\\n```python\\n# Adding a \'>\' filter will cause this to fail. Sidenote; it will work\\n# without an index if you add another \'=\' filter.\\nquery2 = datastore_client.query(kind=\\"classification\\", ancestor=column.key)\\nquery2.add_filter(\\"pii\\", \\">\\", 0)\\nfor classification in list(query2.fetch()):\\n        print(classification.key)\\n        print(classification[\\"classification_id\\"])\\n```\\n\\nTo rectify this issue, you need to create an index.yaml that looks like the following:\\n\\n```yaml\\nindexes:\\n  - kind: classification\\n    ancestor: yes\\n    properties:\\n      - name: pii\\n```\\n\\nYou would usually upload the yaml file using the gcloud commands:\\n\\n`gcloud datastore indexes create path/to/index.yaml.`\\n\\nHowever, let\u2019s do this programmatically.\\n\\nThe official pypi package for google-cloud-datastore can be found here: https://pypi.org/project/google-cloud-datastore/. At the time of writing, Firestore in Datastore-mode will be the way forward, as per the release note from January 31, 2019.\\n\\n> Cloud Firestore is now Generally Available. Cloud Firestore is the new version of Cloud Datastore and includes a backwards-compatible Datastore mode.\\n\\n> If you intend to use the Cloud Datastore API in a new project, use Cloud Firestore in Datastore mode. Existing Cloud Datastore databases will be automatically upgraded to Cloud Firestore in Datastore mode.\\n\\n> Except where noted, the Cloud Datastore documentation now describes behavior for Cloud Firestore in Datastore mode.\\n\\nWe\u2019ve purposefully created MDH in Datastore to show you how it was done originally, and we\u2019ll be migrating the Datastore code to Firestore in an upcoming post.\\n\\nCreating and deleting indexes within Datastore will need to be done through the REST API via googleapiclient.discovery, as this function doesn\u2019t exist via the google-cloud-datastore API. Working with the discovery api client can be a bit daunting for a first-time user, so here\u2019s the code to add an index on Datastore:\\n\\n```python\\nimport os\\nfrom google.oauth2 import service_account\\nfrom googleapiclient.discovery import build\\nfrom google.cloud import datastore\\n\\n\\nSCOPES = [\'https://www.googleapis.com/auth/cloud-platform\']\\n\\nSERVICE_ACCOUNT_FILE = os.getenv(\'GOOGLE_APPLICATION_CREDENTIALS\')\\nPROJECT_ID = os.getenv(\\"PROJECT_ID\\")\\n\\ncredentials = service_account\\n             .Credentials\\n         .from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)\\n\\ndatastore_api = build(\'datastore\', \'v1\', credentials=credentials)\\n\\nbody = {\\n    \'ancestor\': \'ALL_ANCESTORS\',\\n    \'kind\': \'classification\',\\n    \'properties\': [{\\n        \'name\': \'pii\',\\n        \'direction\': \'DESCENDING\'\\n    }]\\n}\\n\\nresponse = datastore_api.projects()\\n           .indexes()\\n           .create(projectId=PROJECT_ID, body=body)\\n           .execute()\\n```\\n\\nHow did we craft this API request? We can use the Google API Discovery Service to build client libraries, IDE plugins, and other tools that interact with Google APIs. The Discovery API provides a list of Google APIs and a machine-readable \\"Discovery Document\\" for each API. Features of the Discovery API:\\n\\n- A directory of supported APIs schemas based on JSON Schema.\\n- A machine-readable \\"Discovery Document\\" for each of the supported APIs. Each document contains:\\n- A list of API methods and available parameters for each method.\\n- A list of available OAuth 2.0 scopes.\\n- Inline documentation of methods, parameters, and available parameter values.\\n\\nNavigating to the API reference page for Datastore and going to the \u2018Datastore Admin\u2019 API page, we can see references to the Indexes and RESTful endpoints we can hit for those Indexes. Therefore, looking at the link for the Discovery document for Datastore:\\n\\n> https://datastore.googleapis.com/$discovery/rest?version=v1\\n\\nFrom this, we can build out our instantiation for the google api discovery object build(\'datastore\', \'v1\', credentials=credentials)\\n\\nWith respect to building out the body aspect of the request, I\u2019ve found crafting that part within the \u2018Try this API\u2019 section of `https://cloud.google.com/datastore/docs/reference/admin/rest/v1/projects.indexes/create` pretty valuable.\\n\\nWith this code, your index should show up in your Datastore console! You can also retrieve them within gcloud with gcloud datastore indexes list if you\u2019d like to verify the indexes outside our python code. So there you have it: a working example of entity groups, ancestors, indexes and Metadata within Datastore. Have fun coding!"},{"id":"masking-private-keys-in-ci-cd-pipelines-in-gitlab","metadata":{"permalink":"/masking-private-keys-in-ci-cd-pipelines-in-gitlab","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-15-masking-private-keys-in-ci-cd-pipelines-in-gitlab/index.md","source":"@site/blog/2021-06-15-masking-private-keys-in-ci-cd-pipelines-in-gitlab/index.md","title":"Masking Private Keys in CI/CD Pipelines in GitLab","description":"Big fan of GitLab (and GitLab CI in particular). I had a recent requirement to push changes to a wiki repo associated with a GitLab project through a GitLab CI pipeline (using the SaaS version of GitLab) and ran into a conundrum\u2026","date":"2021-06-15T00:00:00.000Z","formattedDate":"June 15, 2021","tags":[{"label":"ci","permalink":"/tags/ci"},{"label":"gitlab","permalink":"/tags/gitlab"},{"label":"gitlab-ci","permalink":"/tags/gitlab-ci"},{"label":"private-keys","permalink":"/tags/private-keys"},{"label":"secrets","permalink":"/tags/secrets"}],"readingTime":1.31,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"masking-private-keys-in-ci-cd-pipelines-in-gitlab","title":"Masking Private Keys in CI/CD Pipelines in GitLab","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"tags":["ci","gitlab","gitlab-ci","private-keys","secrets"],"keywords":["ci","gitlab","gitlab-ci","private-keys","secrets"]},"prevItem":{"title":"Introducing the Metadata Hub (MDH)","permalink":"/introducing-the-metadata-hub-mdh"},"nextItem":{"title":"Simple Tasker: Configuration driven orchestration","permalink":"/simple-tasker-configuration-driven-orchestration"}},"content":"import Gist from \'react-gist\';\\n\\nBig fan of GitLab (and GitLab CI in particular). I had a recent requirement to push changes to a wiki repo associated with a GitLab project through a GitLab CI pipeline (using the SaaS version of GitLab) and ran into a conundrum\u2026\\n\\nUsing the GitLab SaaS version - deploy tokens can\u2019t have write api access, so the next best solution is to use deploy keys, adding your public key as a deploy key and granting this key write access to repositories is relatively straightforward.\\n\\nThis issue is when you attempt to create a masked GitLab CI variable using the private key from your keypair, you get this\u2026\\n\\n[![](images/masked-variable.png)](images/masked-variable.png)\\n\\nI was a bit astonished to see this to be honest\u2026 Looks like it has been raised as an issue several times over the last few years but never resolved (the root cause of which is something to do with newline characters or base64 encoding or the overall length of the string).\\n\\nI came up with a solution! Not pretty but effective, masks the variable so that it cannot be printed in CI logs as shown here:\\n\\n[![](images/ci-ssh-key.png)](images/ci-ssh-key.png)\\n\\n## Setup\\n\\nAdd a masked and protected GitLab variable for each line in the private key, for example:\\n\\n[![](images/masked-vars.png)](images/masked-vars.png)\\n\\n## The Code\\n\\nAdd the following block to your `.gitlab-ci.yml` file:\\n\\n<Gist id=\\"b5260f14ecc0bf0d080c80297d0b475c\\" \\n/>\\n\\nnow within Jobs in your pipeline you can simply do this to clone, push or pull from a remote GitLab repo:\\n\\n<Gist id=\\"c96e211544f7cb4ef3ca4e90dc8e36e3\\" \\n/>\\n\\nas mentioned not pretty, but effective and no other cleaner options as I could see\u2026"},{"id":"simple-tasker-configuration-driven-orchestration","metadata":{"permalink":"/simple-tasker-configuration-driven-orchestration","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-06-15-simple-tasker-configuration-driven-orchestration/index.md","source":"@site/blog/2021-06-15-simple-tasker-configuration-driven-orchestration/index.md","title":"Simple Tasker: Configuration driven orchestration","description":"Recently I found myself at a client that were using a third party tool to scan all their enterprise applications in order to collate their data lineage. They had spent two years onboarding applications to the tool, resulting in a large technical mess that was hard to debug and impossible to extend. As new applications were integrated onto the platform, developers were forced to think of new ways of connecting and tranforming the data so it could be consumed.","date":"2021-06-15T00:00:00.000Z","formattedDate":"June 15, 2021","tags":[{"label":"data-lineage","permalink":"/tags/data-lineage"},{"label":"orchestration","permalink":"/tags/orchestration"},{"label":"python","permalink":"/tags/python"}],"readingTime":5.67,"truncated":false,"authors":[{"name":"Mark Stella","title":"Senior Cloud Engineer","url":"https://github.com/mpstella","imageURL":"http://1.gravatar.com/avatar/9a7465656212285f24f64326cd38d6c9?s=80","key":"markstella"}],"frontMatter":{"slug":"simple-tasker-configuration-driven-orchestration","title":"Simple Tasker: Configuration driven orchestration","authors":["markstella"],"draft":false,"hide_table_of_contents":true,"tags":["data-lineage","orchestration","python"],"keywords":["data-lineage","orchestration","python"]},"prevItem":{"title":"Masking Private Keys in CI/CD Pipelines in GitLab","permalink":"/masking-private-keys-in-ci-cd-pipelines-in-gitlab"},"nextItem":{"title":"Okta Admin Command Line Interface","permalink":"/okta-admin-command-line-interface"}},"content":"Recently I found myself at a client that were using a third party tool to scan all their enterprise applications in order to collate their data lineage. They had spent two years onboarding applications to the tool, resulting in a large technical mess that was hard to debug and impossible to extend. As new applications were integrated onto the platform, developers were forced to think of new ways of connecting and tranforming the data so it could be consumed.\\n\\nThe general approach was: `setup scanner` -> `scan application` -> `modify results` -> `upload results` -> `backup results` -> `cleanup workspace` -> `delete anything older than \'X\' days`\\n\\nEach developer had their own style of doing this - involving shell scripts, python scripts, SQL and everything in between. Worse, there was slabs of code replicated across the entire repository, with variables and paths changed depending on the use case.\\n\\nMy tasks was to create a framework that could orchestrate the scanning and adhered to the following philosophies:\\n\\n- DRY (Don\'t Repeat Yourself)\\n- Config driven\\n- Version controlled\\n- Simple to extend\\n- Idempotent\\n\\nIt also had to be written in Python as that was all the client was skilled in.\\n\\nAfter looking at what was on the market (Airflow and Prefect being the main contenders) I decided to roll my own simplified orchestrator that required as little actual coding as possible and could be setup by configuration.\\n\\nIn choosing a configuration format, I settled on [HOCON](https://github.com/lightbend/config/blob/master/HOCON.md) as it closely resembled JSON but has advanced features such as interpolation, substitions and the ability to include other hocon files - this would drastically reduce the amount of boilerplate configuration required.\\n\\nBecause I had focused so heavily on being configuration driven, I also needed the following charecteristics to be delivered:\\n\\n- Self discovery of task types (more on this later)\\n- Configuration validation at startup\\n\\n## Tasks and self discovery\\n\\nAs I wanted anyone to be able to rapidly extend the framework by adding tasks, I needed to reduce as much repetition and boilerplate as possible. Ideally, I wanted a developer to just have to think about writing code and not have to deal with how to integrate this.\\n\\nTo achieve this, we needed a way of registering new \'tasks\' that would become available to the framework. I wanted a developer to simply have to subclass the main Task class and implement a run function - the rest would be taken care of.\\n\\n```python\\nclass TaskRegistry:\\n\\n    def __init__(self) -> None:\\n        self._registry = {}\\n\\n    def register(self, cls: type) -> None:\\n        n = getattr(cls, \'task_name\', cls.__name__).lower()\\n        self._registry[n] = cls\\n\\n    def registered(self) -> List[str]:\\n        return list(self._registry.keys())\\n\\n    def has(self, name: str) -> bool:\\n        return name in self._registry\\n\\n    def get(self, name: str) -> type:\\n        return self._registry[name]\\n\\n    def create(self, name: str, *args, **kwargs) -> object:\\n        try:\\n            return self._registry[name](*args, **kwargs)\\n        except KeyError:\\n            raise ClassNotRegisteredException(name)\\n\\n\\nregistry = TaskRegistry()\\n```\\n\\nOnce the registry was instantiated, any new Tasks that inherited from \'Task\' would automatically be added to the registry. We could then use the `create(name)` function to instantiate any class - essentially a pythonic [Factory Method](https://en.wikipedia.org/wiki/Factory_method_pattern)\\n\\n```python\\nclass Task(ABC):\\n\\n    def __init__(self) -> None:\\n        self.logger = logging.getLogger(self.__class__.__name__)\\n\\n    def __init_subclass__(cls) -> None:\\n        registry.register(cls)\\n\\n    @abstractmethod\\n    def run(self, **kwargs) -> bool:\\n        raise NotImplementedError\\n```\\n\\nFor the framework to automatically register the classes, it was important to follow the project structure. As long as the task resided in the \'tasks\' module, we could scan this at runtime and register each task.\\n\\n```text\\n\u2514\u2500\u2500 simple_tasker\\n    \u251c\u2500\u2500 __init__.py\\n    \u251c\u2500\u2500 cli.py\\n    \u2514\u2500\u2500 tasks\\n        \u251c\u2500\u2500 __init__.py\\n        \u251c\u2500\u2500 archive.py\\n        \u2514\u2500\u2500 shell_script.py\\n```\\n\\nThis was achieved with a simple dynamic module importer\\n\\n```python\\nmodules = glob.glob(join(dirname(__file__), \\"*.py\\"))\\n\\nfor f in modules:\\n    if isfile(f) and not f.endswith(\\"__init__.py\\"):\\n        __import__(f\\"{Task.__module__}.{basename(f)[:-3]}\\")\\n```\\n\\n## The configuration\\n\\nIn designing how the configuration would bind to the task, I needed to capture the `name` (what object to instanticate) and what `args` to pass to the instantiated run function. I decided to model it as below with everything under a \'tasks\' array\\n\\n```text\\ntasks: [\\n    {\\n        name: shell_script\\n        args: {\\n            script_path: uname\\n            script_args: -a\\n        }\\n    },\\n    {\\n        name: shell_script\\n        args: {\\n            script_path: find\\n            script_args: [${CWD}/simple_tasker/tasks, -name, \\"*.py\\"]\\n        }\\n    },\\n    {\\n        name: archive\\n        args: {\\n            input_directory_path: ${CWD}/simple_tasker/tasks\\n            target_file_path: /tmp/${PLATFORM}_${TODAY}.tar.gz\\n        }\\n    }\\n]\\n```\\n\\n## Orchestration and validation\\n\\nAs mentioned previously, one of the goals was to ensure the configuration was valid prior to any execution. This meant that the framework needed to validate whether tha task `name` referred to a registered task, and that all mandatory `arguments` were addressed in the configuration. Determining whether the task was registered was just a simple key check, however to validate the arguments to the run required some inspection - I needed to get all args for the run function and filter out \'self\' and any asterisk args (\\\\*args, \\\\*\\\\*kwargs)\\n\\n```python\\ndef get_mandatory_args(func) -> List[str]:\\n\\n    mandatory_args = []\\n    for k, v in inspect.signature(func).parameters.items():\\n        if (\\n            k != \\"self\\"\\n            and v.default is inspect.Parameter.empty\\n            and not str(v).startswith(\\"*\\")\\n        ):\\n            mandatory_args.append(k)\\n\\n    return mandatory_args\\n```\\n\\nAnd finally onto the actual execution bit. The main functionality required here is to validate that the config was defined correctly, then loop through all tasks and execute them - passing in any args.\\n\\n```python\\nclass Tasker:\\n\\n    def __init__(self, path: Path, env: Dict[str, str] = None) -> None:\\n\\n        self.logger = logging.getLogger(self.__class__.__name__)\\n        self._tasks = []\\n\\n        with wrap_environment(env):\\n            self._config = ConfigFactory.parse_file(path)\\n\\n\\n    def __validate_config(self) -> bool:\\n\\n        error_count = 0\\n\\n        for task in self._config.get(\\"tasks\\", []):\\n            name, args = task[\\"name\\"].lower(), task.get(\\"args\\", {})\\n\\n            if registry.has(name):\\n                for arg in get_mandatory_args(registry.get(name).run):\\n                    if arg not in args:\\n                        print(f\\"Missing arg \'{arg}\' for task \'{name}\'\\")\\n                        error_count += 1\\n            else:\\n                print(f\\"Unknown tasks \'{name}\'\\")\\n                error_count += 1\\n\\n            self._tasks.append((name, args))\\n\\n        return error_count == 0\\n\\n    def run(self) -> bool:\\n\\n        if self.__validate_config():\\n\\n            for name, args in self._tasks:\\n                exe = registry.create(name)\\n                self.logger.info(f\\"About to execute: \'{name}\'\\")\\n                if not exe.run(**args):\\n                    self.logger.error(f\\"Failed tasks \'{name}\'\\")\\n                    return False\\n\\n            return True\\n        return False\\n```\\n\\n## Putting it together - sample tasks\\n\\nBelow are two examples of how easy it is to configure the framework. We have a simple folder archiver that will tar/gz a directory based on 2 input parameters.\\n\\n```python\\nclass Archive(Task):\\n\\n    def __init__(self) -> None:\\n        super().__init__()\\n\\n    def run(self, input_directory_path: str, target_file_path: str) -> bool:\\n\\n        self.logger.info(f\\"Archiving \'{input_directory_path}\' to \'{target_file_path}\'\\")\\n\\n        with tarfile.open(target_file_path, \\"w:gz\\") as tar:\\n            tar.add(\\n                input_directory_path,\\n                arcname=os.path.basename(input_directory_path)\\n            )\\n        return True\\n```\\n\\nA more complex example would be the ability to execute shell scripts (or os functions) by passing in some optional variables and variables that can either be a string or list.\\n\\n```python\\nclass ShellScript(Task):\\n\\n    task_name = \\"shell_script\\"\\n\\n    def __init__(self) -> None:\\n        super().__init__()\\n\\n    def run(\\n        self,\\n        script_path: str,\\n        script_args: Union[str, List[str]] = None,\\n        working_directory_path: str = None\\n    ) -> bool:\\n\\n        cmd = [script_path]\\n\\n        if isinstance(script_args, str):\\n            cmd.append(script_args)\\n        else:\\n            cmd += script_args\\n\\n        try:\\n\\n            result = subprocess.check_output(\\n                cmd,\\n                stderr=subprocess.STDOUT,\\n                cwd=working_directory_path\\n            ).decode(\\"utf-8\\").splitlines()\\n\\n            for o in result:\\n                self.logger.info(o)\\n\\n        except (subprocess.CalledProcessError, FileNotFoundError) as e:\\n            self.logger.error(e)\\n            return False\\n\\n        return True\\n```\\n\\nYou can view the entire implementation [here](https://github.com/mpstella/simple_tasker)"},{"id":"okta-admin-command-line-interface","metadata":{"permalink":"/okta-admin-command-line-interface","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-05-30-okta-admin-command-line-interface/index.md","source":"@site/blog/2021-05-30-okta-admin-command-line-interface/index.md","title":"Okta Admin Command Line Interface","description":"Identity and Access Management is a critical component of any application or SaaS architecture. I\u2019m currently doing a spike of the Okta solution for an application development project I am on. Okta is a comprehensive solution built on the open OAuth2 and OIDC protocols, as well as supporting more conventional identity federation approaches such as SAML.","date":"2021-05-30T00:00:00.000Z","formattedDate":"May 30, 2021","tags":[{"label":"cli","permalink":"/tags/cli"},{"label":"command-line","permalink":"/tags/command-line"},{"label":"golang","permalink":"/tags/golang"},{"label":"identity","permalink":"/tags/identity"},{"label":"oauth-2-0","permalink":"/tags/oauth-2-0"},{"label":"oidc","permalink":"/tags/oidc"},{"label":"okta","permalink":"/tags/okta"}],"readingTime":1.565,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"okta-admin-command-line-interface","title":"Okta Admin Command Line Interface","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/Dev_Logo-02_Large-thumbnail.png","tags":["cli","command-line","golang","identity","oauth-2-0","oidc","okta"],"keywords":["cli","command-line","golang","identity","oauth-2-0","oidc","okta"]},"prevItem":{"title":"Simple Tasker: Configuration driven orchestration","permalink":"/simple-tasker-configuration-driven-orchestration"},"nextItem":{"title":"Enumerating all roles for a user in Snowflake","permalink":"/enumerating-all-roles-for-a-user-in-snowflake"}},"content":"Identity and Access Management is a critical component of any application or SaaS architecture. I\u2019m currently doing a spike of the Okta solution for an application development project I am on. Okta is a comprehensive solution built on the open OAuth2 and OIDC protocols, as well as supporting more conventional identity federation approaches such as SAML.\\n\\nOkta has a clean and easy to use web-based Admin interface which can be used to create applications, users, claims, identity providers and more.\\n\\nDuring my spike, which was done in a crash and burn test Okta organisation, I had associated my user account with a Microsoft Identity Provider for SSO, and subsequently had issues accessing the Microsoft Account my user was associated with, as a result I managed to lock myself (the super admin) out of the Okta Admin Console.\\n\\nFortunately, prior to doing this I had created an API token for my user. So, I went about looking at ways I could interact with Okta programmatically. My first inclination was to use a simple CLI for Okta to get me out of jail\u2026 but I found there wasn\u2019t one that suited. There are, however, a wealth of SDKs for Okta across multiple front-end and back-end oriented programming languages (such as JavaScript, Golang, Python and more).\\n\\nBeing in lockdown and having some free time on my hands, I decided to create a simple open source command line tool which could be used to administer an Okta organisation. The result of this weekend lockdown is `okta-admin`\u2026\\n\\n[![okta-admin cli](images/okta-admin-screenshot.png)](images/okta-admin-screenshot.png)\\n\\nFor this project I used the [Golang SDK for Okta](https://github.com/okta/okta-sdk-golang), along with the [Cobra](https://github.com/spf13/cobra) and [Viper](https://github.com/spf13/viper) Golang packages (used by `docker`, `kubectl` and other popular command line utilities). To provide a query interface to JSON response payloads I use [GJson](https://github.com/tidwall/gjson).\\n\\nWill keep adding to this so stay tuned...\\n\\n> Complete source code for this project is available at [https://github.com/gammastudios/okta-admin](https://github.com/gammastudios/okta-admin)"},{"id":"enumerating-all-roles-for-a-user-in-snowflake","metadata":{"permalink":"/enumerating-all-roles-for-a-user-in-snowflake","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-03-23-enumerating-all-roles-for-a-user-in-snowflake/index.md","source":"@site/blog/2021-03-23-enumerating-all-roles-for-a-user-in-snowflake/index.md","title":"Enumerating all roles for a user in Snowflake","description":"Snowflake allows roles to be assigned to other roles, so when a user is assigned to a role, they may inherit the ability to use countless other roles.","date":"2021-03-23T00:00:00.000Z","formattedDate":"March 23, 2021","tags":[{"label":"javascript","permalink":"/tags/javascript"},{"label":"rbac","permalink":"/tags/rbac"},{"label":"roles","permalink":"/tags/roles"},{"label":"snowflake","permalink":"/tags/snowflake"},{"label":"sql","permalink":"/tags/sql"},{"label":"stored-procedure","permalink":"/tags/stored-procedure"},{"label":"tail-call-recursion","permalink":"/tags/tail-call-recursion"},{"label":"tailcall","permalink":"/tags/tailcall"}],"readingTime":1,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"enumerating-all-roles-for-a-user-in-snowflake","title":"Enumerating all roles for a user in Snowflake","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/snowflake.png","tags":["javascript","rbac","roles","snowflake","sql","stored-procedure","tail-call-recursion","tailcall"],"keywords":["javascript","rbac","roles","snowflake","sql","stored-procedure","tail-call-recursion","tailcall"]},"prevItem":{"title":"Okta Admin Command Line Interface","permalink":"/okta-admin-command-line-interface"},"nextItem":{"title":"EventArc: The state of eventing in Google Cloud","permalink":"/eventarc-the-state-of-eventing-in-google-cloud"}},"content":"import Gist from \'react-gist\';\\n\\nSnowflake allows roles to be assigned to other roles, so when a user is assigned to a role, they may inherit the ability to use countless other roles.\\n\\n**Challenge:** recursively enumerate all roles for a given user\\n\\nOne solution would be to create a complex query on the `\u201cSNOWFLAKE\\".\\"ACCOUNT_USAGE\\".\\"GRANTS_TO_ROLES\\"` object.\\n\\nAn easier solution is to use a stored procedure to recurse through grants for a given user and return an `ARRAY` of roles for that user.\\n\\nThis is a good programming exercise in tail call recursion (sort of) in JavaScript. Here is the code:\\n\\n<Gist id=\\"9b9985dbf8163ade22b71f2ccf20cb51\\" \\n/>\\n\\nTo call the stored proc, execute:\\n\\n<Gist id=\\"fbbfaa3b67af828e4d905411567cd031\\" \\n/>\\n\\nOne drawback of stored procedures in Snowflake is that they can only have scalar or array return types and cannot be used directly in a SQL query, however you can use the `table(result_scan(last_query_id()))` trick to get around this, as shown below where we will pivot the `ARRAY` into a record set with the array elements as rows:\\n\\n<Gist id=\\"6a7e8bc552b87ab1e039f22bacf1b65f\\" \\n/>\\n\\n__IMPORTANT__\\n\\nThis query **must** be the next statement run immediately after the `CALL` statement and cannot be run again until you run another `CALL` statement.\\n\\nMore adventures with Snowflake soon!"},{"id":"eventarc-the-state-of-eventing-in-google-cloud","metadata":{"permalink":"/eventarc-the-state-of-eventing-in-google-cloud","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-02-28-eventarc-the-state-of-eventing-in-google-cloud/index.md","source":"@site/blog/2021-02-28-eventarc-the-state-of-eventing-in-google-cloud/index.md","title":"EventArc: The state of eventing in Google Cloud","description":"When defining event-driven architectures, it\'s always good to keep up with how the landscape is changing. How do you connect microservices in your architecture? Is Pub/Sub the end-game for all events? To dive a bit deeper, let\'s talk through the benefits of having a single\xa0orchestrator, or perhaps a choreographer is better?","date":"2021-02-28T00:00:00.000Z","formattedDate":"February 28, 2021","tags":[{"label":"eventarc","permalink":"/tags/eventarc"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"microservices","permalink":"/tags/microservices"},{"label":"gcp","permalink":"/tags/gcp"}],"readingTime":2.81,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"eventarc-the-state-of-eventing-in-google-cloud","title":"EventArc: The state of eventing in Google Cloud","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"image":"images/service-mesh-1.png","tags":["eventarc","google-cloud-platform","microservices","gcp"],"keywords":["eventarc","google-cloud-platform","microservices","gcp"]},"prevItem":{"title":"Enumerating all roles for a user in Snowflake","permalink":"/enumerating-all-roles-for-a-user-in-snowflake"},"nextItem":{"title":"Microservices Concepts: Orchestration versus Choreography","permalink":"/microservices-concepts-orchestration-versus-choreography"}},"content":"When defining event-driven architectures, it\'s always good to keep up with how the landscape is changing. How do you connect microservices in your architecture? Is Pub/Sub the end-game for all events? To dive a bit deeper, let\'s talk through the benefits of having a single\xa0_orchestrator_, or perhaps a choreographer is better?\\n\\n## Orchestration versus choreography refresher\\n\\nMy colleague [@jeffreyaven](https://www.linkedin.com/in/jeffreyaven/) did a recent post explaining this concept in simple terms, which is worth reviewing, see:\\n\\n[__Microservices Concepts: Orchestration versus Choreography__](https://cloudywithachanceofbigdata.com/microservices-concepts-orchestration-versus-choreography/)\\n\\nShould there really be a central orchestrator controlling all interactions between services.....or, should each service work independently and only interact through events?\\n\\n- **Orchestration**\xa0is usually viewed as a domain-wide central service that defines the flow and control of communication between services. In this paradigm, in becomes easier to change and ultimately monitor policies across your org.\\n- **Choreography**\xa0has each service registering and emitting events as they need to. It doesn\'t direct or define the flow of communication, but using this method usually has a central broker passing around messages and allows services to be truly independent.\\n\\nEnter\xa0[Workflows](https://cloud.google.com/workflows), which is suited for centrally orchestrated services. Not only Google Cloud service such as Cloud Functions and Cloud Run, but also external services.\\n\\nHow about choreography?\xa0[Pub/Sub](https://cloud.google.com/pubsub)\xa0and\xa0[Eventarc](https://cloud.google.com/blog/products/serverless/build-event-driven-applications-in-cloud-run)\xa0are both suited for this. We all know and love Pub/Sub,\xa0_but how do I use EventArc?_\\n\\n## What is Eventarc?\\n\\nAnnounced in October-2020, it was introduced as eventing functionality that enables you, the developer, to send events\xa0_to_\xa0Cloud Run from more than 60 Google Cloud sources.\\n\\n### But how does it work?\\n\\nEventing is done by reading those sweet sweet Audit Logs, from various sources, and sending them to Cloud Run services as events in\xa0[Cloud Events](https://cloudevents.io/)\xa0format. Quick primer on Cloud Events: its a specification for describing event data in a common way. The specification is now under the\xa0[Cloud Native Computing Foundation](https://cncf.io/). Hooray! It can also read events from Pub/Sub topics for custom applications. Here\'s a diagram I graciously ripped from\xa0[Google Cloud Blog](https://cloud.google.com/blog/topics/developers-practitioners/eventarc-unified-eventing-experience-google-cloud):\\n\\n[![Eventarc](images/CloudEvents_fig1.png)](images/CloudEvents_fig1.png)\\n\\n### Why do I need Eventarc? I have the Pub/Sub\\n\\nGood question. Eventarc provides and easier path to receive events not only from Pub/Sub topics but from a number of Google Cloud sources with its Audit Log and Pub/Sub integration. Actually,\xa0_any_\xa0service that has Audit Log integration can be an event source for Eventarc. Beyond easy integration, it provides consistency and structure to how events are generated, routed and consumed. Things like:\\n\\n#### **Triggers**\\n\\nThey specify routing rules from events sources, to event sinks. Listen for new object creation in GCS and route that event to a service in Cloud Run by creating an Audit-Log-Trigger. Create triggers that also listen to Pub/Sub. Then list\xa0**all**\xa0triggers in one, central place in Eventarc:\\n\\n`gcloud beta eventarc triggers list`\\n\\n#### **Consistency with eventing format and libraries**\\n\\nUsing the CloudEvent-compliant specification will allow for event data in a common way, increasing the movement towards the goal of consistency, accessibility and portability. Makes it easier for different languages to read the event and Google Events Libraries to parse fields.\\n\\nThis means that the long-term vision of Eventarc to be the\xa0**hub**\xa0of events, enabling a unified eventing story for Google Cloud and beyond.\\n\\n[![Eventarc producers and consumers](images/CloudEvents_fig2.png)](images/CloudEvents_fig2.png)\\n\\nIn the future, you can excpect to forego Audit Log and read these events directly and send these out to even more sinks within GCP and any HTTP target.\\n\\n* * *\\n\\nThis article written on inspiration from\xa0[https://cloud.google.com/blog/topics/developers-practitioners/eventarc-unified-eventing-experience-google-cloud](https://cloud.google.com/blog/topics/developers-practitioners/eventarc-unified-eventing-experience-google-cloud). Thanks Mete Atamel!"},{"id":"microservices-concepts-orchestration-versus-choreography","metadata":{"permalink":"/microservices-concepts-orchestration-versus-choreography","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-02-26-microservices-concepts-orchestration-versus-choreography/index.md","source":"@site/blog/2021-02-26-microservices-concepts-orchestration-versus-choreography/index.md","title":"Microservices Concepts: Orchestration versus Choreography","description":"One of the foundational concepts in microservices architecture and design patterns is the concept of Orchestration versus Choreography. Before we look at a reference implementation of each of these patterns, it is worthwhile starting with an analogy.","date":"2021-02-26T00:00:00.000Z","formattedDate":"February 26, 2021","tags":[{"label":"microservices","permalink":"/tags/microservices"}],"readingTime":1.71,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"microservices-concepts-orchestration-versus-choreography","title":"Microservices Concepts: Orchestration versus Choreography","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/service-mesh-1.png","tags":["microservices"],"keywords":["microservices"]},"prevItem":{"title":"EventArc: The state of eventing in Google Cloud","permalink":"/eventarc-the-state-of-eventing-in-google-cloud"},"nextItem":{"title":"Using the Azure CLI to Create an API using a Function App within API Management","permalink":"/using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management"}},"content":"One of the foundational concepts in microservices architecture and design patterns is the concept of Orchestration versus Choreography. Before we look at a reference implementation of each of these patterns, it is worthwhile starting with an analogy.\\n\\nThis is often likened to a Jazz band versus a Symphony Orchestra.\\n\\nA modern symphony orchestra is normally comprised of sections such as strings, brass, woodwind and percussion sections. The sections are orchestrated by a conductor, usually placed at a central point with respect to each of the sections. The conductor instructs each section to perform their components of the overall symphony.\\n\\nBy contrast, a Jazz band does not have a conductor and also features improvisation, with different musicians improvising based upon each other. Choreography, although more aligned to dance, can involve improvisation. In both cases there is still an intended output and a general framework as to how the composition will be executed, however unlike a symphony orchestra there is a degree of spontaneity.\\n\\n_Now back to technology and microservices\u2026_\\n\\nIn the Orchestration model, there is a central orchestration service which controls the interactions between other services, in other words the flow and control of communication and/or message passing between services is controlled by an orchestrator (much like the conductor in a symphony orchestra). On the plus side, this model enables easier monitoring and policy enforcement across the system. A generalisation of the Orchestration model is shown below:\\n\\n[![Orchestration model](images/orchestration.png)](images/orchestration.png)\\n\\nBy contrast, in the Choreography model, each service works independently and interacts with other services through events. In this model each service registers and emits events as they need to. The flow (of communication between services) is not predefined, much like a Jazz band. This model often includes a central broker for message passing between services, but the services operate independently of each other and are not controlled by a central service (an orchestrator). A generalisation of the Choreography model is shown below:\\n\\n[![Choreography model](images/choreography.png)](images/choreography.png)\\n\\nWe will post subsequent articles with implementations of these patterns, but it is worthwhile getting a foundational understanding first."},{"id":"using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management","metadata":{"permalink":"/using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-01-06-using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management/index.md","source":"@site/blog/2021-01-06-using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management/index.md","title":"Using the Azure CLI to Create an API using a Function App within API Management","description":"Function Apps, Logic Apps and App Services can be used to expose APIs within Azure API Management which is an easy way to deploy serverless microservices. You can see this capability in the Azure portal below within API Management:","date":"2021-01-06T00:00:00.000Z","formattedDate":"January 6, 2021","tags":[{"label":"api-management","permalink":"/tags/api-management"},{"label":"apis","permalink":"/tags/apis"},{"label":"azure","permalink":"/tags/azure"},{"label":"function-app","permalink":"/tags/function-app"},{"label":"microservices","permalink":"/tags/microservices"},{"label":"microsoft-azure","permalink":"/tags/microsoft-azure"},{"label":"serverless","permalink":"/tags/serverless"}],"readingTime":1.22,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management","title":"Using the Azure CLI to Create an API using a Function App within API Management","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/api-management-function-app.png","tags":["api-management","apis","azure","function-app","microservices","microsoft-azure","serverless"],"keywords":["api-management","apis","azure","function-app","microservices","microsoft-azure","serverless"]},"prevItem":{"title":"Microservices Concepts: Orchestration versus Choreography","permalink":"/microservices-concepts-orchestration-versus-choreography"},"nextItem":{"title":"Great Expectations (for your data...)","permalink":"/great-expectations-for-your-data"}},"content":"import Gist from \'react-gist\';\\n\\nFunction Apps, Logic Apps and App Services can be used to expose APIs within Azure API Management which is an easy way to deploy serverless microservices. You can see this capability in the Azure portal below within API Management:\\n\\n[![Add a new API using a Function App as a back end](images/apimamanagement-add-fnapp.png)](images/apimamanagement-add-fnapp.png)\\n\\nLike most readers, I like to script everything, so I was initially frustrated when I couldn\u2019t replicate this operation in the Azure cli, REST, PowerShell, or any of the other SDKs or IaC tools. Others shared my frustration as seen [here](https://feedback.azure.com/forums/248703-api-management/suggestions/36832033-programmatically-import-azure-function-into-apim).\\n\\nI was nearly resigned to using click ops in the portal (arrrgh) before I worked out this workaround.\\n\\n## The Solution\\n\\nThere is a bit more prep work required to automate this process, but it is well worth it.\\n\\n1. Create an OpenApi (or Swagger spec or WADL) specification document, as seen below (use the absolute URL for your Function App in the `url` parameter):\\n\\n<Gist id=\\"077e8f313e6f44393df71057c8af7850\\" \\n/>\\n\\n2. Use the `az apim api import` function (not the `az apim api create` function), as shown here:\\n\\n<Gist id=\\"1f5eec542bd5ec01dbb9a06472e8e59b\\" \\n/>\\n\\n3. Associate the API with a product (which is how you can rate limit APIs)\\n\\n<Gist id=\\"4ad9c81b97ee97fb2cb6f794c2ae820f\\" \\n/>\\n\\nThat\u2019s it! You can now access your function via the API gateway using the gateway url or via the developer portal as seen below:\\n\\n[![Function App API in API Management in the Azure Portal](images/apimamanagement-test-api.png)](images/apimamanagement-test-api.png)\\n\\n[![Function App API in the Dev Portal](images/apimamanagement-dev-portal.png)](images/apimamanagement-dev-portal.png)"},{"id":"great-expectations-for-your-data","metadata":{"permalink":"/great-expectations-for-your-data","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-11-27-great-expectations-for-your-data/index.md","source":"@site/blog/2020-11-27-great-expectations-for-your-data/index.md","title":"Great Expectations (for your data...)","description":"This article provides an introduction to the Great Expectations Python library for data quality management (https://github.com/great-expectations/great\\\\expectations).","date":"2020-11-27T00:00:00.000Z","formattedDate":"November 27, 2020","tags":[{"label":"data","permalink":"/tags/data"},{"label":"data-quality","permalink":"/tags/data-quality"},{"label":"data-quality-management","permalink":"/tags/data-quality-management"}],"readingTime":6.375,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"great-expectations-for-your-data","title":"Great Expectations (for your data...)","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"image":"images/great-expectations.png","tags":["data","data-quality","data-quality-management"],"keywords":["data","data-quality","data-quality-management"]},"prevItem":{"title":"Using the Azure CLI to Create an API using a Function App within API Management","permalink":"/using-the-azure-cli-to-create-an-api-using-a-function-app-within-api-management"},"nextItem":{"title":"Multi Cloud Diagramming with PlantUML","permalink":"/multi-cloud-diagramming-with-plantuml"}},"content":"import Gist from \'react-gist\';\\n\\nThis article provides an introduction to the Great Expectations Python library for data quality management ([https://github.com/great-expectations/great\\\\_expectations](https://github.com/great-expectations/great_expectations)).\\n\\nSo what are expectations when it comes to data (and data quality)...\\n\\nAn expectation is a falsifiable, verifiable statement about data. Expectations provide a language to talk about data characteristics and data quality - humans to humans, humans to machines and machines to machines.\\n\\nThe **great expectations** project includes predefined, codified expectations such as:\\n\\n```\\nexpect_column_to_exist \\nexpect_table_row_count_to_be_between \\nexpect_column_values_to_be_unique \\nexpect_column_values_to_not_be_null \\nexpect_column_values_to_be_between \\nexpect_column_values_to_match_regex \\nexpect_column_mean_to_be_between \\nexpect_column_kl_divergence_to_be_less_than\\n```\\n\\n\u2026 and many more\\n\\nExpectations are both data tests and docs! Expectations can be presented in a machine-friendly JSON, for example:\\n\\n<Gist id=\\"317fa68cc27e4e364ab238a93f6ed361\\" \\n/>\\n\\nGreat Expectations provides validation results of defined expectations, which can dramatically shorten your development cycle.\\n\\n[![validation results in great expectations](images/validation_failed_unexpected_values.gif)](validation results in great expectations)\\n\\nNearly 50 built in expectations allow you to express how you understand your data, and you can add custom expectations if you need a new one. A machine can test if a dataset conforms to the expectation.\\n\\n## OK, enough talk, let\'s go!\\n\\n```bash\\npyenv virtualenv 3.8.2 ge38\\npip install great-expectations\\n```\\n\\ntried with Python 3.7.2, but had issues with library `lgzm` on my local machine\\n\\nonce installed, run the following in the python repl shell:\\n\\n<Gist id=\\"78211408899d5d0d4b1a088d039fe1d3\\" \\n/>\\n\\nshowing the data in the dataframe should give you the following:\\n\\n<Gist id=\\"fbdeda83bfe9af7ceb33a36a3f4a29e0\\" \\n/>\\n\\nas can be seen, a collection of random integers in each column for our initial testing. Let\'s pipe this data in to great-expectations...\\n\\n<Gist id=\\"0bf00ff1bfad316f83f1b458aa2ad01b\\" \\n/>\\n\\nyields the following output...\\n\\n<Gist id=\\"83264e645d220ebb0f0a529a2a139be9\\" \\n/>\\n\\nthis shows that there are 0 unexpected items in the data we are testing. Great!\\n\\nNow let\'s have a look at a negative test. Since we\'ve picked the values at random, there are bound to be duplicates. Let\'s test that:\\n\\n<Gist id=\\"0a75fe9700677d0329d96da44c54dca5\\" \\n/>\\n\\nyields...\\n\\n<Gist id=\\"0c714a928064124ec15c9733d9e5ff29\\" \\n/>\\n\\nThe JSON schema has metadata information about the result, of note is the result section which is specific to our query, and shows the percentage that failed the expectation.\\n\\nLet\'s progress to something more real-world, namely creating exceptions that are run on databases. Armed with our basic understanding of great-expectations, let\'s...\\n\\n- set up a postgres database\\n- initiate a new Data Context within great-expectations\\n- write test-cases for the data\\n- group those test-cases and\\n- run it\\n\\n## Setting up a Database\\n\\n<Gist id=\\"30dc4a230656f36c4c9b7b208b792329\\" \\n/>\\n\\nif you don\'t have it installed,\\n\\n<Gist id=\\"b127a57c499e63c003ac6c8bb4408768\\" \\n/>\\n\\nwait 15 minutes for download the internet. Verify postgres running with\xa0`docker ps`, then connect with\\n\\n<Gist id=\\"d33c81448fcfddb608f79a69a75202a1\\" \\n/>\\n\\nCreate some data\\n\\n<Gist id=\\"13069c3111039ac60281f291dc1e6bd8\\" \\n/>\\n\\nTake data for a spin\\n\\n<Gist id=\\"f62857c6dbaaaf1d784aa94c5914c9f5\\" \\n/>\\n\\nshould yield\\n\\n<Gist id=\\"52e11ea7319f8344674999ec1b36ab0e\\" \\n/>\\n\\nNow time for\xa0`great-expectations`\\n\\nGreat Expectations relies on the library\xa0`sqlalchemy`\xa0and\xa0`psycopg2`\xa0to connect to your data.\\n\\n<Gist id=\\"6bd28c03b4013f4301b1af2c74dcd947\\" \\n/>\\n\\nonce done, let\'s set up\xa0`great-expectations`\\n\\n<Gist id=\\"4210011daa1fb3c738875f917ebafbf3\\" \\n/>\\n\\nshould look like below:\\n\\n<Gist id=\\"1f1a698cf6a6785598db1133212f30fe\\" \\n/>\\n\\nlet\'s set up a few other goodies while we\'re here\\n\\n<Gist id=\\"51f684d6db8149950f28cc32afa2f461\\" \\n/>\\n\\n**Congratulations! Great Expectations is now set up**\\n\\nYou should see a file structure as follows:\\n\\n[![great expectations tree structure](images/ge_tree_structure.png)](images/ge_tree_structure.png)\\n\\nIf you didn\'t generate a suite during the set up based on `app.order`, you can do so now with\\n\\n`great_expectations suite new`\\n\\nwhen created, looking at\xa0`great_expectations/expectations/app/order/warning.json`\xa0should yield the following:\\n\\n<Gist id=\\"24d105be1cacacbd89b9e4cbac6f4d21\\" \\n/>\\n\\nas noted in the content section, this expectation config is created by the tool by looking at 1000 rows of the data. We also have access to the data-doc site which we can open in the browser at\xa0`great_expectations/uncommitted/data_docs/local_site/index.html`\\n\\n[![great expectations index page](images/index-page.png)](images/index-page.png)\\n\\nClicking on\xa0`app.order.warning`, you\'ll see the sample expectation shown in the UI\\n\\n[![great expectations app order screen](images/ge-app.order-screen.png)](images/ge-app.order-screen.png)\\n\\nNow, let\'s create our own\xa0`expectation`\xa0file and take it for a spin. We\'ll call this one\xa0`error`.\\n\\n[![great expectations new suite](images/ge_suite_new.png)](images/ge_suite_new.png)\\n\\nThis should also start a\xa0`jupyter notebook`. If for some reason you need to start it back up again, you can do so with\\n\\n<Gist id=\\"b4c9fed39b89d939127e4b381c49f274\\" \\n/>\\n\\nGo ahead and hit\xa0`run`\xa0on your first cell.\\n\\n[![Editing a suite with Jupyter](images/jupyter-edit-suite.png)](images/jupyter-edit-suite.png)\\n\\nLet\'s keep it simple and test the\xa0`customer_order_id`\xa0column is in a set with the values below:\\n\\n<Gist id=\\"fea43e4e566795213fc1c5bbcda317ad\\" \\n/>\\n\\nusing the following expectations function in your Table Expectation(s). You may need to click the\xa0`+`\xa0sign in the toolbar to insert a new cell, as below:\\n\\n<Gist id=\\"38be05ccb27c21da2b4213d6a63afd83\\" \\n/>\\n\\n[![Adding table expectation](images/add-table-expectation.png)](images/add-table-expectation.png)\\n\\nAs we can see, appropriate json output that describes the output of our expectation. Go ahead and run the final cell, which will save our work and open a newly minted data documentation UI page, where you\'ll see the expectations you defined in human readable form.\\n\\n[![Saved suite](images/saved-suite.png)](images/saved-suite.png)\\n\\n## Running the test cases\\n\\nIn Great Expectations, running a set of expectations (test cases) is called a\xa0`checkpoint`. Let\'s create a new checkpoint called\xa0`first_checkpoint`\xa0for our\xa0`app.order.error`\xa0expectation as shown below:\\n\\n<Gist id=\\"322483724633e8a4513c5d6ae67298ae\\" \\n/>\\n\\nLet\'s take a look at our checkpoint definition.\\n\\n<Gist id=\\"08594ad6420d46fe60be41d9d949605c\\" \\n/>\\n\\n<Gist id=\\"9cdd4da31f9fdef1246092fa5b65e90c\\" \\n/>\\n\\nAbove you can see the\xa0`validation_operator_name`\xa0which points to a definition in\xa0`great_expectations.yml`, and the\xa0`batches`\xa0where we defined the data source and what expectations to run against.\\n\\nLet\'s have a look at\xa0`great_expectations.yml`. We can see the\xa0`action_list_operator`\xa0defined and all the actions it contains:\\n\\n[![List operators](images/ge_action_list_operator.png)](images/ge_action_list_operator.png)\\n\\nLet\'s run our checkpoint using\\n\\n<Gist id=\\"050501513ee0f5fa13ab522ea7b9242e\\" \\n/>\\n\\n[![Validate checkpoint](images/validate-checkpoint.png)](images/validate-checkpoint.png)\\n\\nOkay cool, we\'ve set up an expectation, a checkpoint and shown a successful status! But what does a failure look like? We can introduce a failure by logging in to postgres and inserting a\xa0`customer_11`\xa0that we\'ll know will fail, as we\'ve specific our expectation that\xa0`customer_id`\xa0should only have two values..\\n\\n<Gist id=\\"5bce4ba20ab8bfae5910db5cd6cc66f4\\" \\n/>\\n\\nHere are the commands to make that happen, as well as the command to re-run our checkpoint:\\n\\n<Gist id=\\"4ad6f1753d65a4f099467bd9fd760067\\" \\n/>\\n\\n<Gist id=\\"fa94ded27b212e099177bee9d6a2cd36\\" \\n/>\\n\\nRun checkpoint again, this time it should fail\\n\\n<Gist id=\\"12fb3e62a5bbcd205ee84ff7445e2657\\" \\n/>\\n\\n[![Failed checkpoint](images/failed-checkpoint.png)](images/failed-checkpoint.png)\\n\\n**As expected, it failed.**\\n\\n## Supported Databases\\n\\nIn it\'s current implementation\xa0`version 0.12.9`, the supported databases our of the box are:\\n\\n<Gist id=\\"4816fb9a621d2d660f746b62ab54ba59\\" \\n/>\\n\\nIt\'s great to be BigQuery supported out of the box, but what about Google Spanner and Google BigTable? Short-answer; currently not supported. See tickets\xa0[https://github.com/googleapis/google-cloud-python/issues/3022](https://github.com/googleapis/google-cloud-python/issues/3022).\\n\\nWith respect to BigTable, it may not be possible as SQLAlchemy can only manage SQL-based RDBSM-type systems, while BigTable (and HBase) are NoSQL non-relational systems.\\n\\n## Scheduling\\n\\nNow that we have seen how to run tests on our data, we can run our checkpoints from bash or a python script(generated using great_expectations checkpoint script first_checkpoint). This lends itself to easy integration with scheduling tools like airflow, cron, prefect, etc.\\n\\n## Production deployment\\n\\nWhen deploying in production, you can store any sensitive information(credentials, validation results, etc) which are part of the uncommitted folder in cloud storage systems or databases or data stores depending on your infratructure setup. Great Expectations has a lot of options\\n\\n## When not to use a data quality framework\\n\\nThis tool is great and provides a lot of advanced data quality validation functions, but it adds another layer of complexity to your infrastructure that you will have to maintain and trouble shoot in case of errors. It would be wise to use it only when needed.\\n\\n## In general\\n\\nDo not use a data quality framework, if simple SQL based tests at post load time works for your use case. Do not use a data quality framework, if you only have a few (usually < 5) simple data pipelines.\\n\\nDo use it when you have data that needs to be tested in an automated and a repeatable fashion. As shown in this article, Great Expectations has a number of options that can be toggled to suit your particular use-case.\\n\\n## Conclusion\\n\\nGreat Expectations shows a lot of promise, and it\'s an active project so expect to see features roll out frequently. It\'s been quite easy to use, but I\'d like to see all it\'s features work in a locked-down enterprise environment.\\n\\nTom Klimovski  \\nPrincipal Consultant, Gamma Data  \\n[tom.klimovski@gammadata.io](mailto:tom.klimovski@gammadata.io)"},{"id":"multi-cloud-diagramming-with-plantuml","metadata":{"permalink":"/multi-cloud-diagramming-with-plantuml","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-10-26-multi-cloud-diagramming-with-plantuml/index.md","source":"@site/blog/2020-10-26-multi-cloud-diagramming-with-plantuml/index.md","title":"Multi Cloud Diagramming with PlantUML","description":"Following on from the recent post GCP Templates for C4 Diagrams using PlantUML, cloud architects are often challenged with producing diagrams for architectures spanning multiple cloud providers, particularly as you elevate to enterprise level diagrams.","date":"2020-10-26T00:00:00.000Z","formattedDate":"October 26, 2020","tags":[{"label":"amazonwebservices","permalink":"/tags/amazonwebservices"},{"label":"aws","permalink":"/tags/aws"},{"label":"azure","permalink":"/tags/azure"},{"label":"c4model","permalink":"/tags/c-4-model"},{"label":"diagramming","permalink":"/tags/diagramming"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"microsoft-azure","permalink":"/tags/microsoft-azure"},{"label":"multi-cloud","permalink":"/tags/multi-cloud"},{"label":"plantuml","permalink":"/tags/plantuml"},{"label":"software-architecture","permalink":"/tags/software-architecture"}],"readingTime":0.835,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"multi-cloud-diagramming-with-plantuml","title":"Multi Cloud Diagramming with PlantUML","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/multicloud.png","tags":["amazonwebservices","aws","azure","c4model","diagramming","gcp","google-cloud-platform","googlecloudplatform","microsoft-azure","multi-cloud","plantuml","software-architecture"],"keywords":["amazonwebservices","aws","azure","c4model","diagramming","gcp","google-cloud-platform","googlecloudplatform","microsoft-azure","multi-cloud","plantuml","software-architecture"]},"prevItem":{"title":"Great Expectations (for your data...)","permalink":"/great-expectations-for-your-data"},"nextItem":{"title":"Cloud Bigtable Primer Part II \u2013 Row Key Selection and Schema Design","permalink":"/cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design"}},"content":"import Gist from \'react-gist\';\\n\\nFollowing on from the recent post [GCP Templates for C4 Diagrams using PlantUML](https://cloudywithachanceofbigdata.com/gcp-templates-for-c4-diagrams-using-plantuml/), cloud architects are often challenged with producing diagrams for architectures spanning multiple cloud providers, particularly as you elevate to enterprise level diagrams.\\n\\nIn this post, with the magic of `!includeurl` we have brought PlantUML template libraries together for AWS, Azure and GCP icon sets, allowing us to produce multi cloud C4 diagrams using PlantUML like this one:\\n\\n[![Multi Cloud Architecture Diagram using PlantUML](images/Example-Multi-Cloud-PlantUML-C4-Diagram.png)](images/Example-Multi-Cloud-PlantUML-C4-Diagram.png)\\n\\nCreating a multi cloud diagram is simple, start by adding the following `include` statements after the `@startuml` label in a new PlantUML C4 diagram:\\n\\n<Gist id=\\"5319b6b041f8b8f54c922a9a5b9b6e7c\\" \\n/>\\n\\nThen add references to the required services from different providers\u2026\\n\\n<Gist id=\\"6ed55cd1b4e3b2e7027f8236af4aa112\\" \\n/>\\n\\nThen include the predefined resources from your different cloud providers in your diagram as shown here (describing a client server application over a cloud to cloud VPN between Azure and GCP)...\\n\\n<Gist id=\\"600aecff7094d7843771770b7048cb2c\\" \\n/>\\n\\nHappy multi-cloud diagramming!\\n\\n> Full source code is available at:\\n> \\n> [https://github.com/gamma-data/plantuml-multi-cloud-diagrams](https://github.com/gamma-data/plantuml-multi-cloud-diagrams)"},{"id":"cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design","metadata":{"permalink":"/cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-09-13-cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design/index.md","source":"@site/blog/2020-09-13-cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design/index.md","title":"Cloud Bigtable Primer Part II \u2013 Row Key Selection and Schema Design","description":"This is a follow up to the original Cloud Bigtable primer where we discussed the basics of Cloud Bigtable:","date":"2020-09-13T00:00:00.000Z","formattedDate":"September 13, 2020","tags":[{"label":"bigtable","permalink":"/tags/bigtable"},{"label":"cloud-bigtable","permalink":"/tags/cloud-bigtable"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"nosql","permalink":"/tags/nosql"}],"readingTime":3.355,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design","title":"Cloud Bigtable Primer Part II \u2013 Row Key Selection and Schema Design","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/cbt-featured-image.png","tags":["bigtable","cloud-bigtable","gcp","google-cloud-platform","googlecloudplatform","nosql"],"keywords":["bigtable","cloud-bigtable","gcp","google-cloud-platform","googlecloudplatform","nosql"]},"prevItem":{"title":"Multi Cloud Diagramming with PlantUML","permalink":"/multi-cloud-diagramming-with-plantuml"},"nextItem":{"title":"GCP Templates for C4 Diagrams using PlantUML","permalink":"/gcp-templates-for-c4-diagrams-using-plantuml"}},"content":"This is a follow up to the original Cloud Bigtable primer where we discussed the basics of Cloud Bigtable:\\n\\n[__Cloud Bigtable Primer - Part I__](https://cloudywithachanceofbigdata.com/cloud-bigtable-primer-part-i/)\\n\\nIn this article we will cover schema design and row key selection in Bigtable \u2013 arguably the most critical design decision to make when employing Bigtable in a cloud data architecture.\\n\\n## Quick Review\\n\\nRecall from the previous post where the Bigtable data model was introduced that tables in Bigtable are comprised of rows and columns - much like a table in any other RDBMS. Every row is uniquely identified by a rowkey \u2013 again akin to a primary key in a table in an RDBMS. But this is where the similarities end.\\n\\nUnlike a table in an RDBMS, columns only ever exist when they are inserted, and `NULLs` are not stored. See the illustration below:\\n\\n[![](images/bigtable-data-model.png)](images/bigtable-data-model.png)\\n\\n## Row Key Selection\\n\\nData in Bigtable is distributed by row keys. Row keys are physically stored in tablets in lexographic order. Recall that row keys are your ONLY indexes to data in Bigtable.\\n\\n### Selection Considerations\\n\\nAs row keys are your only indexes to retrieve or update rows in Bigtable, row key design must take the access patterns for the data to be stored and served via Bigtable into consideration, specifically the following must be considered when designing a Bigtable application:\\n\\n- Search patterns (returning data for a specific entity)\\n- Scan patterns (returning batches of data)\\n\\nQueries that use the row key, a row prefix, or a row range are the most efficient. Queries that do not include a row key will typically scan GB or TB of data and would not be suitable for operational use cases.\\n\\n### Row Key Performance\\n\\nRow key performance will be biased towards your specific access patterns and application functional requirements. For example if you are performing sequential reads or scan operations then sequential keys will perform the best, however their write performance will not be optimal. Conversely, random keys (such as a `uuid`) will perform best for writes but poor for scan or sequential read operations.\\n\\nAdding salts to keys (or additional data), similar to the use of salts in cryptography as well as promoting other field keys to be part of a composite row key can help achieve a \u201cGoldilocks\u201d scenario for both reads and writes, see the diagram below:\\n\\n[![](images/keys.png)](images/keys.png)\\n\\n### Using Reverse Timestamps\\n\\nUse reverse timestamps when your most common query is for the latest values. Typically you would append the reverse timestamp to the key, this will ensure that the same related records are grouped together, for instance if you are storing events for a customer using the customer id along with an appended reverse timestamp (for example `<customer_id>#<reverse_ts>`) would allow you to quickly serve the latest events for a customer in descending order as within each group (`customer_id`), rows will be sorted so most recent insert will be located at the top.  \\nA reverse timestamp can be generalised as:\\n\\n`Long.MAX_VALUE - System.currentTimeMillis()`\\n\\n### Schema Design Tips\\n\\nSome general tips for good schema design using Bigtable are summarised below:\\n\\n- Group related data for more efficient reads using column families\\n- Distribute data evenly for more efficient writes\\n- Place identical values in the adjoining rows for more efficient compression using row keys\\n\\nFollowing these tips will give you the best possible performance using Bigtable.\\n\\n### Use the Key Visualizer to profile performance\\n\\nGoogle provides a neat tool to visualize your row key distribution in Cloud Bigtable. You need to have at least 30 GB of data in your table to enable this feature.\\n\\nThe Key Visualizer is shown here:\\n\\n[![Bigtable Key Visualizer](images/image.png)](images/image.png)\\n\\nThe Key Visualizer will help you find and prevent hotspots, find rows with too much data and show if your key schema is balanced.\\n\\n### Summary\\n\\nBigtable is one of the original and best (massively) distributed NoSQL platforms available. Schema and moreover row key design play a massive part in ensuring low latency and query performance. Go forth and conquer with Cloud Bigtable!"},{"id":"gcp-templates-for-c4-diagrams-using-plantuml","metadata":{"permalink":"/gcp-templates-for-c4-diagrams-using-plantuml","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-08-14-gcp-templates-for-c4-diagrams-using-plantuml/index.md","source":"@site/blog/2020-08-14-gcp-templates-for-c4-diagrams-using-plantuml/index.md","title":"GCP Templates for C4 Diagrams using PlantUML","description":"I am a believer in the mantra of **\u201cEverything-as-Code\u201d**, this includes diagrams and other architectural artefacts. Enter PlantUML\u2026","date":"2020-08-14T00:00:00.000Z","formattedDate":"August 14, 2020","tags":[{"label":"c4model","permalink":"/tags/c-4-model"},{"label":"diagramming","permalink":"/tags/diagramming"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"plantuml","permalink":"/tags/plantuml"},{"label":"software-architecture","permalink":"/tags/software-architecture"}],"readingTime":1.85,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"gcp-templates-for-c4-diagrams-using-plantuml","title":"GCP Templates for C4 Diagrams using PlantUML","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/gcp-c4.png","tags":["c4model","diagramming","gcp","google-cloud-platform","googlecloudplatform","plantuml","software-architecture"],"keywords":["c4model","diagramming","gcp","google-cloud-platform","googlecloudplatform","plantuml","software-architecture"]},"prevItem":{"title":"Cloud Bigtable Primer Part II \u2013 Row Key Selection and Schema Design","permalink":"/cloud-bigtable-primer-part-ii-row-key-selection-and-schema-design"},"nextItem":{"title":"Cloud Bigtable Primer - Part I","permalink":"/cloud-bigtable-primer-part-i"}},"content":"I am a believer in the mantra of _**\u201cEverything-as-Code\u201d**_, this includes diagrams and other architectural artefacts. Enter PlantUML\u2026\\n\\n## PlantUML\\n\\n[PlantUML](https://plantuml.com/) is an open-source tool which allows users to create UML diagrams from an intuitive DSL (Domain Specific Language). PlantUML is built on top of Graphviz and enables software architects and designers to use code to create Sequence Diagrams, Use Case Diagrams, Class Diagrams, State and Activity Diagrams and much more.\\n\\n## C4 Diagrams\\n\\nPlantUML can be extended to support the [C4 model](https://c4model.com/) for visualising software architecture. Which describes software in different layers including Context, Container, Component and Code diagrams.\\n\\n## GCP Architecture Diagramming using C4\\n\\nPlantUML and C4 can be used to produce cloud architectures, there are official libraries available through PlantUML for Azure and AWS service icons, however these do not exist for GCP yet. There are several open source libraries available, however I have made an attempt to simplify the implementation.\\n\\nThe code below can be used to generate a C4 diagram describing a GCP architecture including official GCP service icons:\\n\\n```\\n@startuml\\n!define GCPPuml https://raw.githubusercontent.com/gamma-data/GCP-C4-PlantUML/master/templates\\n\\n!includeurl GCPPuml/C4\\\\_Context.puml\\n!includeurl GCPPuml/C4\\\\_Component.puml\\n!includeurl GCPPuml/C4\\\\_Container.puml\\n!includeurl GCPPuml/GCPC4Integration.puml\\n!includeurl GCPPuml/GCPCommon.puml\\n\\n!includeurl GCPPuml/Networking/CloudDNS.puml\\n!includeurl GCPPuml/Networking/CloudLoadBalancing.puml\\n!includeurl GCPPuml/Compute/ComputeEngine.puml\\n!includeurl GCPPuml/Storage/CloudStorage.puml\\n!includeurl GCPPuml/Databases/CloudSQL.puml\\n\\ntitle Sample C4 Diagram with GCP Icons\\n\\nPerson(publisher, \\"Publisher\\")\\nSystem\\\\_Ext(device, \\"User\\")\\n\\nBoundary(gcp,\\"gcp-project\\") {\\n  CloudDNS(dns, \\"Managed Zone\\", \\"Cloud DNS\\")\\n  CloudLoadBalancing(lb, \\"L7 Load Balancer\\", \\"Cloud Load Balancing\\")\\n  CloudStorage(bucket, \\"Static Content Bucket\\", \\"Cloud Storage\\")\\n  Boundary(region, \\"gcp-region\\") {\\n    Boundary(zonea, \\"zone a\\") {\\n      ComputeEngine(gcea, \\"Content Server\\", \\"Compute Engine\\")\\n      CloudSQL(csqla, \\"Dynamic Content\\", \\"Cloud SQL\\")\\n    }\\n    Boundary(zoneb, \\"zone b\\") {\\n      ComputeEngine(gceb, \\"Content Server\\", \\"Compute Engine\\")\\n      CloudSQL(csqlb, \\"Dynamic Content\\\\\\\\n(Read Replica)\\", \\"Cloud SQL\\")\\n    }\\n  }\\n}\\n\\nRel(device, dns, \\"resolves name\\")\\nRel(device, lb, \\"makes request\\")\\nRel(lb, gcea, \\"routes request\\")\\nRel(lb, gceb, \\"routes request\\")\\nRel(gcea, bucket, \\"get static content\\")\\nRel(gceb, bucket, \\"get static content\\")\\nRel(gcea, csqla, \\"get dynamic content\\")\\nRel(gceb, csqla, \\"get dynamic content\\")\\nRel(csqla, csqlb, \\"replication\\")\\nRel(publisher,bucket,\\"publish static content\\")\\n\\n@enduml\\n```\\n\\nThe preceding code generates the diagram below:\\n\\n[![](images/Sample-C4-Diagram-with-GCP-Icons.png)](images/Sample-C4-Diagram-with-GCP-Icons.png)\\n\\nAdditional services can be added and used in your diagrams by adding them to your includes, such as:\\n\\n```\\n!includeurl GCPPuml/DataAnalytics/BigQuery.puml\\n!includeurl GCPPuml/DataAnalytics/CloudDataflow.puml\\n!includeurl GCPPuml/AIandMachineLearning/AIHub.puml\\n!includeurl GCPPuml/AIandMachineLearning/CloudAutoML.puml\\n!includeurl GCPPuml/DeveloperTools/CloudBuild.puml\\n!includeurl GCPPuml/HybridandMultiCloud/Stackdriver.puml\\n!includeurl GCPPuml/InternetofThings/CloudIoTCore.puml\\n!includeurl GCPPuml/Migration/TransferAppliance.puml\\n!includeurl GCPPuml/Security/CloudIAM.puml\\n\' and more\u2026\\n```\\n\\n> The complete template library is available at:\\n> \\n> [https://github.com/gamma-data/GCP-C4-PlantUML](https://github.com/gamma-data/GCP-C4-PlantUML)"},{"id":"cloud-bigtable-primer-part-i","metadata":{"permalink":"/cloud-bigtable-primer-part-i","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-08-04-cloud-bigtable-primer-part-i/index.md","source":"@site/blog/2020-08-04-cloud-bigtable-primer-part-i/index.md","title":"Cloud Bigtable Primer - Part I","description":"Bigtable is one of the foundational services in the Google Cloud Platform and to this day one of the greatest contributions to the big data ecosystem at large. It is also one of the least known services available, with all the headlines and attention going to more widely used services such as BigQuery.","date":"2020-08-04T00:00:00.000Z","formattedDate":"August 4, 2020","tags":[{"label":"bigtable","permalink":"/tags/bigtable"},{"label":"cloud-bigtable","permalink":"/tags/cloud-bigtable"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"nosql","permalink":"/tags/nosql"}],"readingTime":6.585,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"cloud-bigtable-primer-part-i","title":"Cloud Bigtable Primer - Part I","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/cbt-featured-image.png","tags":["bigtable","cloud-bigtable","gcp","google-cloud-platform","googlecloudplatform","nosql"],"keywords":["bigtable","cloud-bigtable","gcp","google-cloud-platform","googlecloudplatform","nosql"]},"prevItem":{"title":"GCP Templates for C4 Diagrams using PlantUML","permalink":"/gcp-templates-for-c4-diagrams-using-plantuml"},"nextItem":{"title":"Automated GCS Object Scanning Using DLP with Notifications Using Slack","permalink":"/automated-gcs-object-scanning-using-dlp-with-notifications-using-slack"}},"content":"Bigtable is one of the foundational services in the Google Cloud Platform and to this day one of the greatest contributions to the big data ecosystem at large. It is also one of the least known services available, with all the headlines and attention going to more widely used services such as BigQuery.\\n\\n## Background\\n\\nIn 2006 (pre Google Cloud Platform), Google released a white paper called _**\u201cBigtable: A Distributed Storage System for Structured Data\u201d**_, this paper set out the reference architecture for what was to become Cloud Bigtable. This followed several other whitepapers including the GoogleFS and MapReduce whitepapers released in 2003 and 2004 which provided abstract reference architectures for the Google File System (now known as **_Colossus_**) and the MapReduce algorithm. These whitepapers inspired a generation of open source distributed processing systems including Hadoop. Google has long had a pattern of publicising a generalized overview of their approach to solving different storage and processing challenges at scale through white papers.\\n\\n[![Bigtable Whitepaper 2006](images/bigtable-whitepaper.png)](assets/bigtable-osdi06.pdf)\\n\\nThe Bigtable white paper inspired a wave of open source distributed key/value oriented NoSQL data stores including Apache HBase and Apache Cassandra.\\n\\n## What is Bigtable?\\n\\nBigtable is a distributed, petabyte scale NoSQL database. More specifically, Bigtable is\u2026\\n\\n### a map\\n\\nAt its core Bigtable is a distributed map or an associative array indexed by a row key, with values in columns which are created only when they are referenced. Each value is an uninterpreted byte array.\\n\\n### sorted\\n\\nRow keys are stored in lexographic order akin to a clustered index in a relational database.\\n\\n### sparse\\n\\nA given row can have any number of columns, not all columns must have values and NULLs are not stored. There may also be gaps between keys.\\n\\n### multi-dimensional\\n\\nAll values are versioned with a timestamp (or configurable integer). Data is not updated in place, it is instead superseded with another version.\\n\\n## When (and when not) to use Bigtable\\n\\n- You need to do many thousands of operations per second on TB+ scale data\\n- Your access patterns are well known and simple\\n- You need to support random write or random read operations (or sequential reads) - each using a row key as the primary identifier\\n\\n### Don\u2019t use Bigtable if\u2026\\n\\n- You need explicit JOIN capability, that is joining one or more tables\\n- You need to do ad-hoc analytics\\n- Your access patterns are unknown or not well defined\\n\\n### Bigtable vs Relational Database Systems\\n\\nThe following table compares and contrasts Bigtable against relational databases (both transaction oriented and analytic oriented databases):\\n\\n&nbsp;| Bigtable | RDBMS (OLTP) | RDBMS (DSS/MPP)\\n--|--|--|-- \\nData Layout | Column Family Oriented | Row Oriented | Column Oriented\\nTransaction Support | Single Row Only | Yes | Depends (but usually no)\\nQuery DSL | get/put/scan/delete | SQL | SQL\\nIndexes | Row Key Only | Yes | Yes (typically PI based)\\nMax Data Size | PB+ | \'00s GB  to TB | TB+\\nRead/Write Throughput | \\"\'000 | 000s queries/s\\" | \'000s queries/s | \'000s queries/s\\n\\n## Bigtable Data Model\\n\\n**_Tables_** in Bigtable are comprised of rows and columns (sounds familiar so far..). Every row is uniquely identified by a **_rowkey_** (like a primary key..again sounds familiar so far).\\n\\n**_Columns_** belong to **_Column Families_** and only exist when inserted, NULLs are not stored - this is where it starts to differ from a traditional RDBMS. The following image demonstrates the data model for a fictitious table in Bigtable.\\n\\n[![Bigtable Data Model](images/bigtable-data-model.png)](images/bigtable-data-model.png)\\n\\nIn the previous example, we created two Column Families (**_cf1_** and **_cf2_**). These are created during table definition or update operations (akin to DDL operations in the relational world). In this case, we have chosen to store primary attributes, like name, etc in cf1 and features (or derived attributes) in cf2 like indicators.\\n\\n### Cell versioning\\n\\nEach cell has a timestamp/version associated with it, multiple versions of a row can exist. Versions are naturally stored in descending order.\\n\\nProperties such as the max age for a cell or the maximum number of versions to be stored for any given cell are set on the Column Family. Versions are compacted through a process called **_Garbage Collection_** - not to be confused with Java Garbage Collection (albeit same idea).\\n\\nRow Key | Column | Value | Timestamp\\n--|--|--|--\\n123 | cf1:status | ACTIVE | 2020-06-30T08.58.27.560\\n123 | cf1:status | PENDING | 2020-06-28T06.20.18.330\\n123 | cf1:status | INACTIVE | 2020-06-27T07.59.20.460\\n\\n## Bigtable Instances, Clusters, Nodes and Tables\\n\\nBigtable is a \\"no-ops\\" service, meaning you do not need to configure machine types or details about the underlying infrastructure, save a few sizing or performance options - such as the number of nodes in a cluster or whether to use solid state hard drives (SSD) or the magnetic alternative (HDD). The following diagram shows the relationships and cardinality for Cloud Bigtable.\\n\\n[![Bigtable Instances, Clusters and Nodes](images/bigtable-instances-and-nodes.png)](images/bigtable-instances-and-nodes.png)\\n\\n**_Clusters_** and **_nodes_** are the physical compute layer for Bigtable, these are zonal assets, zonal and regional availability can be achieved through replication which we will discuss later in this article.\\n\\n**_Instances_** are a virtual abstraction for clusters, Tables belong to instances (not clusters). This is due to Bigtables underlying architecture which is based upon a separation of storage and compute as shown below.\\n\\n[![Bigtable Separation of Storage and Compute](images/bigtable-storage-and-compute.png)](images/bigtable-storage-and-compute.png)\\n\\nBigtables separation of storage and compute allow it to scale horizontally, as nodes are stateless they can be increased to increase query performance. The underlying storage system in inherently scalable.\\n\\n### Physical Storage & Column Families\\n\\nData (Columns) for Bigtable is stored in **_Tablets_** (as shown in the previous diagram), which store \\"regions\\" of row keys for a particular Column Family. Columns consist of a column family prefix and qualifier, for instance:\\n\\n```\\ncf1:col1\\n```\\n\\nA table can have one or more Column Families. Column families must be declared at schema definition time (could be a create or alter operation). A cell is an intersection of a row key and a version of a column within a column family.\\n\\nStorage settings (such as the compaction/garbage collection properties mentioned before) can be specified for each Column Family - which can differ from other column families in the same table.\\n\\n### Bigtable Availability and Replication\\n\\n**_Replication_** is used to increase availability and durability for Cloud Bigtable \u2013 this can also be used to segregate read and write operations for the same table.\\n\\nData and changes to tables are replicated across multiple regions or multiple zones within the same region, this replication can be blocking (single row transactions) or non blocking (eventually consistent). However all clusters within a Bigtable instance are considered primary (writable).\\n\\nRequests are routed using **_Application Profiles_**, a **_single-cluster routing_** policy can be used for manual failover, whereas a **_multi-cluster routing_** is used for automatic failover.\\n\\n### Backup and Export Options for Bigtable\\n\\nManaged backups can be taken at a table level, new tables can be created from backups. The backups cannot be exported, however table level export and import operations are available via pre-baked Dataflow templates for data stored in GCS in the following formats:\\n\\n- SequenceFiles\\n- Avro Files\\n- Parquet Files\\n- CSV Files\\n\\n## Accessing Bigtable\\n\\nBigtable data and admin functions are available via:\\n\\n- `cbt` (optional component of the Google SDK)\\n- `hbase shell` (REPL shell)\\n- Happybase API (Python API for Hbase)\\n- SDK libraries for:\\n    - Golang\\n    - Python\\n    - Java\\n    - Node.js\\n    - Ruby\\n    - C#, C++, PHP, and more\\n\\nAs Bigtable is not a cheap service, there is a local emulator available which is great for application development. This is part of the Cloud SDK, and can be started using the following command:\\n\\n```\\ngcloud beta emulators bigtable start\\n```\\n\\nIn the next article in this series we will demonstrate admin and data functions as well as the local emulator.\\n\\n> Next Up : Part II - Row Key Selection and Schema Design in Bigtable"},{"id":"automated-gcs-object-scanning-using-dlp-with-notifications-using-slack","metadata":{"permalink":"/automated-gcs-object-scanning-using-dlp-with-notifications-using-slack","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-06-01-automated-gcs-object-scanning-using-dlp-with-notifications-using-slack/index.md","source":"@site/blog/2020-06-01-automated-gcs-object-scanning-using-dlp-with-notifications-using-slack/index.md","title":"Automated GCS Object Scanning Using DLP with Notifications Using Slack","description":"This is a follow up to a previous blog, Google Cloud Storage Object Notifications using Slack in which we used Slack to notify us of new objects being uploaded to GCS.","date":"2020-06-01T00:00:00.000Z","formattedDate":"June 1, 2020","tags":[{"label":"cloud-dlp","permalink":"/tags/cloud-dlp"},{"label":"cloud-functions","permalink":"/tags/cloud-functions"},{"label":"cloud-storage","permalink":"/tags/cloud-storage"},{"label":"dlp","permalink":"/tags/dlp"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"gcs","permalink":"/tags/gcs"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"python","permalink":"/tags/python"},{"label":"slack","permalink":"/tags/slack"},{"label":"terraform","permalink":"/tags/terraform"}],"readingTime":2.16,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"automated-gcs-object-scanning-using-dlp-with-notifications-using-slack","title":"Automated GCS Object Scanning Using DLP with Notifications Using Slack","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/Slack-GCS-DLP-Image-e1591007165488.png","tags":["cloud-dlp","cloud-functions","cloud-storage","dlp","gcp","gcs","google-cloud-platform","googlecloudplatform","python","slack","terraform"],"keywords":["cloud-dlp","cloud-functions","cloud-storage","dlp","gcp","gcs","google-cloud-platform","googlecloudplatform","python","slack","terraform"]},"prevItem":{"title":"Cloud Bigtable Primer - Part I","permalink":"/cloud-bigtable-primer-part-i"},"nextItem":{"title":"JSON Wrangling with Go","permalink":"/json-wrangling-with-go"}},"content":"import Gist from \'react-gist\';\\n\\nThis is a follow up to a previous blog, [__Google Cloud Storage Object Notifications using Slack__](https://cloudywithachanceofbigdata.com/google-cloud-storage-object-notifications-using-slack/) in which we used Slack to notify us of new objects being uploaded to GCS.\\n\\nIn this article we will take things a step further, where uploading an object to a GCS bucket will trigger a DLP inspection of the object and if any preconfigured info types (such as credit card numbers or API credentials) are present in the object, a Slack notification will be generated.\\n\\nAs DLP scans are \u201cjobs\u201d, meaning they run asynchronously, we will need to trigger scans and inspect results using two separate Cloud Functions (one for triggering a scan [`gcs-dlp-scan-trigger`] and one for inspecting the results of the scan [`gcs-dlp-evaluate-results`]) and a Cloud PubSub topic [`dlp-scan-topic`] which is used to hold the reference to the DLP job.\\n\\nThe process is described using the sequence diagram below:\\n\\n[![](images/dlp-notifications-using-slack.png)](images/dlp-notifications-using-slack.png)\\n\\n## The Code\\n\\nThe `gcs-dlp-scan-trigger` Cloud Function fires when a new object is created in a specified GCS bucket. This function configures the DLP scan to be executed, including the DLP info types (for instance `CREDIT_CARD_NUMBER`, `EMAIL_ADDRESS`, `ETHNIC_GROUP`, `PHONE_NUMBER`, etc) a and likelihood of that info type existing (for instance `LIKELY`). DLP scans determine the probability of an info type occurring in the data, they do not scan every object in its entirety as this would be too expensive.\\n\\nThe primary function executed in the `gcs-dlp-scan-trigger` Cloud Function is named `inspect_gcs_file`. This function configures and submits the DLP job, supplying a PubSub topic to which the DLP Job Name will be written, the code for the `inspect_gcs_file` is shown here:\\n\\n<Gist id=\\"913a4457f43bc7b80e4405dd01f7b64d\\" \\n/>\\n\\nAt this stage the DLP job is created an running asynchronously, the next Cloud Function, `gcs-dlp-evaluate-results`, fires when a message is sent to the PubSub topic defined in the DLP job. The `gcs-dlp-evaluate-results` reads the DLP Job Name from the PubSub topic, connects to the DLP service and queries the job status, when the job is complete, this function checks the results of the scan, if the `min_likliehood` threshold is met for any of the specified info types, a Slack message is generated. The code for the main method in the `gcs-dlp-evaluate-results` function is shown here:\\n\\n<Gist id=\\"ab377f6c3e448ae7c623d057239e05ed\\" \\n/>\\n\\nFinally, a Slack webhook is used to send the message to a specified Slack channel in a workspace, this is done using the `send_slack_notification` function shown here:\\n\\n<Gist id=\\"15d9e7c0922c26b680bed81abfcbadff\\" \\n/>\\n\\nAn example Slack message is shown here:\\n\\n[![Slack Notification for Sensitive Data Detected in a Newly Created GCS Object](images/gcs-dlp-results-slack-notification.png)](images/gcs-dlp-results-slack-notification.png)\\n\\n> Full source code can be found at: [https://github.com/gamma-data/automated-gcs-object-scanning-using-dlp-with-notifications-using-slack](https://github.com/gamma-data/automated-gcs-object-scanning-using-dlp-with-notifications-using-slack)"},{"id":"json-wrangling-with-go","metadata":{"permalink":"/json-wrangling-with-go","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-04-22-json-wrangling-with-go/index.md","source":"@site/blog/2020-04-22-json-wrangling-with-go/index.md","title":"JSON Wrangling with Go","description":"Golang is a fantastic language but at first glance it is a bit clumsy when it comes to JSON in contrast to other languages such as Python or Javascript. Having said that once you master the concepts involved with JSON wrangling using Go it is equally as functional \u2013 with added type safety and performance.","date":"2020-04-22T00:00:00.000Z","formattedDate":"April 22, 2020","tags":[{"label":"golang","permalink":"/tags/golang"},{"label":"json","permalink":"/tags/json"}],"readingTime":4.105,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"json-wrangling-with-go","title":"JSON Wrangling with Go","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/json-go.png","tags":["golang","json"],"keywords":["golang","json"]},"prevItem":{"title":"Automated GCS Object Scanning Using DLP with Notifications Using Slack","permalink":"/automated-gcs-object-scanning-using-dlp-with-notifications-using-slack"},"nextItem":{"title":"Forseti Terraform Validator: Enforcing resource policy compliance in your CI pipeline","permalink":"/forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline"}},"content":"import Gist from \'react-gist\';\\n\\nGolang is a fantastic language but at first glance it is a bit clumsy when it comes to JSON in contrast to other languages such as Python or Javascript. Having said that once you master the concepts involved with JSON wrangling using Go it is equally as functional \u2013 with added type safety and performance.\\n\\nIn this article we will build a program in Golang to parse a JSON file containing a collection held in a named key \u2013 without knowing the structure of this object, we will expose the schema for the object including data types and recurse the object for its values.\\n\\nThis example uses a great Go package called `tablewriter` to render the output of these operations using a table style result set.\\n\\nThe program has `describe` and `select` verbs as operation types; describe shows the column names in the collection and their respective data types, select prints the keys and values as a tabular result set with column headers for the keys and rows containing their corresponding values.\\n\\nStarting with this:\\n\\n<Gist id=\\"cceeb5b667ccfe8a9e20437d3f1dde42\\" \\n/>\\n\\nWe will end up with this when performing a `describe` operation:\\n\\n<Gist id=\\"fbd04c220a70d439df3a14d4a4f48a3e\\" \\n/>\\n\\nAnd this when performing a `select` operation:\\n\\n<Gist id=\\"0b795b13b160cfbcd6796243c0fbb238\\" \\n/>\\n\\nNow let\u2019s talk about how we got there\u2026\\n\\n## The JSON package\\n\\nSupport for JSON in Go is provided using the `encoding/json` package, this needs to be imported in your program of course\u2026 You will also need to import the `reflect` package \u2013 more on this later. `io/ioutil` is required to read the data from a file input, there are other packages included in the program that are removed for brevity:\\n\\n<Gist id=\\"def7e02eac07ded8b80ff807cf023989\\" \\n/>\\n\\n## Reading the data\u2026\\n\\nWe will read the data from the JSON file into a variable called `body`, note that we are not attempting to deserialize the data at this point. This is also a good opportunity to handle any runtime or IO errors that occur here as well.\\n\\n<Gist id=\\"74a2c2c839a30ed8cc66d83d3ddde3b4\\" \\n/>\\n\\n## The interface\u2026\\n\\nWe will declare an empty interface called `data` which will be used to decode the json object (of which the structure is not known), we will also create an abstract interface called `colldata` to hold the contents of the collection contained inside the JSON object that we are specifically looking for:\\n\\n<Gist id=\\"32555f65af4be1fc2504f2d11e15aa19\\" \\n/>\\n\\n## Validating\u2026\\n\\nNext we need to validate that the input is a valid JSON object, we can use the `json.Valid(body)` method to do this:\\n\\n<Gist id=\\"c7afe41fcca4ba1e3ed009044cea76de\\" \\n/>\\n\\n## Unmarshalling\u2026\\n\\nNow the interesting bits, we will deserialize the JSON object to the empty data interface we created earlier using the `json.Unmarshal()` method:\\n\\n<Gist id=\\"2579ec79be915fb89e91ea0977bfbff6\\" \\n/>\\n\\nNote that this operation is another opportunity to catch unexpected errors and handle them accordingly.\\n\\n## Checking the type of the object using reflection\u2026\\n\\nNow that we have serialized the JSON object into the data interface, there are several ways we can inspect the type of the object (which could be a map or an array). One such way is to use reflection. Reflection is the ability of a program to inspect itself at runtime. An example is shown here:\\n\\n<Gist id=\\"1ccd077de0fdee8973e25ac79719cbf5\\" \\n/>\\n\\nThis instruction would produce the following output for our `zones.json` file:\\n\\n<Gist id=\\"04c1b3ae79e969e4be32ef7fa1c07736\\" \\n/>\\n\\n## The type switch\u2026\\n\\nAnother method to decode the type of the data object (and any objects nested as elements or keys within the data object), is to use the type switch, an example of a type switch function is shown here:\\n\\n<Gist id=\\"2e7a3d62ec6f7c71a9c01bfa8d360e4e\\" \\n/>\\n\\n## Finding the nested collection and recursing it\u2026\\n\\nThe aim of the program is to find a collection (an array of maps) nested in a JSON object. The maps with each element of the array are unknown at runtime and are discovered through recursion.\\n\\nIf we are performing a describe operation, we only need to parse the first element of the collection to get the key names and the data type of the values (for which we will use the same `getObjectType` function to perform a type switch.\\n\\nIf we are performing a select operation, we need to parse the first element to get the column names (the keys in the map) and then we need to recurse each element to get the values for each key.\\n\\nIf the element contains a key named id or name, we will place this at the beginning of the resultant record, as maps are unordered by definition.\\n\\n## The output\u2026\\n\\nAs mentioned, we are using the `tablewriter` package to render the output of the collection as a pretty printed table in our terminal. As wrap around can get pretty ugly an additional `maxfieldlen` argument is provided to truncate the values if needed.\\n\\n## In summary\u2026\\n\\nAlthough it is a bit more involved than some other languages, once you get your head around processing JSON in Go, the possibilities are endless!\\n\\n> Full source code can be found at: [https://github.com/gamma-data/json-wrangling-with-golang](https://github.com/gamma-data/json-wrangling-with-golang)"},{"id":"forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline","metadata":{"permalink":"/forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-04-18-forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline/index.md","source":"@site/blog/2020-04-18-forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline/index.md","title":"Forseti Terraform Validator: Enforcing resource policy compliance in your CI pipeline","description":"Terraform is a powerful tool for managing your Infrastructure as Code. Declare your resources once, define their variables per environment and sleep easy knowing your CI pipeline will take care of the rest.","date":"2020-04-18T00:00:00.000Z","formattedDate":"April 18, 2020","tags":[{"label":"devops","permalink":"/tags/devops"},{"label":"forseti","permalink":"/tags/forseti"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"policyascode","permalink":"/tags/policyascode"},{"label":"terraform","permalink":"/tags/terraform"}],"readingTime":8.5,"truncated":false,"authors":[{"name":"Daniel Hussey","title":"Cloud Security Engineer","url":"https://www.linkedin.com/in/daniel-hussey/","imageURL":"http://2.gravatar.com/avatar/b0daeaf079c3665ee65a250adba487ee?s=80","key":"danielhussey"}],"frontMatter":{"slug":"forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline","title":"Forseti Terraform Validator: Enforcing resource policy compliance in your CI pipeline","authors":["danielhussey"],"draft":false,"hide_table_of_contents":true,"image":"images/Forseti-Terraform-e1587291818418.png","tags":["devops","forseti","gcp","google-cloud-platform","googlecloudplatform","policyascode","terraform"],"keywords":["devops","forseti","gcp","google-cloud-platform","googlecloudplatform","policyascode","terraform"]},"prevItem":{"title":"JSON Wrangling with Go","permalink":"/json-wrangling-with-go"},"nextItem":{"title":"Creating a Site to Site VPN Connection Between GCP and Azure with Google Private Access","permalink":"/creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access"}},"content":"Terraform is a powerful tool for managing your Infrastructure as Code. Declare your resources once, define their variables per environment and sleep easy knowing your CI pipeline will take care of the rest.\\n\\nBut\u2026 one night you wake up in a sweat. The details are fuzzy but you were browsing your favourite cloud provider\u2019s console - probably GCP ;) - and thought you saw a bucket had been created outside of your allowed locations! Maybe it even had risky access controls.\\n\\nYou go brush it off and try to fall back to sleep, but you can\u2019t quite push the thought from your mind that somewhere in all that Terraform code, someone _could_ be declaring resources in unapproved locations, and your CICD pipeline would do nothing to stop it. Oh the regulatory implications.\\n\\n## Enter Terraform Validator by Forseti\\n\\nTerraform Validator by Forseti allows you to declare your Policy as Code, check compliance of your Terraform plans against said Policy, and automatically fail violating plans in a CI step. All without setting up servers or agents.\\n\\nYou\u2019re going to learn how to enforce policy on GCP resources like BigQuery, IAM, networks, MySQL, Google Kubernetes Engine (GKE) and more. If you\u2019re particularly crafty, you may be able to go beyond GCP.\\n\\nForseti\u2019s suite of solutions are GCP focused and allow a wide range of live config validation, monitoring and more using the Policy Library we\u2019re going to set up. These additional capabilities require additional infrastructure. But we\u2019re going one step at a time, starting with enforcing policy during deployment.\\n\\n## Getting Started\\n\\nLet\u2019s assume you already have an established CICD pipeline that uses Terraform, or that you are content to validate your Terraform plans locally for now. In that case, we need just two things:\\n\\n1. A Policy Library\\n2. Terraform Validator\\n\\nIt\u2019s that simple! No new servers, agents, firewall rules, extra service accounts or other nonsense. Just add Policy Library, the Validator tool and you can enforce policy on your Terraform deployments.\\n\\nWe\u2019re going to tinker with some existing GCP-focused sample policies (aka Constraints) that Forseti makes available. These samples cover a wide range of resources and use cases, so it is easy to adjust what\u2019s provided to define your own Constraints.\\n\\n## Policy Library\\n\\nFirst let\'s open up some of Forseti\'s pre-defined constraints. We\u2019ll copy them into our own Git repository and adjust to create policies that match our needs. Repeatable and configurable - that\u2019s Policy as Code at work.\\n\\n### Concepts\\n\\nIn the world of Forseti and in particular Terraform Validator, Policies are defined and understood via easy to read YAML files known as Constraints\\n\\nThere is just enough information in a Constraint file for to make clear its purpose and effect, and by tinkering lightly with a pre-written Constraint you can achieve a lot without looking too deeply into the inner workings . But there\u2019s more happening than meets the eye.\\n\\nConstraints are built on Templates - which are like forms with some extra bits waiting to be completed to make a Constraint. Except there\u2019s a lot more hidden away that\u2019s pretty cool if you want to understand it.\\n\\nThink of a Template as a \u2018Class\u2019 in the OOP sense, and of a Constraint as an instantiated Template with all the key attributes defined.\\n\\nE.g. A generic Template for policy on bucket locations and a Constraint to specify which locations are relevant in a given instance. Again, buckets and locations are just the basic example - the potential applications are far greater.\\n\\nNow the real magic is that just like a \u2018Class\u2019, a Template contains logic that makes everything abstracted away in the Constraint possible. Templates contain inline Rego (ray-go), borrowed lovingly by Forseti from the Open Policy Agent (OPA) team.\\n\\nLearn more about Rego and OPA [here](https://www.openpolicyagent.org/docs/latest/policy-language/) to understand the relationship to our Terraform Validator.\\n\\nBut let\u2019s begin.\\n\\n### Set up your Policies\\n\\n#### Create your Policy Library repository\\n\\nCreate your Policy Library repository by cloning [https://github.com/forseti-security/policy-library](https://github.com/forseti-security/policy-library) into your own VCS.\\n\\nThis repo contains templates and sample constraints which will form the basis of your policies. So get it into your Git environment and clone it to local for the next step.\\n\\n#### Customise sample constraints to fit your needs\\n\\nAs discussed in Concepts, Constraints are defined Templates, which make use of Rego policy language. Nice. So let\u2019s take a sample Constraint, put it in our Policy Library and set the values to what we need. It\u2019s that easy - no need to write new templates or learn Rego if your use case is covered.\\n\\nIn a new branch\u2026\\n\\n1. Copy the sample Constraint `storage_location.yaml` to your Constraints folder.  \\n\\n```bash    \\n$ cp policy-library/samples/storage_location.yaml policy-library/policies/constraints/storage_location.yaml\\n```\\n\\n2. Replace the sample location (`asia-southeast1`) in `storage_location.yaml` with `australia-southeast1`.  \\n\\n```yaml    \\n  spec:  \\n    severity: high  \\n    match:  \\n      target: [\\"organization/*\\"]  \\n    parameters:  \\n      mode: \\"allowlist\\"  \\n      locations:  \\n      - australia-southeast1  \\n      exemptions: []\\n```\\n\\n3. Push back to your repo - not Forseti\u2019s!  \\n    \\n```bash\\n$ git push https://github.com/<your-repository>/policy-library.git\\n```    \\n\\n#### Policy review\\n\\nThere you go - you\u2019ve customised a sample Constraint. Now you have your own instance of version controlled Policy-as-Code and are ready to apply the power of OPA\u2019s Rego policy language that lies within the parent Template. Impressively easy right?\\n\\nThat\u2019s a pretty simple example. You can browse the rest of Forseti\u2019s Policy Library to view other sample Constraints, Templates and the Rego logic that makes all of this work. These can be adjusted to cover all kinds of use cases across GCP resources.\\n\\nI suggest working with and editing the [sample Constraints](https://github.com/forseti-security/policy-library/tree/master/samples) before making any changes to Templates.\\n\\nIf you were to write Rego and Templates from scratch, you might even be able to enforce Policy as Code against non-GCP Terraform code.\\n\\n## Terraform Validator\\n\\nNow, let\u2019s set up the Terraform Validator tool and have it compare a sample piece of Terraform code against the Constraint we configured above. Keep in mind you\u2019ll want to translate what\u2019s done here into steps in your CICD pipeline.\\n\\nOnce the tool is in place, we really just run `terraform plan` and feed the output into Terraform Validator. The Validator compares it to our Constraints, runs all the abstracted logic we don\u2019t need to worry about and returns 0 or 2 when done for pass / fail respectively. Easy.\\n\\nSo using Terraform if I try to make a bucket in `australia-southeast1` it should pass, if I try to make one in the US it should fail. Let\u2019s set up the tool, write some basic Terraform and see how we go.\\n\\n### Setup Terraform Validator\\n\\nCheck for the latest version of `terraform-validator` from the official terraform-validator GCS bucket.\\n\\nVery important when using tf version 0.12 or greater. This is the easy way - you can pull from the [Terraform Validator Github](https://github.com/GoogleCloudPlatform/terraform-validator) and make it yourself too.\\n\\n```bash\\n$ gsutil ls -r gs://terraform-validator/releases\\n```\\n\\nCopy the latest version to the working dir\\n\\n```bash\\n$ gsutil cp gs://terraform-validator/releases/2020-03-05/terraform-validator-linux-amd64 .\\n```\\n\\nMake it executable\\n\\n```bash\\n$ chmod 755 terraform-validator-linux-amd64\\n```\\n\\nReady to go!\\n\\n### Review your Terraform code\\n\\nWe\u2019re going to make a ridiculously simple piece of Terraform that tries to create one bucket in our project to keep things simple.\\n\\n```\\n# main.tf\\n\\nresource \\"google_storage_bucket\\" \\"tf-validator-demo-bucket\\" {\xa0\xa0\\n  name\xa0 \xa0 \xa0 \xa0 \xa0 = \\"tf-validator-demo-bucket\\"\\n\xa0\xa0location\xa0 \xa0 \xa0 = \\"US\\"\\n\xa0\xa0force_destroy = true\\n\\n\xa0\xa0lifecycle_rule {\\n\xa0\xa0\xa0\xa0condition {\\n\xa0\xa0\xa0\xa0\xa0\xa0age = \\"3\\"\\n\xa0\xa0\xa0\xa0}\\n\xa0\xa0\xa0\xa0action {\\n\xa0\xa0\xa0\xa0\xa0\xa0type = \\"Delete\\"\\n\xa0\xa0\xa0\xa0}\\n\xa0\xa0}\\n}\\n```\\n\\nThis is a pretty standard bit of Terraform for a GCS bucket, but made very simple with all the values defined directly in `main.tf`. Note the location of the bucket - it violates our Constraint that was set to the `australia-southeast1` region.\\n\\n### Make the Terraform plan\\n\\nWarm up Terraform.  \\nDouble check your Terraform code if there are any hiccups.\\n\\n```bash\\n$ terraform init\\n```\\n\\nMake the Terraform plan and store output to file.\\n\\n```bash\\n$ terraform plan --out=terraform.tfplan\\n```\\n\\nConvert the plan to JSON\\n\\n```bash\\n$ terraform show -json ./terraform.tfplan > ./terraform.tfplan.json\\n```\\n\\n### Validate the non-compliant Terraform plan against your Constraints, for example\\n\\n```bash\\n$ ./terraform-validator-linux-amd64 validate ./tfplan.tfplan.json --policy-path=../repos/policy-library/\\n```\\n\\nTA-DA!\\n\\n```\\nFound Violations:\\n\\nConstraint allow_some_storage_location on resource //storage.googleapis.com/tf-validator-demo-bucket: //storage.googleapis.com/tf-validator-demo-bucket is in a disallowed location.\\n```\\n\\n### Validate the compliant Terraform plan against your Constraints\\n\\nLet\u2019s see what happens if we repeat the above, changing the location of our GCS bucket to `australia-southeast1`.\\n\\n```bash\\n$ ./terraform-validator-linux-amd64 validate ./tfplan.tfplan.json --policy-path=../repos/policy-library/\\n```\\n\\nResults in..\\n\\n```\\nNo violations found.\\n```\\n\\nSuccess!!!\\n\\nNow all that\u2019s left to do for your Policy as Code CICD pipeline is to configure the rest of your Constraints and run this check before you go ahead and `terraform apply`. Be sure to make the `apply` step dependent on the outcome of the Validator.\\n\\n## Wrap Up\\n\\nWe\u2019ve looked at how to apply Policy as Code to validate our Infrastructure as Code. Sounds pretty modern and DevOpsy doesn\u2019t it.\\n\\nTo recap, we learned about Constraints, which are fully defined instances of Policy as Code. They\u2019re based on YAML Templates that refer to the OPA policy language Rego, but we didn\u2019t have to learn it :)\\n\\nWe created our own version controlled Policy Library.\\n\\nUsing the above learning and some handy pre-existing samples, we wrote policies (Constraints) for GCP infrastructure, specifying a whitelist for locations in which GCS buckets could be deployed.\\n\\nAs mentioned there are [dozens upon dozens of samples](https://github.com/forseti-security/policy-library/tree/master/samples) across BigQuery, IAM, networks, MySQL, Google Kubernetes Engine (GKE) and more to work with.\\n\\nOf course, we stored these configured Constraints in our version-controlled Policy Library.\\n\\n- We looked at a simple set of Terraform code to define a GCS bucket, and stored the Terraform plan to a file before applying it.\\n- We ran Forseti\u2019s Terraform Validator against the Terraform plan file, and had the Validator compare the plan to our Policy Library.\\n- We saw that the results matched our expectations! Compliance with the location specified in our Constraint passed the Validator\u2019s checks, and non-compliance triggered a violation.\\n\\nAwesome. And the best part is that all this required no special permissions, no infrastructure for servers or agents and no networking.\\n\\nAll of that comes with the full Forseti suite of Inventory taking Config Validation of already deployed resources. We might get to that next time.\\n\\nReferences:\\n\\n[https://github.com/GoogleCloudPlatform/terraform-validator](https://github.com/GoogleCloudPlatform/terraform-validator) [https://github.com/forseti-security/policy-library](https://github.com/forseti-security/policy-library) [https://www.openpolicyagent.org/docs/latest/policy-language/](https://www.openpolicyagent.org/docs/latest/policy-language/) [https://cloud.google.com/blog/products/identity-security/using-forseti-config-validator-with-terraform-validator](https://cloud.google.com/blog/products/identity-security/using-forseti-config-validator-with-terraform-validator) [https://forsetisecurity.org/docs/latest/concepts/](https://forsetisecurity.org/docs/latest/concepts/)"},{"id":"creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access","metadata":{"permalink":"/creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-03-27-creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access/index.md","source":"@site/blog/2020-03-27-creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access/index.md","title":"Creating a Site to Site VPN Connection Between GCP and Azure with Google Private Access","description":"This article demonstrates creating a site to site IPSEC VPN connection between a GCP VPC network and an Azure Virtual Network, enabling private RFC1918 network connectivity between virtual networks in both clouds. This is done using a single PowerShell script leveraging Azure PowerShell and gcloud commands in the Google SDK.","date":"2020-03-27T00:00:00.000Z","formattedDate":"March 27, 2020","tags":[{"label":"azure","permalink":"/tags/azure"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"hybrid-cloud","permalink":"/tags/hybrid-cloud"},{"label":"microsoft","permalink":"/tags/microsoft"},{"label":"microsoft-azure","permalink":"/tags/microsoft-azure"},{"label":"multi-cloud","permalink":"/tags/multi-cloud"},{"label":"private-networking","permalink":"/tags/private-networking"},{"label":"vpn","permalink":"/tags/vpn"}],"readingTime":11.685,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access","title":"Creating a Site to Site VPN Connection Between GCP and Azure with Google Private Access","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":false,"image":"images/azure_to_gcp_feature_image-1.png","tags":["azure","gcp","google-cloud-platform","googlecloudplatform","hybrid-cloud","microsoft","microsoft-azure","multi-cloud","private-networking","vpn"],"keywords":["azure","gcp","google-cloud-platform","googlecloudplatform","hybrid-cloud","microsoft","microsoft-azure","multi-cloud","private-networking","vpn"]},"prevItem":{"title":"Forseti Terraform Validator: Enforcing resource policy compliance in your CI pipeline","permalink":"/forseti-terraform-validator-enforcing-resource-policy-compliance-in-your-ci-pipeline"},"nextItem":{"title":"Spark in the Google Cloud Platform Part 2","permalink":"/spark-in-the-google-cloud-platform-part-2"}},"content":"import ImageWithCaption from \'/js/ImageWithCaption/ImageWithCaption.js\';\\nimport GcpVpnToAzure from \'./images/gcp-vpn-to-azure.png\';\\nimport AzureVpnToGCP from \'./images/azure-vpn-to-gcp.png\';\\n\\nThis article demonstrates creating a site to site IPSEC VPN connection between a GCP VPC network and an Azure Virtual Network, enabling private RFC1918 network connectivity between virtual networks in both clouds. This is done using a single PowerShell script leveraging Azure PowerShell and gcloud commands in the Google SDK.\\n\\nAdditionally, we will use Azure Private DNS to enable private access between Azure hosts and GCP APIs (such as Cloud Storage or Big Query).\\n\\nAn overview of the solution is provided here:\\n\\n[![Azure to GCP VPN Design](images/gcp-to-azure-vpn-design.png)](images/gcp-to-azure-vpn-design.png)\\n\\nOne note before starting - site to site VPN connections between GCP and Azure currently do not support dynamic routing using BGP, however creating some simple routes on either end of the connection will be enough to get going.\\n\\nLet\u2019s go through this step by step:\\n\\n## Step 1 : Authenticate to Azure\\n\\nAzure\u2019s account equivalent is a subscription, the following command from Azure Powershell is used to authenticate a user to one or more subscriptions.\\n\\n```powershell\\nConnect-AzAccount\\n```\\n\\nThis command will open a browser window prompting you for Microsoft credentials, once authenticated you will be returned to the command line.\\n\\n## Step 2 : Create a Resource Group (Azure)\\n\\nA resource group is roughly equivalent to a project in GCP. You will need to supply a Location (equivalent to a GCP region):\\n\\n```powershell\\nNew-AzResourceGroup `\\n  -Name \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\"\\n```\\n\\n## Step 3 : Create a Virtual Network with Subnets and Routes (Azure)\\n\\nAn Azure Virtual Network is the equivalent of a VPC network in GCP (or AWS), you must define subnets before creating a Virtual Network. In this example we will create two subnets, one Gateway subnet (which needs to be named accordingly) where the VPN gateway will reside, and one subnet named \u2018default\u2019 where we will host VMs which will connect to GCP services over the private VPN connection.\\n\\nBefore defining the default subnet we must create and attach a Route Table (equivalent of a Route in GCP), this particular route will be used to route \u2018private\u2019 requests to services in GCP (such as Big Query).\\n\\n```powershell\\n# define route table and route to GCP private access\\n$azroutecfg = New-AzRouteConfig `\\n  -Name \\"google-private\\" `\\n  -AddressPrefix \\"199.36.153.4/30\\" `\\n  -NextHopType \\"VirtualNetworkGateway\\" \\n\\n$azrttbl = New-AzRouteTable `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Name \\"google-private\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -Route $azroutecfg\\n\\n# define gateway subnet\\n$gatewaySubnet = New-AzVirtualNetworkSubnetConfig  `\\n  -Name \\"GatewaySubnet\\" `\\n  -AddressPrefix \\"10.1.2.0/24\\"\\n\\n# define default subnet\\n$defaultSubnet  = New-AzVirtualNetworkSubnetConfig `\\n  -Name \\"default\\" `\\n  -AddressPrefix \\"10.1.1.0/24\\" `\\n  -RouteTable $azrttbl\\n\\n# create virtual network and subnets\\n$vnet = New-AzVirtualNetwork  `\\n  -Name \\"azure-to-gcp-vnet\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -AddressPrefix \\"10.1.0.0/16\\" `\\n  -Subnet $gatewaySubnet,$defaultSubnet\\n```\\n\\n## Step 4 : Create Network Security Groups (Azure)\\n\\nNetwork Security Groups in Azure are stateful firewalls much like Firewall Rules in VPC networks in GCP. Like GCP, the lower priority overrides higher priority rules.\\n\\nIn the example we will create several rules to allow inbound ICMP, TCP and UDP traffic from our Google VPC and RDP traffic from the Internet (which we will use to logon to a VM in Azure to test private connectivity between the two clouds):\\n\\n```powershell\\n# create network security group\\n$rule1 = New-AzNetworkSecurityRuleConfig `\\n  -Name rdp-rule `\\n  -Description \\"Allow RDP\\" `\\n  -Access Allow `\\n  -Protocol Tcp `\\n  -Direction Inbound `\\n  -Priority 100 `\\n  -SourceAddressPrefix Internet `\\n  -SourcePortRange * `\\n  -DestinationAddressPrefix * `\\n  -DestinationPortRange 3389\\n\\n$rule2 = New-AzNetworkSecurityRuleConfig `\\n  -Name icmp-rule `\\n  -Description \\"Allow ICMP\\" `\\n  -Access Allow `\\n  -Protocol Icmp `\\n  -Direction Inbound `\\n  -Priority 101 `\\n  -SourceAddressPrefix * `\\n  -SourcePortRange * `\\n  -DestinationAddressPrefix * `\\n  -DestinationPortRange *\\n\\n$rule3 = New-AzNetworkSecurityRuleConfig `\\n  -Name gcp-rule `\\n  -Description \\"Allow GCP\\" `\\n  -Access Allow `\\n  -Protocol Tcp `\\n  -Direction Inbound `\\n  -Priority 102 `\\n  -SourceAddressPrefix \\"10.2.0.0/16\\" `\\n  -SourcePortRange * `\\n  -DestinationAddressPrefix * `\\n  -DestinationPortRange *\\n\\n$nsg = New-AzNetworkSecurityGroup `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -Name \\"nsg-vm\\" `\\n  -SecurityRules $rule1,$rule2,$rule3\\n```\\n\\n## Step 5 : Create Public IP Addresses (Azure)\\n\\nWe need to create two Public IP Address (equivalent of an External IP in GCP) which will be used for our VPN gateway and for the VM we will create:\\n\\n```powershell\\n# create public IP address for VM\\n$vmpip = New-AzPublicIpAddress `\\n  -Name \\"vm-ip\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -AllocationMethod Dynamic\\n\\n# create public IP address for NW gateway \\n$ngwpip = New-AzPublicIpAddress `\\n  -Name \\"ngw-ip\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -AllocationMethod Dynamic\\n```\\n\\n## Step 6 : Create Virtual Network Gateway (Azure)\\n\\nThe Virtual Network Gateway in Azure is the VPN Gateway equivalent in Azure which will be used to create a VPN tunnel between Azure and a GCP VPN Gateway. This gateway will be placed in the Gateway subnet created previously and one of the Public IP addresses created in the previous step will be assigned to this gateway.\\n\\n```powershell\\n# create virtual network gateway\\n$ngwipconfig = New-AzVirtualNetworkGatewayIpConfig `\\n  -Name \\"ngw-ipconfig\\" `\\n  -SubnetId $gatewaySubnet.Id `\\n  -PublicIpAddressId $ngwpip.Id\\n\\n# use the AsJob switch as this is a long running process\\n$job = New-AzVirtualNetworkGateway -Name \\"vnet-gateway\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -IpConfigurations $ngwipconfig `\\n  -GatewayType \\"Vpn\\" `\\n  -VpnType \\"RouteBased\\" `\\n  -GatewaySku \\"VpnGw1\\" `\\n  -VpnGatewayGeneration \\"Generation1\\" `\\n  -AsJob\\n\\n$vnetgw = Get-AzVirtualNetworkGateway `\\n  -Name \\"vnet-gateway\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\"\\n```\\n\\n## Step 7 : Create a VPC Network and Subnetwork(s) (GCP)\\n\\nA VPC network and subnet need to be created in GCP, the subnet defines the VPC address space. This address space must not overlap with the Azure Virtual Network CIDR. For all GCP steps it is assumed that the project is set for client config (e.g. gcloud config set project __your_project__) so it does not need to be specified for each operation. Private Google access should be enabled on all subnets created.\\n\\n```powershell\\n# creating VPC network and subnets\\ngcloud compute networks create \\"azure-to-gcp-vpc\\" `\\n  --subnet-mode=custom `\\n  --bgp-routing-mode=regional\\n\\ngcloud compute networks subnets create \\"aus-subnet\\" `\\n  --network  \\"azure-to-gcp-vpc\\" `\\n  --range \\"10.2.1.0/24\\" `\\n  --region \\"australia-southeast1\\" `\\n  --enable-private-ip-google-access\\n```\\n\\n## Step 8 : Create an External IP (GCP)\\n\\nAn external IP address will need to be created in GCP which will be used for the external facing interface of the VPN Gateway.\\n\\n```bash\\n# create external IP\\ngcloud compute addresses create \\"ext-gw-ip\\" `\\n  --region \\"australia-southeast1\\"\\n\\n$gcp_ipaddr_obj = gcloud compute addresses describe \\"ext-gw-ip\\" `\\n  --region \\"australia-southeast1\\" `\\n  --format json | ConvertFrom-Json\\n\\n$gcp_ipaddr = $gcp_ipaddr_obj.address\\n```\\n\\n## Step 9 : Create Firewall Rules (GCP)\\n\\nVPC firewall rules will need to be created in GCP to allow VPN traffic as well as SSH traffic from the internet (which allows you to SSH into VM instances using Cloud Shell).\\n\\n```powershell\\n# create VPN firewall rules\\ngcloud compute firewall-rules create \\"vpn-rule1\\" `\\n  --network \\"azure-to-gcp-vpc\\" `\\n  --allow tcp,udp,icmp `\\n  --source-ranges \\"10.1.0.0/16\\"\\n\\ngcloud compute firewall-rules create \\"ssh-rule1\\" `\\n  --network \\"azure-to-gcp-vpc\\" `\\n  --allow tcp:22\\n```\\n\\n## Step 10 : Create VPN Gateway and Forwarding Rules (GCP)\\n\\nCreate a VPN Gateway and Forwarding Rules in GCP which will be used to create a tunnel between GCP and Azure.\\n\\n```powershell\\n# create cloud VPN \\ngcloud compute target-vpn-gateways create \\"vpn-gw\\" `\\n  --network \\"azure-to-gcp-vpc\\" `\\n  --region \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n\\n# create forwarding rule ESP\\ngcloud compute forwarding-rules create \\"fr-gw-name-esp\\" `\\n  --ip-protocol ESP `\\n  --address \\"ext-gw-ip\\" `\\n  --target-vpn-gateway \\"vpn-gw\\" `\\n  --region \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n\\n# creating forwarding rule UDP500\\ngcloud compute forwarding-rules create \\"fr-gw-name-udp500\\" `\\n  --ip-protocol UDP `\\n  --ports 500 `\\n  --address \\"ext-gw-ip\\" `\\n  --target-vpn-gateway \\"vpn-gw\\" `\\n  --region \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n\\n# creating forwarding rule UDP4500\\ngcloud compute forwarding-rules create \\"fr-gw-name-udp4500\\" `\\n  --ip-protocol UDP `\\n  --ports 4500 `\\n  --address \\"ext-gw-ip\\" `\\n  --target-vpn-gateway \\"vpn-gw\\" `\\n  --region \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n```\\n\\n## Step 10 : Create VPN Tunnel (GCP Side)\\n\\nNow we will create the GCP side of our VPN tunnel using the Public IP Address of the Azure Virtual Network Gateway created in a previous step. As this example uses a route based VPN the traffic selector values need to be set at 0.0.0.0/0. A PSK (Pre Shared Key) needs to be supplied which will be the same key used when we configure a VPN Connection on the Azure side of the tunnel.\\n\\n```powershell\\n# get peer public IP address of Azure gateway\\n$azpubip = Get-AzPublicIpAddress `\\n  -Name \\"ngw-ip\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\"\\n\\n# create VPN tunnel \\ngcloud compute vpn-tunnels create \\"vpn-tunnel-to-azure\\" `\\n  --peer-address $azpubip.IpAddress `\\n  --local-traffic-selector \\"0.0.0.0/0\\" `\\n  --remote-traffic-selector \\"0.0.0.0/0\\" `\\n  --ike-version 2 `\\n  --shared-secret << Pre-Shared Key >> `\\n  --target-vpn-gateway \\"vpn-gw\\" `\\n  --region  \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n```\\n\\n## Step 11 : Create Static Routes (GCP Side)\\n\\nAs we are using static routing (as opposed to dynamic routing) we will need to define all of the specific routes on the GCP side. We will need to setup routes for both outgoing traffic to the Azure network as well as incoming traffic for the restricted Google API range (199.36.153.4/30).\\n\\n```powershell\\n# create static route (VPN)\\ngcloud compute routes create \\"route-to-azure\\" `\\n  --destination-range \\"10.1.0.0/16\\" `\\n  --next-hop-vpn-tunnel \\"vpn-tunnel-to-azure\\" `\\n  --network \\"azure-to-gcp-vpc\\" `\\n  --next-hop-vpn-tunnel-region \\"australia-southeast1\\" `\\n  --project \\"azure-to-gcp-project\\"\\n\\n# create static route (Restricted APIs)\\ngcloud compute routes create apis `\\n  --network  \\"azure-to-gcp-vpc\\" `\\n  --destination-range \\"199.36.153.4/30\\" `\\n  --next-hop-gateway default-internet-gateway `\\n  --project \\"azure-to-gcp-project\\"\\n```\\n\\n## Step 12 : Create a Local Gateway (Azure)\\n\\nA Local Gateway in Azure is an object that represents the remote gateway (GCP VPN gateway).\\n\\n```powershell\\n# create local gateway\\n$azlocalgw = New-AzLocalNetworkGateway `\\n  -Name \\"local-gateway\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -GatewayIpAddress $gcp_ipaddr `\\n  -AddressPrefix \\"10.2.0.0/16\\"\\n```\\n\\n## Step 13 : Create a VPN Connection (Azure)\\n\\nNow we can setup the Azure side of the VPN Connection which is accomplished by associating the Azure Virtual Network Gateway with the Local Network Gateway. A PSK (Pre Shared Key) needs to be supplied which is the same key used for the GCP VPN Tunnel in step 10.\\n\\n```powershell\\n# create connection\\n$azvpnconn = New-AzVirtualNetworkGatewayConnection `\\n  -Name \\"vpn-connection\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -VirtualNetworkGateway1 $vnetgw `\\n  -LocalNetworkGateway2 $azlocalgw `\\n  -Location \\"Australia Southeast\\" `\\n  -ConnectionType IPsec `\\n  -SharedKey  << Pre-Shared Key >>  `\\n  -ConnectionProtocol \\"IKEv2\\"\\n```\\n\\nVPN Tunnel Established!\\n\\nAt this stage we have created an end to end connection between the virtual networks in both clouds. You should see this reflected in the respective consoles in each provider.\\n\\n<ImageWithCaption \\nimageSrc={GcpVpnToAzure}\\naltText=\\"GCP VPN Tunnel to a Azure Virtual Network\\"\\n/>\\n\\n<ImageWithCaption \\nimageSrc={AzureVpnToGCP}\\naltText=\\"Azure VPN Connection to a GCP VPC Network\\"\\n/>\\n\\nCongratulations! You have just setup a multi cloud environment using private networking. Now let\u2019s setup Google Private Access for Azure hosts and create VMs on each side to test our setup.\\n\\n## Step 14 : Create a Private DNS Zone for googleapis.com (Azure)\\n\\nWe will now need to create a Private DNS zone in Azure for the googleapis.com domain which will host records to redirect Google API requests to the Restricted API range.\\n\\n```powershell\\n# create private DNS zone\\nNew-AzPrivateDnsZone `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Name \\"googleapis.com\\"\\n\\n# Add A Records   \\n$Records = @()\\n$Records += New-AzPrivateDnsRecordConfig `\\n  -IPv4Address 199.36.153.4\\n$Records += New-AzPrivateDnsRecordConfig `\\n  -IPv4Address 199.36.153.5\\n$Records += New-AzPrivateDnsRecordConfig `\\n  -IPv4Address 199.36.153.6\\n$Records += New-AzPrivateDnsRecordConfig `\\n  -IPv4Address 199.36.153.7\\n\\nNew-AzPrivateDnsRecordSet `\\n  -Name \\"restricted\\" `\\n  -RecordType A `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -TTL 300 `\\n  -ZoneName \\"googleapis.com\\" `\\n  -PrivateDnsRecords $Records\\n\\n# Add CNAME Records   \\n$Records = @()\\n$Records += New-AzPrivateDnsRecordConfig `\\n  -Cname \\"restricted.googleapis.com.\\"\\n\\nNew-AzPrivateDnsRecordSet `\\n  -Name \\"*\\" `\\n  -RecordType CNAME `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -TTL 300 `\\n  -ZoneName \\"googleapis.com\\" `\\n  -PrivateDnsRecords $Records\\n\\n# Create VNet Link\\nNew-AzPrivateDnsVirtualNetworkLink `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -ZoneName \\"googleapis.com\\" `\\n  -Name \\"dns-zone-link\\" `\\n  -VirtualNetworkId $vnet.Id\\n```\\n\\n## Step 15 : Create a Virtual Machine (Azure)\\n\\nWe will create a VM in Azure which we can use to test the VPN tunnel as well as to test Private Google Access over our VPN tunnel.\\n\\n```powershell\\n# create VM\\n$az_vmlocaladminpwd = ConvertTo-SecureString << Password Param >> `\\n  -AsPlainText -Force\\n$Credential = New-Object System.Management.Automation.PSCredential  (\\"LocalAdminUser\\", $az_vmlocaladminpwd);\\n\\n$nic = New-AzNetworkInterface `\\n  -Name \\"vm-nic\\" `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -SubnetId $defaultSubnet.Id `\\n  -NetworkSecurityGroupId $nsg.Id `\\n  -PublicIpAddressId $vmpip.Id `\\n  -EnableAcceleratedNetworking `\\n  -Force\\n\\n$VirtualMachine = New-AzVMConfig `\\n  -VMName \\"windows-desktop\\" `\\n  -VMSize \\"Standard_D4_v3\\"\\n\\n$VirtualMachine = Set-AzVMOperatingSystem `\\n  -VM $VirtualMachine `\\n  -Windows `\\n  -ComputerName  \\"windows-desktop\\" `\\n  -Credential $Credential `\\n  -ProvisionVMAgent `\\n  -EnableAutoUpdate\\n\\n$VirtualMachine = Add-AzVMNetworkInterface `\\n  -VM $VirtualMachine `\\n  -Id $nic.Id\\n\\n$VirtualMachine = Set-AzVMSourceImage `\\n  -VM $VirtualMachine `\\n  -PublisherName \'MicrosoftWindowsDesktop\' `\\n  -Offer \'Windows-10\' `\\n  -Skus \'rs5-pro\' `\\n  -Version latest\\n\\nNew-AzVM `\\n  -ResourceGroupName \\"azure-to-gcp\\" `\\n  -Location \\"Australia Southeast\\" `\\n  -VM $VirtualMachine `\\n  -Verbose\\n```\\n\\n## Step 16 : Create a VM Instance (GCP)\\n\\nWe will create a Linux VM in GCP to test connectivity to hosts in Azure using the VPN tunnel we have established.\\n\\n```powershell\\n# create VM instance\\ngcloud compute instances create \\"gcp-instance\\" `\\n  --zone \\"australia-southeast1-b\\" `\\n  --machine-type \\"f1-micro\\" `\\n  --subnet \\"aus-subnet\\" `\\n  --network-tier PREMIUM `\\n  --maintenance-policy MIGRATE `\\n  --image=debian-9-stretch-v20200309 `\\n  --image-project=debian-cloud `\\n  --boot-disk-size 10GB `\\n  --boot-disk-type pd-standard `\\n  --boot-disk-device-name instance-1 `\\n  --reservation-affinity any\\n```\\n\\n## Test Connectivity\\n\\nNow we are ready to test connectivity from both sides of the tunnel.\\n\\n### Azure to GCP\\n\\nEstablish a remote desktop (RDP) connection to the Azure VM created in Step 15. Ping the GCP VM instance using its private IP address.\\n\\n[![Test Private IP Connectivity from Azure to GCP](images/azure-ping-to-gcp.png)](images/azure-ping-to-gcp.png)\\n\\n### GCP to Azure\\n\\nNow SSH into the GCP Linux VM instance and ping the Azure host using its private IP address.\\n\\n[![Test Private IP Connectivity from GCP to Azure](images/gcp-ping-to-azure.png)](images/gcp-ping-to-azure.png)\\n\\n## Test Private Google Access from Azure\\n\\nNow that we have established bi-directional connectivity between the two clouds, we can test private access to Google APIs from our Azure host. Follow the steps below to test private access:\\n\\n1. RDP into the Azure VM\\n2. Install the Google Cloud SDK ( [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/))\\n3. Perform an `nslookup` to ensure that calls to googleapis.com resolve to the restricted API range (e.g. `nslookup storage.googleapis.com`). You should see a response showing the A records from the googleapis.com Private DNS Zone created in step 14.\\n4. Now test connectivity to Google APIs, for example to test access to Google Cloud Storage using `gsutil`, or test access to Big Query using the `bq` command\\n\\nCongratulations! You are now a multi cloud ninja!"},{"id":"spark-in-the-google-cloud-platform-part-2","metadata":{"permalink":"/spark-in-the-google-cloud-platform-part-2","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-02-29-spark-in-the-google-cloud-platform-part-2/index.md","source":"@site/blog/2020-02-29-spark-in-the-google-cloud-platform-part-2/index.md","title":"Spark in the Google Cloud Platform Part 2","description":"In the previous post in this series Spark in the Google Cloud Platform Part 1, we started to explore the various ways in which we could deploy Apache Spark applications in GCP. The first option we looked at was deploying Spark using Cloud DataProc, a managed Hadoop cluster with various ecosystem components included.","date":"2020-02-29T00:00:00.000Z","formattedDate":"February 29, 2020","tags":[{"label":"apache-spark","permalink":"/tags/apache-spark"},{"label":"cloud-dataproc","permalink":"/tags/cloud-dataproc"},{"label":"dataproc","permalink":"/tags/dataproc"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"gke","permalink":"/tags/gke"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"kubernetes","permalink":"/tags/kubernetes"},{"label":"spark","permalink":"/tags/spark"}],"readingTime":4.995,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"spark-in-the-google-cloud-platform-part-2","title":"Spark in the Google Cloud Platform Part 2","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/spark-gcp-featured-image.png","tags":["apache-spark","cloud-dataproc","dataproc","gcp","gke","google-cloud-platform","googlecloudplatform","kubernetes","spark"],"keywords":["apache-spark","cloud-dataproc","dataproc","gcp","gke","google-cloud-platform","googlecloudplatform","kubernetes","spark"]},"prevItem":{"title":"Creating a Site to Site VPN Connection Between GCP and Azure with Google Private Access","permalink":"/creating-a-site-to-site-vpn-connection-between-gcp-and-azure-with-google-private-access"},"nextItem":{"title":"Spark in the Google Cloud Platform Part 1","permalink":"/spark-in-the-google-cloud-platform-part-1"}},"content":"import Gist from \'react-gist\';\\n\\nIn the previous post in this series [__Spark in the Google Cloud Platform Part 1__](https://cloudywithachanceofbigdata.com/spark-in-the-google-cloud-platform-part-1/), we started to explore the various ways in which we could deploy Apache Spark applications in GCP. The first option we looked at was deploying Spark using Cloud DataProc, a managed Hadoop cluster with various ecosystem components included.\\n\\n:::note Spark Training Courses\\n\\n[Data Transformation and Analysis Using Apache Spark](https://academy.alphazetta.ai/data-transformation-and-analysis-using-apache-spark/)  \\n[Stream and Event Processing using Apache Spark](https://academy.alphazetta.ai/stream-and-event-processing-using-apache-spark/)  \\n[Advanced Analytics Using Apache Spark](https://academy.alphazetta.ai/advanced-analytics-using-apache-spark/)\\n\\n:::\\n\\nIn this post, we will look at another option for deploying Spark in GCP \u2013 _a Spark Standalone cluster running on GKE_.\\n\\nSpark Standalone refers to the in-built cluster manager provided with each Spark release. Standalone can be a bit of a misnomer as it sounds like a single instance \u2013 which it is not, standalone simply refers to the fact that it is not dependent upon any other projects or components \u2013 such as Apache YARN, Mesos, etc.\\n\\nA Spark Standalone cluster consists of a Master node or instance and one of more Worker nodes. The Master node serves as both a master and a cluster manager in the Spark runtime architecture.\\n\\nThe Master process is responsible for marshalling resource requests on behalf of applications and monitoring cluster resources.\\n\\nThe Worker nodes host one or many Executor instances which are responsible for carrying out tasks.\\n\\nDeploying a Spark Standalone cluster on GKE is reasonably straightforward. In the example provided in this post we will set up a private network (VPC), create a GKE cluster, and deploy a Spark Master pod and two Spark Worker pods (in a real scenario you would typically have many Worker pods).\\n\\nOnce the network and GKE cluster have been deployed, the first step is to create Docker images for both the Master and Workers.\\n\\nThe `Dockerfile` below can be used to create an image capable or running either the Worker or Master daemons:\\n\\n<Gist id=\\"a2828409021205b3f6587c824c59928d\\" \\n/>\\n\\nNote the shell scripts included in the `Dockerfile`: `spark-master` and `spark-worker`. These will be used later on by K8S deployments to start the relative Master and Worker daemon processes in each of the pods.\\n\\nNext, we will use Cloud Build to build an image using the `Dockerfile` are store this in GCR (Google Container Registry), from the Cloud Build directory in our project we will run:\\n\\n```\\ngcloud builds submit --tag gcr.io/spark-demo-266309/spark-standalone\\n```\\n\\nNext, we will create Kubernetes deployments for our Master and Worker pods.\\n\\nFirstly, we need to get cluster credentials for our GKE cluster named \u2018spark-cluster\u2019:\\n\\n```\\ngcloud container clusters get-credentials spark-cluster --zone australia-southeast1-a --project spark-demo-266309\\n```\\n\\nNow from within the `k8s-deployments\\\\deploy` folder of our project we will use the `kubectl` command to deploy the Master pod, service and the Worker pods\\n\\nStarting with the Master deployment, this will deploy our Spark Standalone image into a container running the Master daemon process:\\n\\n<Gist id=\\"31bca11627167e0cd963103e4c7f11d2\\" \\n/>\\n\\nTo deploy the Master, run the following:\\n\\n```\\nkubectl create -f spark-master-deployment.yaml\\n```\\n\\nThe Master will expose a web UI on port 8080 and an RPC service on port 7077, we will need to deploy a K8S service for this, the YAML required to do this is shown here:\\n\\n<Gist id=\\"a72d3c38d7a3f94e88c7affd28a3034b\\" \\n/>\\n\\nTo deploy the Master service, run the following:\\n\\n```\\nkubectl create -f spark-master-service.yaml\\n```\\n\\nNow that we have a Master pod and service up and running, we need to deploy our Workers which are preconfigured to communicate with the Master service.\\n\\nThe YAML required to deploy the two Worker pods is shown here:\\n\\n<Gist id=\\"97ceb93ed35959c41d80fb8c025a7ba1\\" \\n/>\\n\\nTo deploy the Worker pods, run the following:\\n\\n```\\nkubectl create -f spark-worker-deployment.yaml\\n```\\n\\nYou can now inspect the Spark processes running on your GKE cluster.\\n\\n```\\nkubectl get deployments\\n```\\n\\nShows...\\n\\n```\\nNAME           READY   UP-TO-DATE   AVAILABLE   AGE\\n spark-master   1/1     1            1           7m45s\\n spark-worker   2/2     2            2           9s\\n```\\n```\\nkubectl get pods\\n```\\n\\nShows...\\n\\n```\\nNAME                            READY   STATUS    RESTARTS   AGE\\n spark-master-f69d7d9bc-7jgmj    1/1     Running   0          8m\\n spark-worker-55965f669c-rm59p   1/1     Running   0          24s\\n spark-worker-55965f669c-wsb2f   1/1     Running   0          24s\\n```\\nNext, as we need to expose the Web UI for the Master process we will create a _LoadBalancer_ resource. The YAML used to do this is provided here:\\n\\n<Gist id=\\"56ee86f50f329f99679ff243bb00fb07\\" \\n/>\\n\\nTo deploy the LB, you would run the following:\\n\\n```\\nkubectl create -f spark-ui-lb.yaml\\n```\\n\\n__NOTE__ This is just an example, for simplicity we are creating an external _LoadBalancer_ with a public IP, this configuration is likely not be appropriate in most real scenarios, alternatives would include an internal _LoadBalancer_, retraction of Authorized Networks, a jump host, SSH tunnelling or IAP.\\n\\nNow you\u2019re up and running!\\n\\nYou can access the Master web UI from the Google Console link shown here:\\n\\n[![Accessing the Spark Master UI from the Google Cloud Console](images/master-ui-link.png)](images/master-ui-link.png)\\n\\nThe Spark Master UI should look like this:\\n\\n[![Spark Master UI](images/spark-master-ui.png)](images/spark-master-ui.png)\\n\\nNext we will exec into a Worker pod, get a shell:\\n\\n```\\nkubectl exec -it spark-worker-55965f669c-rm59p -- sh\\n```\\n\\nNow from within the shell environment of a Worker \u2013 which includes all of the Spark client libraries, we will submit a simple Spark application:\\n\\n```\\nspark-submit --class org.apache.spark.examples.SparkPi \\\\\\n --master spark://10.11.250.98:7077 \\\\\\n/opt/spark/examples/jars/spark-examples*.jar 10000\\n```\\n\\nYou can see the results in the shell, as shown here:\\n\\n[![Spark Pi Estimator Example](images/spark-application-example.png)](images/spark-application-example.png)\\n\\nAdditionally, as all of the container logs go to Stackdriver, you can view the application logs there as well:\\n\\n[![Container Logs in StackDriver](images/container-logs-in-stackdriver.png)](images/container-logs-in-stackdriver.png)\\n\\nThis is a simple way to get a Spark cluster running, it is not without its downsides and shortcomings however, which include the limited security mechanisms available (SASL, network security, shared secrets).\\n\\nIn the final post in this series we will look at Spark on Kubernetes, using Kubernetes as the Spark cluster manager and interacting with Spark using the Kubernetes API and control plane, see you then.\\n\\n> Full source code for this article is available at: [https://github.com/gamma-data/spark-on-gcp](https://github.com/gamma-data/spark-on-gcp)\\n\\nThe infrastructure coding for this example uses Powershell and Terraform, and is deployed as follows:\\n\\n```powershell\\nPS > .\\\\run.ps1 private-network apply <gcp-project> <region>\\nPS > .\\\\run.ps1 gke apply <gcp-project> <region>\\n```"},{"id":"spark-in-the-google-cloud-platform-part-1","metadata":{"permalink":"/spark-in-the-google-cloud-platform-part-1","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-02-14-spark-in-the-google-cloud-platform-part-1/index.md","source":"@site/blog/2020-02-14-spark-in-the-google-cloud-platform-part-1/index.md","title":"Spark in the Google Cloud Platform Part 1","description":"I have been an avid Spark enthusiast since 2014 (the early days..). Spark has featured heavily in every project I have been involved with from data warehousing, ETL, feature extraction, advanced analytics to event processing and IoT applications. I like to think of it as a Swiss army knife for distributed processing.","date":"2020-02-14T00:00:00.000Z","formattedDate":"February 14, 2020","tags":[{"label":"apache-spark","permalink":"/tags/apache-spark"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"spark","permalink":"/tags/spark"}],"readingTime":5.04,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"spark-in-the-google-cloud-platform-part-1","title":"Spark in the Google Cloud Platform Part 1","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/spark-gcp-featured-image.png","tags":["apache-spark","gcp","google-cloud-platform","googlecloudplatform","spark"],"keywords":["apache-spark","gcp","google-cloud-platform","googlecloudplatform","spark"]},"prevItem":{"title":"Spark in the Google Cloud Platform Part 2","permalink":"/spark-in-the-google-cloud-platform-part-2"},"nextItem":{"title":"Query Cloud SQL through Big Query","permalink":"/query-cloud-sql-through-big-query"}},"content":"I have been an avid Spark enthusiast since 2014 (the early days..). Spark has featured heavily in every project I have been involved with from data warehousing, ETL, feature extraction, advanced analytics to event processing and IoT applications. I like to think of it as a Swiss army knife for distributed processing.\\n\\n:::note Spark Training Courses\\n\\n[Data Transformation and Analysis Using Apache Spark](https://academy.alphazetta.ai/data-transformation-and-analysis-using-apache-spark/)  \\n[Stream and Event Processing using Apache Spark](https://academy.alphazetta.ai/stream-and-event-processing-using-apache-spark/)  \\n[Advanced Analytics Using Apache Spark](https://academy.alphazetta.ai/advanced-analytics-using-apache-spark/)\\n\\n:::\\n\\nCuriously enough, the first project I had been involved with for some years that did not feature the Apache Spark project was a green field GCP project which got me thinking\u2026 where does Spark fit into the GCP landscape?\\n\\nUnlike the other major providers who use Spark as the backbone of their managed distributed ETL services with examples such as AWS Glue or the Spark integration runtime option in Azure Data Factory, Google\u2019s managed ETL solution is Cloud DataFlow. Cloud DataFlow which is a managed Apache Beam service does not use a Spark runtime (there is a Spark Runner however this is not an option when using CDF). So where does this leave Spark?\\n\\nMy summation is that although Spark is not a first-class citizen in GCP (as far as managed ETL), it is not a second-class citizen either. This article will discuss the various ways Spark clusters and applications can be deployed within the GCP ecosystem.\\n\\n## Quick Primer on Spark\\n\\nEvery Spark application contains several components regardless of deployment mode, the components in the Spark runtime architecture are:\\n\\n- the Driver\\n- the Master\\n- the Cluster Manager\\n- the Executor(s), which run on worker nodes or Workers\\n\\nEach component has a specific role in executing a Spark program and all of the Spark components run in Java virtual machines (JVMs).\\n\\n[![Spark Runtime Architecture](images/spark-runtime.png)](images/spark-runtime.png)\\n\\nCluster Managers schedule and manage distributed resources (compute and memory) across the nodes of the cluster. Cluster Managers available for Spark include:\\n\\n- Standalone\\n- YARN (Hadoop)\\n- Mesos\\n- Kubernetes\\n\\n## Spark on DataProc\\n\\nThis is perhaps the simplest and most integrated approach to using Spark in the GCP ecosystem.\\n\\nDataProc is GCP\u2019s managed Hadoop Service (akin to AWS EMR or HDInsight on Azure). DataProc uses Hadoop/YARN as the Cluster Manager. DataProc clusters can be deployed on a private network (VPC using RFC1918 address space), supports encryption at Rest using Google Managed or Customer Managed Keys in KMS, supports autoscaling and the use of Preemptible Workers, and can be deployed in a HA config.\\n\\nFurthermore, DataProc clusters can enforce strong authentication using Kerberos which can be integrated into other directory services such as Active Directory through the use of cross realm trusts.\\n\\n### Deployment\\n\\nDataProc clusters can be deployed using the `gcloud dataproc clusters create` command or using IaC solutions such as Terraform. For this article I have included an example in the source code using the `gcloud` command to deploy a DataProc cluster on a private network which was created using Terraform.\\n\\n### Integration\\n\\nThe beauty of DataProc is its native integration into IAM and the GCP service plane. Having been a long-time user of AWS EMR, I have found that the usability and integration are in many ways superior in GCP DataProc. Let\u2019s look at some examples...\\n\\n#### IAM and IAP (TCP Forwarding)\\n\\nDataProc is integrated into Cloud IAM using various coarse grained permissions use as `dataproc.clusters.use` and simplified IAM Roles such as `dataproc.editor` or `dataproc.admin`. Members with bindings to the these roles can perform tasks such as submitting jobs and creating workflow templates (which we will discuss shortly), as well as accessing instances such as the master node instance or instances in the cluster using IAP (TCP Forwarding) without requiring a public IP address or a bastion host.\\n\\n#### DataProc Jobs and Workflows\\n\\nSpark jobs can be submitted using the console or via `gcloud dataproc jobs submit` as shown here:\\n\\n[![Submitting a Spark Job using gcloud dataproc jobs submit](images/dataproc-spark-job.png)](images/dataproc-spark-job.png)\\n\\nCluster logs are natively available in StackDriver and standard out from the Spark Driver is visible from the console as well as via `gcloud` commands.\\n\\nComplex Workflows can be created by adding Jobs as Steps in Workflow Templates using the following command:\\n\\n```\\ngcloud dataproc workflow-templates add-job spark\\n```\\n\\n#### Optional Components and the Component Gateway\\n\\nDataProc provides you with a Hadoop cluster including YARN and HDFS, a Spark runtine \u2013 which includes Spark SQL and SparkR. DataProc also supports several optional components including Anaconda, Jupyter, Zeppelin, Druid, Presto, and more.\\n\\nWeb interfaces to some of these components as well as the management interfaces such as the Resource Manager UI or the Spark History Server UI can be accessed through the Component Gateway.\\n\\nThis is a Cloud IAM integrated gateway (much like IAP) which can allow access through an authenticated and authorized console session to web UIs in the cluster \u2013 without the need for SSH tunnels, additional firewall rules, bastion hosts, or public IPs. Very cool.\\n\\nLinks to the component UIs as well as built in UIs like the YARN Resource Manager UI are available directly from through the console.\\n\\n#### Jupyter\\n\\nJupyter is a popular notebook application in the data science and analytics communities used for reproducible research. DataProc\u2019s Jupyter component provides a ready-made Spark application vector using PySpark. If you have also installed the Anaconda component you will have access to the full complement of scientific and mathematic Python packages such as Pandas and NumPy which can be used in Jupyter notebooks as well. Using the Component Gateway, Jupyer notebooks can be accessed directly from the Google console as shown here:\\n\\n[![Jupyter Notebooks using DataProc](images/dataproc-jupyter-notebook.png)](images/dataproc-jupyter-notebook.png)\\n\\nFrom this example you can see that I accessed source data from a GCS bucket and used HDFS as local scratch space.\\n\\nFurthermore, notebooks are automagically saved in your integrated Cloud Storage DataProc staging bucket and can be shared amongst analysts or accessed at a later time. These notebooks also persist beyond the lifespan of the cluster.\\n\\nNext up we will look at deploying a Spark Standalone cluster on a GKE cluster, see you then!"},{"id":"query-cloud-sql-through-big-query","metadata":{"permalink":"/query-cloud-sql-through-big-query","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-02-08-query-cloud-sql-through-big-query/index.md","source":"@site/blog/2020-02-08-query-cloud-sql-through-big-query/index.md","title":"Query Cloud SQL through Big Query","description":"This article demonstrates Cloud SQL federated queries for Big Query, a neat and simple to use feature.","date":"2020-02-08T00:00:00.000Z","formattedDate":"February 8, 2020","tags":[{"label":"big-query","permalink":"/tags/big-query"},{"label":"bigquery","permalink":"/tags/bigquery"},{"label":"cloudsql","permalink":"/tags/cloudsql"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"}],"readingTime":3.78,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"query-cloud-sql-through-big-query","title":"Query Cloud SQL through Big Query","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/cloud-sql-federated-queries.png","tags":["big-query","bigquery","cloudsql","gcp","google-cloud-platform","googlecloudplatform"],"keywords":["big-query","bigquery","cloudsql","gcp","google-cloud-platform","googlecloudplatform"]},"prevItem":{"title":"Spark in the Google Cloud Platform Part 1","permalink":"/spark-in-the-google-cloud-platform-part-1"},"nextItem":{"title":"Google Cloud SQL \u2013 Availability for PostgreSQL \u2013 Part II (Read Replicas)","permalink":"/google-cloud-sql-availability-for-postgresql-read-replicas"}},"content":"import Gist from \'react-gist\';\\n\\nThis article demonstrates Cloud SQL federated queries for Big Query, a neat and simple to use feature.\\n\\n## Connecting to Cloud SQL\\n\\nOne of the challenges presented when using Cloud SQL on a private network (VPC) is providing access to users. There are several ways to accomplish this which include:\\n\\n- open the database port on the VPC Firewall (5432 for example for Postgres) and let users access the database using a command line or locally installed GUI tool _(may not be allowed in your environment)_\\n- provide a web based interface deployed on your VPC such as PGAdmin deployed on a GCE instance or GKE pod _(adds security and management overhead)_\\n- use the Cloud SQL proxy _(requires additional software to be installed and configured)_\\n\\nIn additional, all of the above solutions require direct IP connectivity to the instance which may not always be available. Furthermore each of these operations requires the user to present some form of authentication \u2013 in many cases the database user and password which then must be managed at an individual level.\\n\\nEnter Cloud SQL federated queries for Big Query\u2026\\n\\n## Big Query Federated Queries for Cloud SQL\\n\\nBig Query allows you to query tables and views in Cloud SQL (currently MySQL and Postgres) using the Federated Queries feature. The queries could be authorized views in Big Query datasets for example.\\n\\nThis has the following advantages:\\n\\n- Allows users to authenticate and use the GCP console to query Cloud SQL\\n- Does not require direct IP connectivity to the user or additional routes or firewall rules\\n- Leverages Cloud IAM as the authorization mechanism \u2013 rather that unmanaged db user accounts and object level permissions\\n- External queries can be executed against a read replica of the Cloud SQL instance to offload query IO from the master instance\\n\\n## Setting it up\\n\\nSetting up big query federated queries for Cloud SQL is exceptionally straightforward, a summary of the steps are provided below:\\n\\n### Step 1. Enable a Public IP on the Cloud SQL instance\\n\\nThis sounds bad, but it isn\u2019t really that bad. You need to enable a public interface for Big Query to be able to establish a connection to Cloud SQL, however this is not accessed through the actual public internet \u2013 rather it is accessed through the Google network using the back end of the front end if you will.\\n\\nFurthermore, you configure an empty list of authorized networks which effectively shields the instance from the public network, this can be configured in Terraform as shown here:\\n\\n<Gist id=\\"81c57a80a7e588b98ea7d294dbaee242\\" \\n/>\\n\\nThis configuration change can be made to a running instance as well as during the initial provisioning of the instance.\\n\\nAs shown below you will get a warning dialog in the console saying that you have no authorized networks - this is by design.\\n\\n[![Cloud SQL Public IP Enabled with No Authorized Networks](images/cloud-sql-publicip-screenshot.png)](images/cloud-sql-publicip-screenshot.png)\\n\\n### Step 2. Create a Big Query dataset which will be used to execute the queries to Cloud SQL\\n\\nConnections to Cloud SQL are defined in a Big Query dataset, this can also be use to control access to Cloud SQL using authorized views controlled by IAM roles.\\n\\n<Gist id=\\"8a4beaab134a1c72613347b5822d1724\\" \\n/>\\n\\n### Step 3. Create a connection to Cloud SQL\\n\\nTo create a connection to Cloud SQL from Big Query you must first enable the BigQuery Connection API, this is done at a project level.\\n\\nAs this is a fairly recent feature there isn\'t great coverage with either the **`bq`** tool or any of the Big Query client libraries to do this so we will need to use the console for now...\\n\\nUnder the _**Resources**_ -> **_Add Data_** link in the left hand panel of the Big Query console UI, select **_Create Connection_**. You will see a side info panel with a form to enter connection details for your Cloud SQL instance.\\n\\nIn this example I will setup a connection to a Cloud SQL read replica instance I have created:\\n\\n[![](images/big-query-add-connection.png)](images/big-query-add-connection.png)\\n\\nCreating a Big Query Connection to Cloud SQL\\n\\nMore information on the Big Query Connections API can be found at: [https://cloud.google.com/bigquery/docs/reference/bigqueryconnection/rest](https://cloud.google.com/bigquery/docs/reference/bigqueryconnection/rest)\\n\\nThe following permissions are associated with connections in Big Query:\\n\\n```\\nbigquery.connections.create  \\nbigquery.connections.get  \\nbigquery.connections.list  \\nbigquery.connections.use  \\nbigquery.connections.update  \\nbigquery.connections.delete\\n```\\n\\nThese permissions are conveniently combined into the following predefined roles:\\n\\n```\\nroles/bigquery.connectionAdmin    (BigQuery Connection Admin)         \\nroles/bigquery.connectionUser     (BigQuery Connection User)          \\n```\\n\\n### Step 4. Query away!\\n\\nNow the connection to Cloud SQL can be accessed using the **`EXTERNAL_QUERY`** function in Big Query, as shown here:\\n\\n[![Querying Cloud SQL from Big Query](images/cloud-sql-federated-queries-screenshot.png)](images/cloud-sql-federated-queries-screenshot.png)"},{"id":"google-cloud-sql-availability-for-postgresql-read-replicas","metadata":{"permalink":"/google-cloud-sql-availability-for-postgresql-read-replicas","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-01-24-google-cloud-sql-availability-for-postgresql-read-replicas/index.md","source":"@site/blog/2020-01-24-google-cloud-sql-availability-for-postgresql-read-replicas/index.md","title":"Google Cloud SQL \u2013 Availability for PostgreSQL \u2013 Part II (Read Replicas)","description":"In this post we will look at read replicas as an additional method to achieve multi zone availability for Cloud SQL, which gives us - in turn - the ability to offload (potentially expensive) IO operations such as user created backups or read operations without adding load to the master instance.","date":"2020-01-24T00:00:00.000Z","formattedDate":"January 24, 2020","tags":[{"label":"cloudsql","permalink":"/tags/cloudsql"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"ha","permalink":"/tags/ha"},{"label":"highavailability","permalink":"/tags/highavailability"},{"label":"postgresql","permalink":"/tags/postgresql"}],"readingTime":4.125,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"google-cloud-sql-availability-for-postgresql-read-replicas","title":"Google Cloud SQL \u2013 Availability for PostgreSQL \u2013 Part II (Read Replicas)","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/cloudsql-featured-image.png","tags":["cloudsql","gcp","google-cloud-platform","googlecloudplatform","ha","highavailability","postgresql"],"keywords":["cloudsql","gcp","google-cloud-platform","googlecloudplatform","ha","highavailability","postgresql"]},"prevItem":{"title":"Query Cloud SQL through Big Query","permalink":"/query-cloud-sql-through-big-query"},"nextItem":{"title":"Introducing Service Mesh Part II","permalink":"/introducing-service-mesh-part-ii"}},"content":"import Gist from \'react-gist\';\\nimport ImageWithCaption from \'/js/ImageWithCaption/ImageWithCaption.js\';\\nimport SetupImage1 from \'./images/cloud-sql-postgres-read-replicas-1.png\';\\nimport SetupImage2 from \'./images/cloud-sql-postgres-read-replicas-2.png\';\\nimport SetupImage3 from \'./images/cloud-sql-postgres-read-replicas-3.png\';\\nimport SetupImage4 from \'./images/cloud-sql-postgres-read-replicas-4.png\';\\nimport SetupImage5 from \'./images/cloud-sql-postgres-read-replicas-5.png\';\\nimport SetupImage6 from \'./images/cloud-sql-postgres-read-replicas-6.png\';\\nimport SetupImage7 from \'./images/cloud-sql-postgres-read-replicas-7.png\';\\nimport SetupImage8 from \'./images/cloud-sql-postgres-read-replicas-8.png\';\\nimport SetupImage9 from \'./images/cloud-sql-postgres-read-replicas-9.png\';\\n\\nIn this post we will look at read replicas as an additional method to achieve multi zone availability for Cloud SQL, which gives us - in turn - the ability to offload (potentially expensive) IO operations such as user created backups or read operations without adding load to the master instance.\\n\\nIn the previous post in this series we looked at Regional availability for PostgreSQL HA using Cloud SQL:\\n\\n[__Google Cloud SQL \u2013 Availability, Replication, Failover for PostgreSQL \u2013 Part I__](https://cloudywithachanceofbigdata.com/google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql-part-i/)\\n\\nRecall that this option was simple to implement and worked relatively seamlessly and transparently with respect to zonal failover.\\n\\nNow let\'s look at read replicas in Cloud SQL as an additional measure for availability.\\n\\n## Deploying Read Replica(s)\\n\\nDeploying read replicas is slightly more involved than simple regional (high) availability, as you will need to define each replica or replicas as a separate Cloud SQL instance which is a slave to the primary instance (the master instance).\\n\\nAn example using Terraform is provided here, starting by creating the master instance:\\n\\n<Gist id=\\"34371a3c7edab140e70208cd7710c25a\\" \\n/>\\n\\nNext you would specify one or more read replicas (typically in a zone other than the zone the master is in):\\n\\n<Gist id=\\"980f2d6461db0613b4090413041b5ec5\\" \\n/>\\n\\nNote that several of the options supplied are omitted when creating a read replica database instance, such as the backup and maintenance options - as these operations cannot be performed on a read replica as we will see later.\\n\\n<ImageWithCaption \\nimageSrc={SetupImage1}\\naltText=\\"Cloud SQL Instances - showing master and replica\\"\\n/>\\n\\n<ImageWithCaption \\nimageSrc={SetupImage2}\\naltText=\\"Cloud SQL Master Instance\\"\\n/>\\n\\nVoila! You have just set up a master instance (the primary instance your application and/or users will connect to) along with a read replica in a different zone which will be asynchronously updated as changes occur on the master instance.\\n\\n## Read Replicas in Action\\n\\nNow that we have created a read replica, lets see it in action. After connecting to the read replica (like you would any other instance), attempt to access a table that has **_not_** been created on the master as shown here:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage3}\\naltText=\\"SELECT operation from the replica instance\\"\\n/>\\n\\nNow create the table and insert some data on the **_master_** instance:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage4}\\naltText=\\"Create a table and insert a record on the master instance\\"\\n/>\\n\\nNow try the select operation on the **_replica_** instance:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage5}\\naltText=\\"SELECT operation from the replica instance (after changes have been made on the master)\\"\\n/>\\n\\nIt works!\\n\\n## Some Points to Note about Cloud SQL Read Replicas\\n\\n- Users connect to a read replica as a normal database connection (as shown above)\\n- Google managed backups (using the console or `gcloud sql backups create ..` ) can **_NOT_** be performed against replica instances\\n- Read replicas can be used to offload IO intensive operations from the the master instance - such as user managed backup operations (e.g. `pg_dump`)\\n\\n<ImageWithCaption \\nimageSrc={SetupImage6}\\naltText=\\"pg_dump operation against a replica instance\\"\\n/>\\n\\n- **BE CAREFUL** Despite their name, read replicas are **NOT** read only, updates can be made which will NOT propagate back to the master instance - you could get yourself in an awful mess if you allow users to perform `INSERT`, `UPDATE`, `DELETE`, `CREATE` or `DROP` operations against replica instances.\\n\\n## Promoting a Read Replica\\n\\nIf required a read replica can be promoted to a standalone Cloud SQL instance, which is another DR option. Keep in mind however as the read replica is updated in an asynchronous manner, promotion of a read replica may result in a loss of data (hopefully not much but a loss nonetheless). Your application RPO will dictate if this is acceptable or not.\\n\\nPromotion of a read replica is reasonably straightforward as demonstrated here using the console:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage7}\\naltText=\\"Promoting a read replica using the console\\"\\n/>\\n\\nYou can also use the following `gcloud` command:\\n\\n gcloud sql instances promote-replica  <replica\\\\_instance\\\\_name>\\n\\nOnce you click on the _Promote Replica_ button you will see the following warning:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage8}\\naltText=\\"\\"\\n/>\\n\\n_Promoting a read replica using the console_\\n\\nThis simply states that once you promote the replica instance your instance will become an independent instance with no further relationship with the master instance. Once accepted and the promotion process is complete, you can see that you now have two independent Cloud SQL instances (as advertised!):\\n\\n<ImageWithCaption \\nimageSrc={SetupImage9}\\naltText=\\"Promoted Cloud SQL instance\\"\\n/>\\n\\nSome of the options you would normally configure with a master instance would need to be configured on the promoted replica instance - such as high availability, maintenance and scheduled backups - but in the event of a zonal failure you would be back up and running with virtually no data loss!\\n\\n> Full source code for this article is available at: [https://github.com/gamma-data/cloud-sql-postgres-availability-tutorial](https://github.com/gamma-data/cloud-sql-postgres-availability-tutorial)"},{"id":"introducing-service-mesh-part-ii","metadata":{"permalink":"/introducing-service-mesh-part-ii","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-01-21-introducing-service-mesh-part-ii/index.md","source":"@site/blog/2020-01-21-introducing-service-mesh-part-ii/index.md","title":"Introducing Service Mesh Part II","description":"This is a follow up to the previous post:","date":"2020-01-21T00:00:00.000Z","formattedDate":"January 21, 2020","tags":[{"label":"k8s","permalink":"/tags/k-8-s"},{"label":"kubernetes","permalink":"/tags/kubernetes"},{"label":"service-mesh","permalink":"/tags/service-mesh"},{"label":"servicemesh","permalink":"/tags/servicemesh"}],"readingTime":4.615,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"introducing-service-mesh-part-ii","title":"Introducing Service Mesh Part II","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"image":"images/service-mesh-1.png","tags":["k8s","kubernetes","service-mesh","servicemesh"],"keywords":["k8s","kubernetes","service-mesh","servicemesh"]},"prevItem":{"title":"Google Cloud SQL \u2013 Availability for PostgreSQL \u2013 Part II (Read Replicas)","permalink":"/google-cloud-sql-availability-for-postgresql-read-replicas"},"nextItem":{"title":"Google Cloud SQL \u2013 Availability, Replication, Failover for PostgreSQL \u2013 Part I","permalink":"/google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql"}},"content":"This is a follow up to the previous post:\\n\\n[__Sick of hearing about Service Mesh? Here\u2019s what you need to know...__](https://cloudywithachanceofbigdata.com/sick-of-hearing-about-service-mesh-heres-what-you-need-to-know/)\\n\\n## Refresher\\n\\nA refresher on the data plane, and what the userspace proxy can perform:\\n\\n- **Routing:** Given a REST request for `/hello` from the local service instance, where should that request be sent?\\n- **Load Balancing:** Once routing has done its job, to which upstream service instance should the request be sent? With what timeout? If the request fails, should it be retried?\\n- **Authorisation and Authentication:** For requests that are incoming, can cryptographic functions determine the authenticity of that requests? Is the called allowed to invoke the requested endpoint?\\n- **Observability:** Detailed logging, statistics, distributed tracing data so that operators can understand the traffic flow and debug problems as they occur\\n- **Service Discovery:** What backend/upstream service instances are available?\\n- **Health Checking:** Are upstream service instances healthy and ready to accept traffic?\\n\\nThe control plane is slightly less complex. For the data plane to act in a coordinated fashion, the control plane gives you the machinery to make that happen. This is the magical part of the service mesh; the control plane takes a set of isolated sidecar proxies and turns them into a distributed system. The control plane in turn provides an API to allow the user to modify and inspect the behaviour of the data plane.\\n\\nYou can see from the diagram below the proxies are right next to the service in the same node. We usually call those \'sidecar\' containers.\\n\\n[![](images/control-data-plane.png)](images/control-data-plane.png)\\n\\nThe diagram above gives you a high level indication of what the service mesh would look like. What if I don\'t have many services? Then the service mesh probably isn\'t for you. That\'s a whole lot of machinery to run a single proxy! Having said this, if your solution is running hundreds or thousands of services, then you\'re going to require a whole heap of proxies.\\n\\nSo there you have it. The service mesh with its control and data plane. To put it simply, the goal of the control plane is to monitor and set a policy that will eventually be enacted by the data plane.\\n\\n## Why?\\n\\nYou\'ve taken over a project, and the security team have mandated the use of the service mesh. You\'ve never used it yourself before, and the confusion as to why we need another thing is getting you down. An additional thing next to my container that will add latency? And consume resources? And I have to maintain it?! Why would anyone need or want this?\\n\\nWhile there are a few answers to this, the most important answer is something I alluded to in an example in part 1 of this series: this design is a great way to add additional logic into the system. Not only can you add additional logic (to containers possibly outside of your control) but you can do this uniformly across the entire mesh! _The service mesh gives you features that are critical for running software that\'s uniform across your whole stack_\\n\\nThe set of features that the service mesh can provide include reliability features (Retries, timeouts etc), observability features (latencies, volume etc) and security features (mTLS, access control etc).\\n\\n## Let\'s break it down\\n\\n**Server-side software relies on these critical features** If you\'re building any type of modern server-side software that\'s predicated on multiple services, think API\'s and web-apps, and if you\'re continually adding features to this in a short timeframe, then all the features listed above become critical for you. Your applications must be reliable, observable and most importantly secure. This is exactly what the service mesh helps you with.\\n\\n**One view to rule them all** The features mentioned above are language-agnostic, don\'t care about your framework, who wrote it or any part of your development life cycle. They give you, your team and your company a consistent way to deploy changes across your service landscape\\n\\n**Decoupled from application code** It\'s important to have a single place to include application and business logic, and not have the nightmare of managing that in multiple components of your system. The core stewardship of the functionality that the service mesh provides lies at the _platform level_. This includes maintenance, deployments, operation etc. The application can be updated and deployed by developers maintaining the application, and the service mesh can change without the application being involved.\\n\\n## In short\\n\\nYes, while the features of the service mesh could be implemented as application code, this solution would not help in driving uniform features sets across the whole system, which is the value proposition for the service mesh.\\n\\n_If you\'re a business-logic developer_, you probably don\'t need to worry about the service mesh. Keep pumping out that new fangled business logic that makes the software oh-so-usable\\n\\n_If you\'re in a platform role_ and most likely using _Kubernetes_, then you should be right on top of the service mesh! That is unless your architecture dictates a monolith. You\'re going to have a lot of services talking to one another, all tied together with an overarching dependency.\\n\\n_If you\'re in a platform role with no Kubernetes_ but a bunch of microservices, you should maybe care a little bit about the service mesh, but without the power of Kubernetes and the ease of deployment it brings, you\'ll have to weigh up how you intend to manage all those proxies.\\n\\nI hope you enjoyed this article, please feel free to reach out to me at:\\n\\nTom Klimovski  \\nPrincipal Consultant, Gamma Data  \\n[tom.klimovski@gammadata.io](mailto:tom.klimovski@gammadata.io)"},{"id":"google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql","metadata":{"permalink":"/google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-01-17-google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql/index.md","source":"@site/blog/2020-01-17-google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql/index.md","title":"Google Cloud SQL \u2013 Availability, Replication, Failover for PostgreSQL \u2013 Part I","description":"In this multi part blog we will explore the features available in Google Cloud SQL for High Availability, Backup and Recovery, Replication and Failover and Security (at rest and in transit) for the PostgreSQL DBMS engine. Some of these features are relatively hot of the press and in Beta \u2013 which still makes them available for general use.","date":"2020-01-17T00:00:00.000Z","formattedDate":"January 17, 2020","tags":[{"label":"cloudsql","permalink":"/tags/cloudsql"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"ha","permalink":"/tags/ha"},{"label":"highavailability","permalink":"/tags/highavailability"},{"label":"postgresql","permalink":"/tags/postgresql"}],"readingTime":4.395,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql","title":"Google Cloud SQL \u2013 Availability, Replication, Failover for PostgreSQL \u2013 Part I","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/cloudsql-featured-image.png","tags":["cloudsql","gcp","google-cloud-platform","googlecloudplatform","ha","highavailability","postgresql"],"keywords":["cloudsql","gcp","google-cloud-platform","googlecloudplatform","ha","highavailability","postgresql"]},"prevItem":{"title":"Introducing Service Mesh Part II","permalink":"/introducing-service-mesh-part-ii"},"nextItem":{"title":"Sick of hearing about Service Mesh? Here\u2019s what you need to know...","permalink":"/sick-of-hearing-about-service-mesh-heres-what-you-need-to-know"}},"content":"In this multi part blog we will explore the features available in Google Cloud SQL for High Availability, Backup and Recovery, Replication and Failover and Security (at rest and in transit) for the PostgreSQL DBMS engine. Some of these features are relatively hot of the press and in Beta \u2013 which still makes them available for general use.\\n\\nWe will start by looking at the High Availability (HA) options available to you when using the PostgreSQL engine in Google Cloud SQL.\\n\\nMost of you would be familiar with the concepts of High Availability, Redundancy, Fault Tolerance, etc but let\u2019s start with a definition of HA anyway:\\n\\n> High availability (HA) is a characteristic of a system, which aims to ensure an agreed level of operational performance, usually uptime, for a higher than normal period.\\n> \\n> Wikipedia\\n\\nHigher than a normal period is quite subjective, typically this is quantified by a percentage represented by a number of \u201c9s\u201d, that is 99.99% (which would be quoted as \u201cfour nines\u201d), this would allot you 52.60 minutes of downtime over a one-year period.\\n\\nEssentially the number of 9\u2019s required will drive your bias towards the options available to you for Cloud SQL HA.\\n\\nWe will start with Cloud SQL HA in its simplest form, Regional Availability.\\n\\n## Regional Availability\\n\\nKnowing what we know about the Google Cloud Platform, regional availability means that our application or service (in this case Cloud SQL) should be resilient to a failure of any one zone in our region. In fact, as all GCP regions have at least 3 zones \u2013 two zones could fail, and our application would still be available.\\n\\nRegional availability for Cloud SQL (which Google refers to as High Availability), creates a standby instance in addition to the primary instance and uses a regional Persistent Disk resource to store the database instance data, transaction log and other state files, which is synchronously replicated to a Persistent Disk resource local to the zones that the primary and standby instances are located in.\\n\\nA shared IP address (like a Virtual IP) is used to serve traffic to the healthy (normally primary) Cloud SQL instance.\\n\\nAn overview of Cloud SQL HA is shown here:\\n\\n[![Cloud SQL High Availability](images/cloud-sql-ha.png)](images/cloud-sql-ha.png)\\n\\n## Implementing High Availability for Cloud SQL\\n\\nImplementing Regional Availability for Cloud SQL is dead simple, it is one argument:\\n\\n```\\navailability_type = \\"REGIONAL\\"\\n```\\n\\nUsing the `gcloud` command line utility, this would be:\\n\\n```\\ngcloud sql instances create postgresql-instance-1234 \\\\\\n  --availability-type=REGIONAL \\\\\\n  --database-version= POSTGRES_9_6\\n```\\n\\nUsing Terraform (with a complete set of options) it would look like:\\n\\n```\\nresource \\"google_sql_database_instance\\" \\"postgres_ha\\" {\\n  provider = google-beta\\n  region = var.region\\n  project = var.project\\n  name = \\"postgresql-instance-${random_id.instance_suffix.hex}\\"\\n  database_version = \\"POSTGRES_9_6\\"\\n  settings {\\n   tier = var.tier\\n   disk_size = var.disk_size\\n   activation_policy = \\"ALWAYS\\"\\n   disk_autoresize = true\\n   disk_type = \\"PD_SSD\\"\\n   **availability_type = \\"REGIONAL\\"**\\n   backup_configuration {\\n     enabled = true\\n     start_time = \\"00:00\\"\\n   }\\n   ip_configuration  {\\n     ipv4_enabled = false\\n     private_network = google_compute_network.private_network.self_link\\n   }\\n   maintenance_window  {\\n     day = 7\\n     hour = 0\\n     update_track = \\"stable\\"\\n   }\\n  }\\n } \\n```\\n\\nOnce deployed you will notice a few different items in the console, first from the instance overview page you can see that the High Availability option is `ENABLED` for your instance.\\n\\n[![](images/cloud-sql-ha-1.png)](images/cloud-sql-ha-1.png)\\n\\nSecond, you will see a Failover button enabled on the detailed management view for this instance.\\n\\n[![](images/cloud-sql-ha-2.png)](images/cloud-sql-ha-2.png)\\n\\n## Failover\\n\\nFailovers and failbacks can be initiated manually or automatically (should the primary be unresponsive). A manual failover can be invoked by executing the command:\\n\\n```\\ngcloud sql instances failover postgresql-instance-1234\\n```\\n\\nThere is an `--async` option which will return immediately, invoking the failover operation asynchronously.\\n\\nFailover can also be invoked from the Cloud Console using the Failover button shown previously. As an example I have created a connection to a regionally available Cloud SQL instance and started a command which runs a loop and prints out a counter:\\n\\n[![](images/cloud-sql-ha-3.png)](images/cloud-sql-ha-3.png)\\n\\nNow using the `gcloud` command shown earlier, I have invoked a manual failover of the Cloud SQL instance.\\n\\nOnce the failover is initiated, the client connection is dropped (as the server is momentarily unavailable):\\n\\n[![](images/cloud-sql-ha-4.png)](images/cloud-sql-ha-4.png)\\n\\nThe connection can be immediately re-established afterwards, the state of the running query is lost - **_importantly no data is lost_** however. If your application clients had retry logic in their code and they weren\'t executing a long running query, chances are no one would notice! Once reconnecting normal database activities can be resumed:\\n\\n[![](images/cloud-sql-ha-5.png)](images/cloud-sql-ha-5.png)\\n\\nA quick check of the instance logs will show that the failover event has occured:\\n\\n[![](images/cloud-sql-ha-6.png)](images/cloud-sql-ha-6.png)\\n\\nNow when you return to the instance page in the console you will see a Failback button, which indicates that your instance is being served by the standby:\\n\\n[![](images/cloud-sql-ha-7.png)](images/cloud-sql-ha-7.png)\\n\\nNote that there may be a slight delay in the availability of this option as the replica is still being synched.\\n\\nIt is worth noting that nothing comes for free! When you run in REGIONAL or High Availability mode - you are effectively paying double the costs as compared to running in ZONAL mode. However availability and cost have always been trade-offs against one another - you get what you pay for...\\n\\n> More information can be found at: [https://cloud.google.com/sql/docs/postgres/high-availability](https://cloud.google.com/sql/docs/postgres/high-availability)\\n\\nNext up we will look at read replicas (and their ability to be promoted) as another high availability alternative in Cloud SQL."},{"id":"sick-of-hearing-about-service-mesh-heres-what-you-need-to-know","metadata":{"permalink":"/sick-of-hearing-about-service-mesh-heres-what-you-need-to-know","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2020-01-09-sick-of-hearing-about-service-mesh-heres-what-you-need-to-know/index.md","source":"@site/blog/2020-01-09-sick-of-hearing-about-service-mesh-heres-what-you-need-to-know/index.md","title":"Sick of hearing about Service Mesh? Here\u2019s what you need to know...","description":"So you\u2019ve started delivering a new project and it\u2019s all about this \u201cCloud Native\u201d or \u201cMicroservices\u201d thing. You\u2019re a Delivery Manager or Software Engineer at some type of company and someone has lightly peppered a meeting with a term, \u2018Mesh\u2019.","date":"2020-01-09T00:00:00.000Z","formattedDate":"January 9, 2020","tags":[{"label":"k8s","permalink":"/tags/k-8-s"},{"label":"kubernetes","permalink":"/tags/kubernetes"},{"label":"service-mesh","permalink":"/tags/service-mesh"},{"label":"servicemesh","permalink":"/tags/servicemesh"}],"readingTime":3.37,"truncated":false,"authors":[{"name":"Tom Klimovski","title":"Senior Cloud Engineer","url":"https://github.com/tomklimovskigamma","imageURL":"http://2.gravatar.com/avatar/58faa98ad68138dd1997f828f00a882e?s=80","key":"tomklimovski"}],"frontMatter":{"slug":"sick-of-hearing-about-service-mesh-heres-what-you-need-to-know","title":"Sick of hearing about Service Mesh? Here\u2019s what you need to know...","authors":["tomklimovski"],"draft":false,"hide_table_of_contents":true,"image":"images/service-mesh-1.png","tags":["k8s","kubernetes","service-mesh","servicemesh"],"keywords":["k8s","kubernetes","service-mesh","servicemesh"]},"prevItem":{"title":"Google Cloud SQL \u2013 Availability, Replication, Failover for PostgreSQL \u2013 Part I","permalink":"/google-cloud-sql-ha-backup-and-recovery-replication-failover-and-security-for-postgresql"},"nextItem":{"title":"The Ultimate AWS to GCP Thesaurus","permalink":"/ultimate-aws-to-gcp-thesaurus"}},"content":"So you\u2019ve started delivering a new project and it\u2019s all about this \u201cCloud Native\u201d or \u201cMicroservices\u201d thing. You\u2019re a Delivery Manager or Software Engineer at some type of company and someone has lightly peppered a meeting with a term, \u2018Mesh\u2019.\\n\\nThey possibly said event mesh. Or better yet, they mentioned a service mesh. As time went on you kept hearing more and more about the service mesh. You\u2019ve attempted to read up about it, digested a whole bunch of new terms and still didn\u2019t completely understand what the Mesh even does, why you would need it or why the hype train around this technology shows no sign of stopping. This article is an attempt to provide a focused guide to the service mesh, and why it is so interesting.\\n\\n## Ok, so what is this thing?\\n\\nTruth be told, the service mesh is actually pretty simple. It\u2019s built around the idea of small, repeatable bits of software, in this case userspace proxies, stuck very close to your services. This is called the **_data plane_**. In addition to the userspace proxies, you also get a bunch of management processes, which is referred to as the **_control plane_**. Simply put, the data plane (userspace proxies) intercepts all calls between services and the control plane (management processes) coordinates the wholesale behaviour of those proxies. This allows you to perform sweeping changes across your service landscape via the control planes API\u2019s, operators and provides the capability to measure your mesh as a whole.\\n\\nBefore we get into the engineering of what the proxies are, let\u2019s go with an example.\\n\\n- The business has bought some software.\\n- The engineers are tasked with deploying this software in their Kubernetes cluster.\\n- The engineers first task is to containerise this application, expose its functionality to downstream applications and deploy it to the cluster in a repeatable, continuous fashion.\\n- There\u2019s a requirement in your organisation that says \u2018I need all communications to this vendors software as TLS1.3\u2019. Or, \u2018I would like to measure all API latency from this application\u2019.\\n\\nThe engineer replies \u2018I can\u2019t make changes to a third party application! What do I do?\u2019. Service mesh to the rescue.\\n\\nUsing a service mesh, you can deploy a proxy right next to your vendor container and in effect, abstract away the complexities of measurement and data transport mechanisms, and allow the vendor software to concentrate on it\u2019s business logic.\\n\\nThis vendor container is now part of the **_service mesh_**.\\n\\n## Proxies\\n\\nWhen we talk about proxies, we usually discuss things in OSI model terminology, that is to say Layers 1 through 7. Most of the time when it comes to proxies, you\u2019re comparing Layer 4 to Layer 7. Here\u2019s a quick run-down:\\n\\nLayer 4 (L4) -> operates with the delivery of messages with no regard to the content of the messages. They would simply forward network packets to and from the server without inspecting any part of the packets.\\n\\nLayer 7 (L7) -> this is a higher level, application layer. This deals with the actual content of the message. If you were routing network traffic, you could do this at L7 in a much more sophisticated way because you can now make decisions based on the packets messages within.\\n\\nWhy pick between L4 and L7? _Speed_.\\n\\nBack to the service mesh, these userspace proxies are L7-aware TCP proxies. Think _**NGINX**_ or _**haproxy**_. There are different proxies; [Linkerd](https://linkerd.io/) is an ultralight service mesh for Kubernetes. The most popular is [Envoy](https://www.envoyproxy.io/), which was created by the ride-share company Lyft. Above, I also mentioned NGINX and haproxy which are also quite popular. So what differentiates NGINX proxies from the service mesh? Their _focus_. You would implement NGINX as an Ingress proxy (traffic entering your network), but when it comes to proxies that focus on traffic between services, that\u2019s when the service mesh proxy comes in to play.\\n\\nOk, probably time for a diagram now that we\u2019ve explained the Data Plane.\\n\\n[![](images/service-mesh.png)](images/service-mesh.png)\\n\\nTune in for part 2 for when we discuss the Control Plane!"},{"id":"ultimate-aws-to-gcp-thesaurus","metadata":{"permalink":"/ultimate-aws-to-gcp-thesaurus","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-12-30-the-ultimate-aws-to-gcp-thesaurus/index.md","source":"@site/blog/2019-12-30-the-ultimate-aws-to-gcp-thesaurus/index.md","title":"The Ultimate AWS to GCP Thesaurus","description":"There are many posts available which map analogous services between the different cloud providers, but this post attempts to go a step further and map additional concepts, terms, and configuration options to be the definitive thesaurus for cloud practitioners familiar with AWS looking to fast track their familiarisation with GCP.","date":"2019-12-30T00:00:00.000Z","formattedDate":"December 30, 2019","tags":[{"label":"amazonwebservices","permalink":"/tags/amazonwebservices"},{"label":"aws","permalink":"/tags/aws"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"}],"readingTime":4.305,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"ultimate-aws-to-gcp-thesaurus","title":"The Ultimate AWS to GCP Thesaurus","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":false,"image":"images/aws-to-gcp-thesauraus.png","tags":["amazonwebservices","aws","gcp","googlecloudplatform"],"keywords":["amazonwebservices","aws","gcp","googlecloudplatform"]},"prevItem":{"title":"Sick of hearing about Service Mesh? Here\u2019s what you need to know...","permalink":"/sick-of-hearing-about-service-mesh-heres-what-you-need-to-know"},"nextItem":{"title":"Google Cloud Storage Object Notifications using Slack","permalink":"/google-cloud-storage-object-notifications-using-slack"}},"content":"There are many posts available which map analogous services between the different cloud providers, but this post attempts to go a step further and map additional concepts, terms, and configuration options to be the definitive thesaurus for cloud practitioners familiar with AWS looking to fast track their familiarisation with GCP.\\n\\nIt should be noted that AWS and GCP are fundamentally different platforms, nowhere is this more apparent than in the way networking is implemented between the two providers, see: [__GCP Networking for AWS Professionals__](https://cloudywithachanceofbigdata.com/gcp-networking-for-aws-professionals/)\\n\\nThis post is focused on the core infrastructure, networking and security services offered by the two major cloud providers, I will do a future post on higher level services such as the ML/AI offerings from the respective providers.\\n\\nFurthermore this will be a living post which I will continue to update, I encourage comments from readers on additional mappings which I will incorporate into the post as well.\\n\\nI have broken this down into sections based upon the layout of the AWS Console.\\n\\n- [![](images/compute.png) __Compute__](#compute)\\n- [![](images/storage.png) __Storage__](#storage)\\n- [![](images/database.png) __Database__](#database)\\n- [![](images/networking.png) __Networking & Content Delivery__](#networking)\\n- [![](images/security.png) __Security, Identity, & Compliance__](#security)\\n\\n<a name=\\"compute\\"></a>\\n\\n## ![](images/compute.png) Compute\\n\\n![](images/aws.png) | ![](images/gcp.png)\\n--- | ---\\nEC2 (Elastic Compute Cloud) | GCE (Google Compute Engine)\\nAvailability Zone | Zone\\nInstance | VM Instance\\nInstance Family | Machine Family\\nInstance Type | Machine Type\\nAmazon Machine Image (AMI) | Image\\nIAM Role (for an EC2 Instance) | Service Account\\nSecurity Groups | VPC Firewall Rules (ALLOW)\\nTag | Label\\nTermination Protection | Deletion Protection\\nReserved Instances | Committed Use Discounts\\nCapacity Reservation | Reservation\\nUser Data | Startup Script\\nSpot Instances | Preemptible VMs\\nDedicated Instances | Sole Tenancy\\nEBS Volume | Persistent Disk\\nAuto Scaling Group | Managed Instance Group\\nLaunch Configuration | Instance Template\\nELB Listener | URL Map (Load Balancer)\\nELB Target Group | Backend/ Instance Group\\nInstance Storage (ephemeral) | Local SSDs\\nEBS Snapshots | Snapshots\\nKeypair | SSH Keys\\nElastic IP | External IP\\nLambda | Google Cloud Functions\\nElastic Beanstalk | Google App Engine\\nElastic Container Registry (ECR) | Google Container Registry (GCR)\\nElastic Container Service (ECS) | Google Kubernetes Engine (GKE)\\nElastic Kubernetes Service (EKS) | Google Kubernetes Engine (GKE)\\nAWS Fargate | Cloud Run\\nAWS Service Quotas | Allocation Quotas\\nAccount (within an Organisation)&dagger; | Project\\nRegion | Region\\nAWS Cloud\u200bFormation | Cloud Deployment Manager\\n\\n<a name=\\"storage\\"></a>\\n\\n## ![](images/storage.png) Storage\\n\\n![](images/aws.png) | ![](images/gcp.png)\\n--- | ---\\nSimple Storage Service (S3) | Google Cloud Storage (GCS)\\nStandard Storage Class | Standard Storage Class\\nInfrequent Access Storage Class | Nearline Storage Class\\nAmazon Glacier | Coldline Storage Class\\nLifecycle Policy | Retention Policy\\nTags | Labels\\nSnowball | Transfer Appliance\\nRequester Pays | Requester Pays\\nRegion | Location Type/Location\\nObject Lock | Hold\\nVault Lock (Glacier) | Bucket Lock\\nMulti Part Upload | Parallel Composite Transfer\\nCross-Origin Resource Sharing (CORS) | Cross-Origin Resource Sharing (CORS)\\nStatic Website Hosting | Bucket Website Configuration\\nS3 Access Points | VPC Service Controls\\nObject Notifications | Pub/Sub Notifications for Cloud Storage\\nPresigned URL | Signed URL\\nTransfer Acceleration | Storage Transfer Service\\nElastic File System (EFS) | Cloud Filestore\\nAWS DataSync | Transfer Service for on-premises data\\nETag | ETag\\nBucket | Bucket\\n`aws s3` | `gsutil`\\n\\n<a name=\\"database\\"></a>\\n\\n## ![](images/database.png) Database\\n\\n![](images/aws.png) | ![](images/gcp.png)\\n--- | ---\\nRelational Database Service (RDS) | Cloud SQL\\nDynamoDB | Cloud Datastore\\nElastiCache | Cloud Memorystore\\nTable (DynamoDB) | Kind (Cloud Datastore)\\nItem (DynamoDB) | Entity (Cloud Datastore)\\nPartition Key (DynamoDB) | Key (Cloud Datastore)\\nAttributes (DynamoDB) | Properties (Cloud Datastore)\\nLocal Secondary Index (DynamoDB) | Composite Index (Cloud Datastore)\\nElastic Map Reduce (EMR) | Cloud DataProc\\nAthena | Big Query\\nAWS Glue | Cloud DataFlow\\nGlue Catalog | Data Catalog\\nAmazon Simple Notification Service (SNS) | Cloud PubSub (push subscription)\\nAmazon Kinesis | Cloud PubSub\\nAmazon Simple Queue Service (SQS) | Cloud PubSub (poll and pull mode)\\n\\n<a name=\\"networking\\"></a>\\n\\n## ![](images/networking.png) Networking & Content Delivery\\n\\n![](images/aws.png) | ![](images/gcp.png)\\n--- | ---\\nVirtual Private Cloud (VPC) (Regional) | VPC Network (Global or Regional)\\nSubnet (Zonal) | Subnet (Regional)\\nRoute Tables | Routes\\nNetwork ACLs (NACLS) | VPC Firewall Rules (ALLOW or DENY)\\nCloudFront | Cloud CDN\\nRoute 53 | Cloud DNS/Google Domains\\nDirect Connect | Dedicated (or Partner) Interconnect\\nVirtual Private Network (VPN) | Cloud VPN\\nAWS PrivateLink | Google Private Access\\nNAT Gateway | Cloud NAT\\nElastic Load Balancer | Load Balancer\\nAWS WAF | Cloud Armour\\nVPC Peering Connection | VPC Network Peering\\nAmazon API Gateway | Apigee API Gateway\\nAmazon API Gateway | Cloud Endpoints\\n\\n<a name=\\"security\\"></a>\\n\\n## ![](images/security.png) Security, Identity, & Compliance\\n\\n![](images/aws.png) | ![](images/gcp.png)\\n--- | ---\\nRoot Account | Super Admin\\nIAM User | Member\\nIAM Policy | Role (Collection of Permissions)\\nIAM Policy Attachment | IAM Role Binding (or IAM Binding)\\nKey Management Service (KMS) | Cloud KMS\\nCloudHSM | Cloud HSM\\nAmazon Inspector (agent based) | Cloud Security Scanner (scan based)\\nAWS Security Hub | Cloud Security Command Center (SCC)\\nSecrets Manager | Secret Manager\\nAmazon Macie | Cloud Data Loss Prevention (DLP)\\nAWS WAF | Cloud Armour\\nAWS Shield | Cloud Armour\\n\\n\u2020 No direct equivalent, this is the closest equivalent"},{"id":"google-cloud-storage-object-notifications-using-slack","metadata":{"permalink":"/google-cloud-storage-object-notifications-using-slack","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-11-09-google-cloud-storage-object-notifications-using-slack/index.md","source":"@site/blog/2019-11-09-google-cloud-storage-object-notifications-using-slack/index.md","title":"Google Cloud Storage Object Notifications using Slack","description":"This article describes the steps to integrate Slack with Google Cloud Functions to get notified about object events within a specified Google Cloud Storage bucket.","date":"2019-11-09T00:00:00.000Z","formattedDate":"November 9, 2019","tags":[{"label":"gcp","permalink":"/tags/gcp"},{"label":"googlecloudplatform","permalink":"/tags/googlecloudplatform"},{"label":"slack","permalink":"/tags/slack"},{"label":"terraform","permalink":"/tags/terraform"}],"readingTime":2.755,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"google-cloud-storage-object-notifications-using-slack","title":"Google Cloud Storage Object Notifications using Slack","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/Slack-GCS-Image.png","tags":["gcp","googlecloudplatform","slack","terraform"],"keywords":["gcp","googlecloudplatform","slack","terraform"]},"prevItem":{"title":"The Ultimate AWS to GCP Thesaurus","permalink":"/ultimate-aws-to-gcp-thesaurus"},"nextItem":{"title":"Map Reduce is Dead, Long Live Map Reduce","permalink":"/map-reduce-is-dead-long-live-map-reduce"}},"content":"import Gist from \'react-gist\';\\nimport ImageWithCaption from \'/js/ImageWithCaption/ImageWithCaption.js\';\\nimport SetupImage1 from \'./images/slack-notifications-setup-1.png\';\\nimport SetupImage2 from \'./images/slack-notifications-setup-2.png\';\\nimport SetupImage3 from \'./images/slack-notifications-setup-3.png\';\\nimport SetupImage4 from \'./images/slack-notifications-setup-4.png\';\\nimport SetupImage5 from \'./images/slack-notifications-setup-5.png\';\\nimport SetupImage6 from \'./images/slack-notifications-setup-6.png\';\\nimport SetupImage7 from \'./images/output-onlinepngtools.png\';\\nimport SetupImage8 from \'./images/slack-notification.png\';\\n\\nThis article describes the steps to integrate Slack with Google Cloud Functions to get notified about object events within a specified Google Cloud Storage bucket.\\n\\n[![Google Cloud Storage Object Notifications using Slack](images/Slack-GCS.png)](images/Slack-GCS.png)\\n\\nEvents could include the creation of new objects, as well as delete, archive or metadata operations performed on a given bucket.\\n\\nThis pattern could be easily extended to other event sources supported by Cloud Functions including:\\n\\n- Cloud Pub/Sub messages\\n- Cloud Firestore and Firebase events\\n- Stackdriver log entries\\n\\nMore information can be found at [https://cloud.google.com/functions/docs/concepts/events-triggers](https://cloud.google.com/functions/docs/concepts/events-triggers).\\n\\nThe prerequisite steps to configure Slack are provided here:\\n\\n1. First you will need to create a Slack app (assuming you have already set up an account and a workspace). The following screenshots demonstrate this process:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage1}\\naltText=\\"Create a Slack app\\"\\n/>\\n\\n<ImageWithCaption \\nimageSrc={SetupImage2}\\naltText=\\"Give the app a name and associate it with an existing Slack workspace\\"\\n/>\\n\\n2. Next you need to Enable and Activate Incoming Webhooks to your app and add this to your workspace. The following screenshots demonstrate this process:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage3}\\naltText=\\"Enable Incoming Web Hooks for the app\\"\\n/>\\n\\n<ImageWithCaption \\nimageSrc={SetupImage4}\\naltText=\\"Activate incoming webhooks\\"\\n/>\\n\\n<ImageWithCaption \\nimageSrc={SetupImage5}\\naltText=\\"Add the webhook to your workspace\\"\\n/>\\n\\n3. Next you need to specify a channel for notifications generated from object events.\\n\\n<ImageWithCaption \\nimageSrc={SetupImage6}\\naltText=\\"Select a channel for the webhook\\"\\n/>\\n\\n4. Now you need to copy the Webhook url provided, you will use this later in your Cloud Function.\\n\\n<ImageWithCaption \\nimageSrc={SetupImage7}\\naltText=\\"Copy the webhook URL to the clipboard\\"\\n/>\\n\\n> Treat your webhook url as a secret, do not upload this to a public source code repository\\n\\nNext you need to create your Cloud Function, this example uses Python but you can use an alternative runtime including Node.js or Go.\\n\\nThis example templates the source code using the Terraform `template_file` data source. The function source code is shown here:\\n\\n<Gist id=\\"e248abd1af393e58de84e8776161c8cb\\" \\n/>\\n\\nWithin your Terraform code you need to render your Cloud Function code substituting the `slack_webhook_url` for it\'s value which you will supply as a Terraform variable. The rendered template file is then placed in a local directory along with a `requirements.txt` file and zipped up. The resulting Zip archive is uploaded to a specified bucket where it will be sourced to create the Cloud Function.\\n\\n<Gist id=\\"e247d09d33a4aca9154de081f3063978\\" \\n/>\\n\\nNow you need to create the Cloud Function, the following HCL snippet demonstrates this:\\n\\n<Gist id=\\"87e2e83e5b2b800d685a8d239280ca13\\" \\n/>\\n\\nThe `event_trigger` block in particular specifies which GCS bucket to watch and what events will trigger invocation of the function. Bucket events include:\\n\\n- `google.storage.object.finalize` _(the creation of a new object)_\\n- `google.storage.object.delete`\\n- `google.storage.object.archive`\\n- `google.storage.object.metadataUpdate`\\n\\nYou could add additional logic to the Cloud Function code to look for specific object names or naming patterns, but keep in mind the function will fire upon every event matching the `event_type` and `resource` criteria.\\n\\nTo deploy the function, you would simply run:\\n\\n```\\nterraform apply -var=\\"slack_webhook_url=https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\\"\\n```\\n\\nNow once you upload a file named `test-object.txt`, voil\xe0!:\\n\\n<ImageWithCaption \\nimageSrc={SetupImage8}\\naltText=\\"Slack notification for a new object created\\"\\n/>\\n\\n> Full source code is available at: [https://github.com/gamma-data/gcs-object-notifications-using-slack](https://github.com/gamma-data/gcs-object-notifications-using-slack)"},{"id":"map-reduce-is-dead-long-live-map-reduce","metadata":{"permalink":"/map-reduce-is-dead-long-live-map-reduce","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-09-01-map-reduce-is-dead-long-live-map-reduce/index.md","source":"@site/blog/2019-09-01-map-reduce-is-dead-long-live-map-reduce/index.md","title":"Map Reduce is Dead, Long Live Map Reduce","description":"Firstly, this is not another Hadoop obituary, there are enough of those out there already.","date":"2019-09-01T00:00:00.000Z","formattedDate":"September 1, 2019","tags":[{"label":"big-data","permalink":"/tags/big-data"},{"label":"hadoop","permalink":"/tags/hadoop"},{"label":"map-reduce","permalink":"/tags/map-reduce"}],"readingTime":2.91,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"map-reduce-is-dead-long-live-map-reduce","title":"Map Reduce is Dead, Long Live Map Reduce","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/image.png","tags":["big-data","hadoop","map-reduce"],"keywords":["big-data","hadoop","map-reduce"]},"prevItem":{"title":"Google Cloud Storage Object Notifications using Slack","permalink":"/google-cloud-storage-object-notifications-using-slack"},"nextItem":{"title":"Ansible Tower for Continuous Infrastructure","permalink":"/ansible-tower-for-continuous-infrastructure"}},"content":"Firstly, this is not another Hadoop obituary, there are enough of those out there already.\\n\\nThe generalized title of this article has been used as an expression to convey the idea that something old has been replaced by something new. In the case of the expression \u201cthe King is dead, long live the King\u201d the inference is that although one monarch has passed, another monarch instantly succeeds him.\\n\\nIn the age of instant gratification and hype cycle driven \u2018pump and dump\u2019 investment we are very quick to discard technologies that don\u2019t realise overzealous targets for sales or market share. In our continuous attempts to find the next big thing, we are quick to throw out the last big thing and everything associated with it.\\n\\n## The Reports of My Death Have Been Greatly Exaggerated\\n\\nA classic example of this is the notion that Map Reduce is dead. Largely proliferated by the Hadoop obituaries which seem to be growing exponentially with each day.\\n\\nA common e-myth is that Google invented the Map Reduce pattern, which is completely incorrect. In 2004, Google described a framework distributed systems implementation of the Map Reduce pattern in a white paper named _\u201cMapReduce: Simplified Data Processing on Large Clusters.\u201d_ \u2013 this would inspire the first-generation processing framework (MapReduce) in the Hadoop project. But neither Google nor Yahoo! nor contributors to the Hadoop project (which include the pure play vendors) created the Map Reduce algorithm or processing pattern and neither shall any one of these have the rights to kill it.\\n\\nThe origins of the Map Reduce pattern can be traced all the way back to the early foundations of functional programming beginning with Lambda Calculus in the 1930s to LISP in the 1960s. Map Reduce is an integral pattern in all of today\u2019s functional and distributed systems programming. You only need to look at the support for `map()` and `reduce()` operators in some of the most popular languages today including Python, JavaScript, Scala, and many more languages that support functional programming.\\n\\nAs far as distributed processing frameworks go, the Map Reduce pattern and its `map()` and `reduce()` methods are very prominent as higher order functions in APIs such as Spark, Kafka Streams, Apache Samza and Apache Flink to name a few.\\n\\nWhile the initial Hadoop adaptation of Map Reduce has been supplanted by superior approaches, the Map Reduce processing pattern is far from dead.\\n\\n## On the fall of Hadoop...\\n\\nThere is so much hysteria around the fall of Hadoop, we need to be careful not to toss the baby out with the bath water. Hadoop served a significant role in bringing open source, distributed systems from search engine providers to academia all the way to the mainstream, and still serves an important purpose in many organizations data ecosystems today and will continue to do so for some time.\\n\\nOK, it wasn\u2019t the panacea to everything, but who said it was supposed to be? The Hadoop movement was hijacked by hysteria, hype, venture capital, over ambitious sales targets and financial engineering \u2013 this does not mean the technology was bad.\\n\\nHadoop spawned many significant related projects such as Spark, Kafka and Presto to name a few. These projects paved the way for cloud integration, which is now the dominant vector for data storage, processing, and analysis.\\n\\nWhile the quest for world domination by the Hadoop pure play vendors may be over, the Hadoop movement (and the impact it has had on the enterprise data landscape) will live on."},{"id":"ansible-tower-for-continuous-infrastructure","metadata":{"permalink":"/ansible-tower-for-continuous-infrastructure","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-08-29-ansible-tower-for-continuous-infrastructure/index.md","source":"@site/blog/2019-08-29-ansible-tower-for-continuous-infrastructure/index.md","title":"Ansible Tower for Continuous Infrastructure","description":"As infrastructure and teams scale, effective and robust configuration management requires growing beyond manual processes and local conventions. Fortunately, Ansible Tower (or the upstream Open Source project Ansible AWX) provides a perfect platform for configuration management at scale.","date":"2019-08-29T00:00:00.000Z","formattedDate":"August 29, 2019","tags":[{"label":"ansible","permalink":"/tags/ansible"},{"label":"ci-cd","permalink":"/tags/ci-cd"},{"label":"continuous-infrastructure","permalink":"/tags/continuous-infrastructure"}],"readingTime":5.595,"truncated":false,"authors":[{"name":"Chris Ottinger","title":"Senior Technologist","url":"https://github.com/datwiz","imageURL":"http://0.gravatar.com/avatar/f9af9c3fae755ac170c5798c53c5267d?s=80","key":"chrisottinger"}],"frontMatter":{"slug":"ansible-tower-for-continuous-infrastructure","title":"Ansible Tower for Continuous Infrastructure","authors":["chrisottinger"],"draft":false,"hide_table_of_contents":true,"tags":["ansible","ci-cd","continuous-infrastructure"],"keywords":["ansible","ci-cd","continuous-infrastructure"]},"prevItem":{"title":"Map Reduce is Dead, Long Live Map Reduce","permalink":"/map-reduce-is-dead-long-live-map-reduce"},"nextItem":{"title":"Managing Secrets in CICD Pipelines","permalink":"/managing-secrets-in-cicd-pipelines"}},"content":"As infrastructure and teams scale, effective and robust configuration management requires growing beyond manual processes and local conventions. Fortunately, [Ansible Tower](https://www.ansible.com/products/tower) (or the upstream Open Source project [Ansible AWX](https://github.com/ansible/awx)) provides a perfect platform for configuration management at scale.\\n\\nThe\xa0[Ansible Tower/AWX documentation](https://docs.ansible.com/ansible-tower/index.html)\xa0and tutorials provide comprehensive information about the individual components. \xa0However, assembling all the moving pieces into a whole working solution can involve some trial and error and reverse engineering in order to understand how the components relate to one another. \xa0Ansible Tower, like the core Ansible solution, offers flexibility in how features assembled to support different typed of workflows. The types of workflows can include once-off initial configurations, ad-hoc system maintenance, or continuous convergence.\\n\\nContinuous convergence, also referred to as desired state, regularly re-applies the defined configuration to infrastructure. This tends to \'correct the drift\' often encountered when only applying the configuration on infrastructure setup. For example, a continuous convergence approach to configuration management could apply the desired configuration on a recurring schedule of every 30 minutes. \xa0\\n\\nSome continuous convergence workflow characteristics can include:\\n\\n- Idempotent Ansible roles. If there are no required configuration deviations, run will report 0 changes.\\n- A source code repository per Ansible role, similar to the Ansible Galaxy approach,\\n- A source code repository for Ansible playbooks that include the individual Ansible roles,\\n- A host configured to provide one unique service function only,\\n- An Ansible playbook defined for each unique service function that gets applied to the host,\\n- Playbooks applied to each host on a repeating schedule.\\n\\nOne way to achieve a continuous convergence workflow combines the Ansible Tower components according to the following conceptual model.\\n\\n[![](images/Ansible-AWX-Continuous-Convergence.png)](images/Ansible-AWX-Continuous-Convergence.png)\\n\\n## The Workflow Components\\n\\n### Playbook and Role Source Code\\n\\n**Ansible roles** contain the individual tasks, handlers, and content\xa0with a role responsible for the installation and configuration of a particular software service.\\n\\n**Ansible playbooks**\xa0configure a host for a particular service function in the environment acting as a wrapper for the individual role based configurations. \xa0All the roles expected to be applied to a host must be defined in the playbook.\\n\\n### Source Code Repositories\\n\\n**Role git repositor**ies contain the versioned definition of a role, e.g. one git repository per individual role. \xa0The roles are pulled into the playbooks using the git reference and tags, which pegs the role version used within a playbook.\\n\\n**Project git repositories**\xa0group the individual playbooks into single collection, e.g. one git repository per set of playbooks. \xa0As with roles, specific versions of project repositories are also identified by version tags.\xa0\\n\\n### Ansible Tower Server\\n\\nTwo foundational concepts in Ansible Tower are projects and inventories. Projects provide access to playbooks and roles. Inventories provide the connection to \\"real\\" infrastructure. \xa0Inventories and projects also provide authorisation scope for activities in Ansible Tower. For example, a given group can use the playbooks in Project X and apply jobs to hosts in Inventory Y.\\n\\nEach\xa0**Ansible Tower Project**\xa0is backed by a project git repository. \xa0Each repository contains the playbooks and included roles that can be applied by a given job. \xa0The Project is the glue between the Ansible configuration tasks and the plays that apply the configuration.\\n\\n**Ansible Tower Inventories**\xa0are sets of hosts grouped for administration, similar to inventory sets used when applying playbooks manually. \xa0One option is to group hosts into Inventories by environment. \xa0For example, the hosts for development may be in one Inventory while the hosts for production may be in another Inventory. \xa0User authorisation controls are applied at the Inventory level.\\n\\n**Ansible Tower\xa0Inventory Groups**\xa0define sub-sets of hosts within the larger Inventory. \xa0These subsets can then be used to limit the scope of a playbook job. \xa0One option is to group hosts within an Inventory by function. \xa0For example, the hosts for web servers may be in one Inventory Group and the hosts for databases may be in another Inventory Group. \xa0This enables one playbook to target one inventory group. \xa0Inventory groups effectively provide metadata labels for hosts in the Inventory.\\n\\nAn\xa0**Ansible Job Template**\xa0determines the configuration to be applied to hosts. \xa0The Job Template\xa0links a playbook from a project to an inventory. \xa0 The inventory scope can be optionally further limited by specifying inventory group limits. \xa0A Job Template can be invoked either on an ad-hoc basis or via a recurring schedule.\\n\\n**Ansible Job Schedules**\xa0define the time and frequency at which the configuration specified in the Job Template is applied. \xa0Each Job Template can be associated with one or more Job Schedules. \xa0A schedule supports either once-off execution, for example during a defined change window, or regularly recurring execution. \xa0A job schedule that applies the desired state configuration with a frequency of 30 minutes provides an example of a job schedule used for a continuous convergence workflow.\\n\\n### \\"Real\\" Infrastructure\\n\\nAn\xa0**Ansible Job Instance**\xa0defines a single invocation of an Ansible Job Template, both for scheduled and ad-hoc invocations of the job template. \xa0Outside of Ansible Tower, the Job Instance is the equivalent of executing the\xa0`ansible-playbook`\xa0command using an inventory file.\\n\\nA\xa0**Host**\xa0is the actual target infrastructure resources configured by the job instance, applying an ansible playbook of included roles.\\n\\n## A note on Ansible Variables\\n\\nAs with other features of Ansible and Ansible Tower, variables also offer flexibility in defining parameters and context when applying a configuration. \xa0In addition to declaring and defining variables in roles and playbooks, variable definitions can also be defined in Ansible Tower job templates, inventory and inventory groups, and individual hosts. \xa0Given the plethora of options for variable definition locations, without a set of conventions for managing variable values, debugging runtime issues with roles and playbooks can become difficult. \xa0E.g. which value defined at which location was used when applying the role?\\n\\nOne example of variable definitions conventions could include:\\n\\n- Variables shall be given default values in the role, .e.g. in the\xa0`../defaults/main.yml`\xa0file.\\n- If the variable must have a \'real\' value supplied when applying the playbook, the variable shall be defined with an obvious placeholder value which will fail if not overridden.\\n- Variables shall be described in the role\xa0`README.md`\xa0documentation\\n- Do not apply variables at the host inventory level as host inventory can be transient.\\n- Variables that select specific capabilities within a role shall be defined at the Ansible Tower Inventory Group. \xa0For example, a role contains the configuration definition for both master and work nodes. \xa0The Inventory Group variables are used to indicate which hosts must have the master configuration and applied and which must have the worker configuration applied.\\n- Variables that define the environment context for configuration shall be defined in the Ansible Tower Job Template.\\n\\nFollowing these conventions, each of the possible variable definition options serves a particular purpose. \xa0When an issue with variable definition does arise, the source is easily identified."},{"id":"managing-secrets-in-cicd-pipelines","metadata":{"permalink":"/managing-secrets-in-cicd-pipelines","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-07-16-managing-secrets-in-cicd-pipelines/index.md","source":"@site/blog/2019-07-16-managing-secrets-in-cicd-pipelines/index.md","title":"Managing Secrets in CICD Pipelines","description":"Overview","date":"2019-07-16T00:00:00.000Z","formattedDate":"July 16, 2019","tags":[{"label":"ci-cd","permalink":"/tags/ci-cd"},{"label":"gitlab-ci","permalink":"/tags/gitlab-ci"},{"label":"hashicorp-vault","permalink":"/tags/hashicorp-vault"},{"label":"jenkins","permalink":"/tags/jenkins"},{"label":"secrets-management","permalink":"/tags/secrets-management"}],"readingTime":7.53,"truncated":false,"authors":[{"name":"Chris Ottinger","title":"Senior Technologist","url":"https://github.com/datwiz","imageURL":"http://0.gravatar.com/avatar/f9af9c3fae755ac170c5798c53c5267d?s=80","key":"chrisottinger"}],"frontMatter":{"slug":"managing-secrets-in-cicd-pipelines","title":"Managing Secrets in CICD Pipelines","authors":["chrisottinger"],"draft":false,"hide_table_of_contents":true,"image":"images/Gitlab-Vault.png","tags":["ci-cd","gitlab-ci","hashicorp-vault","jenkins","secrets-management"],"keywords":["ci-cd","gitlab-ci","hashicorp-vault","jenkins","secrets-management"]},"prevItem":{"title":"Ansible Tower for Continuous Infrastructure","permalink":"/ansible-tower-for-continuous-infrastructure"},"nextItem":{"title":"Change Data Capture at Scale using Spark","permalink":"/change-data-capture-at-scale-using-spark"}},"content":"## Overview\\n\\nWith the adoption automation for deploying and managing application environments, protecting privileged accounts and credential secrets in a consistent, secure, and scalable manner becomes critical. \xa0Secrets can include account usernames, account passwords and API tokens. \xa0Good credentials management and secrets automation practices reduce the risk of secrets escaping into the wild and being used either intentionally (hacked) or unintentionally (accident).\\n\\n- Reduce the likelihood of passwords slipping into source code commits and getting pushed to code repositories, especially public repositories such as github.\\n- Minimise the secrets exposure surface area by reducing the number of people who require knowledge of credentials. \xa0With an automated credentials management process that number can reach zero.\\n- Limit the useful life of a secret by employing short expiry times and small time-to-live (TTL) values. \xa0Automation enables reliable low-effort secret re-issue and rotation.\\n\\n## Objectives\\n\\nThe following objectives have been considered in designing a secrets automation solution that can be integrated into an existing CICD environment.\\n\\n- Integrate into an existing CICD environment without requiring an \\"all or nothing\\" implementation. \xa0Allow existing jobs to operate alongside jobs that have been converted to the new secrets automation solution.\\n- A single design that can be applied across different toolchains and deployment models. \xa0For example, deployment to a Kubernetes environment can use the same secrets management process as an application installation on a virtual machine. \xa0Similarly, the design can be used with different CICD tools, such as [GitLab-CI](https://about.gitlab.com), [Travis-CI](https://travis-ci.org), or other build and deploy automation tool.\\n- Multi-cloud capable by limiting coupling to a specific hosting environment or cloud services provider.\\n- The use of secrets (or not) can be decided at any point in time, without requiring changes to the CICD job definition, similar to the use of feature flags in applications.\\n- Enable changes to secrets, either due to rotation or revocation, to be maintained from a central service point. \xa0Avoid storing the same secret multiple times in different locations.\\n- Secrets organised in predictable locations in a \\"rest-ish\\" fashion by treating secrets and credentials as attributes of entities.\\n- Use environment variables as the standard interface between deployment orchestration and deployed application, following the 12 Factor App approach.\\n\\n## Solution\\n\\n- Secrets stored centrally in Hashicorp Vault.\\n- CICD jobs retrieve secrets from Vault and configure the application deployment environment.\\n- Deployed applications use the secrets supplied by CICD job to access backend services.\\n\\n[![CICD Secrets with Vault](images/Screen-Shot-2019-07-16-at-17.03.47.png)](images/Screen-Shot-2019-07-16-at-17.03.47.png)\\n\\n## Storing Secrets\\n\\nUse\xa0[Vault by Hashicorp](https://www.vaultproject.io/)\xa0as a centralised secrets storage service. \xa0The CICD service retrieves secrets information for integration and deployment jobs. \xa0Vault provides a flexible set of features to support numerous different workflows and available as either Vault Open Source or Vault Enterprise. \xa0The secrets management pattern described uses the Vault Open Source version. \xa0The workflow described here can be explored using Vault in the unsecured development mode, however, a properly configured and managed Vault service is required for production use.\\n\\nVault supports a number of secrets backends and access workflow models. \xa0This solution makes use of the\xa0[Vault AppRole method](https://www.vaultproject.io/docs/auth/approle.html), which is designed to support machine-to-machine automated workflows. \xa0With the AppRole workflow model human access to secrets is minimised through the use of access controls and temporary credentials with short TTL\'s. \xa0Within Vault, secrets are organised using an entity centric \\"rest-ish\\" style approach ensuring a given secret for a given service is stored in a single predictable location.\\n\\nThe use of Vault satisfies several of the design objectives:\\n\\n- enables single point management of secrets. The secrets content is stored in a single location referenced at CICD job runtime. \xa0On the next invocation, the CICD job retrieves the latest version of the secrets content.\\n- enables storing secrets in predictable locations with file system directory style path location. \xa0The \\"rest-ish\\" approach to organising secret locations enables storing a given secret only once. \xa0Access policies provide the mechanism to limit CICD \xa0visibility to only those secrets required for the CICD job.\\n\\n## Passing Secrets to Applications\\n\\nUse environment variables to pass secrets from the CICD service to the application environment. \xa0\\n\\nThere are existing utilities available for populating a child process environment with Vault sourced secrets, such as\xa0[vaultenv](https://github.com/channable/vaultenv)\xa0or\xa0[envconsul](https://github.com/hashicorp/envconsul). \xa0This approach works well for running an application service. \xa0However, with CICD, often there are often sets of tasks that require access to secrets information as opposed to a single command. \xa0Using the child environment approach would require wrapping each command in a CICD job step with the env utility. \xa0This works against the objective of introducing a secrets automation solution into existing CICD jobs without requiring substantial refactoring. \xa0Similarly, some CICD solutions such as\xa0[Jenkins](https://jenkins.io/)\xa0provide Vault integration plugins which pre-populate the environment with secrets content. \xa0This meets the objective of minimal CICD job refactoring, but closely couples the solution to a particular CICD service stack, reducing portability. \xa0\\n\\nWith a job script oriented CICD automation stack like GitLab-CI or Travis-CI, an alternative is to insert a job step at the beginning of a series of CICD tasks that will populated the required secret values into expected environment variables. \xa0Subsequent tasks in the job can then execute without requiring refactoring. \xa0The decision on whether to source a particular environment variable\'s content directly from the CICD job setup or from the Vault secrets store can be made by adding an optional prefix to environment variables to be sourced from the Vault secrets store. \xa0The prefixed instance of the environment variable contains the location or path to the required secret. \xa0Secret locations are identified using the convention\xa0`/<vault-secret-path>/<secret-key>`\\n\\n- enables progressive implementation due to transparency of secret sourcing. Subsequent steps continue to rely on expected environment vars\\n- enables use in any toolchain that supports use of environment variables to pass information to application environment.\xa0\\n- CICD job steps not tied to a specific secrets store. An alternative secrets storage service could be supported by only requiring modification of the secret getter utility.\\n- control of whether to source application environment variables from the CICD job directly or from the secrets engine is managed at the CICD job setup level as opposed to requiring CICD job refactoring to switch the content source.\\n- continues the 12 Factor App approach of using environment variables to pass context to application environments.\\n\\n## Example Workflow\\n\\nAn example workflow for a CICD job designed to use environment variables for configuring an application.\\n\\n### Assumptions\\n\\nThe following are available in the CICD environment.\\n\\n- A job script oriented CICD automation stack that executes job tasks as a series of shell commands, such as [GitLab-CI](https://about.gitlab.com) or [Jenkins Pipelines](https://jenkins.io/doc/book/pipeline/).\\n- A secrets storage engine with a python API, such as Hashicorp Vault.\\n- CICD execution environment includes the\xa0`[get-vault-secrets-by-approle](https://github.com/datwiz/cicd-secrets-in-vault/blob/master/scripts/get-vault-secrets-by-approle)`\xa0utility script.\\n\\n### Workflow Steps\\n\\n### Add a Vault secret\\n\\nAdd a secret to Vault at the location\xa0`secret/fake-app/users/fake-users`\xa0with a key/value entry of\xa0`password=fake-password`\\n\\n### Add a Vault access policy\\n\\nAdd a Vault policy for the CICD job (or set of CICD jobs) that includes \'read\' access to the secret.\\n\\n```\\n# cicd-fake-app-policy \\npath \\"secret/data/fake-app/users/fake-user\\" {\\n    capabilities = [\\"read\\"]\\n}\\n\\npath \\"secret/metadata/fake-app/users/fake-user\\" {\\n    capabilities = [\\"list\\"]\\n}\\n```\\n\\n### Add a Vault appRole\\n\\nAdd a Vault appRole linked to the new policy. \xa0This example specifies a new appRole with an secret-id TTL of 60 days and non-renewable access tokens with a TTL of 5 minutes. \xa0The CICD job uses the access token to read secrets.\\n\\n```\\nvault write auth/approle/role/fake-role \\\\\\n    secret_id_ttl=1440h \\\\\\n    token_ttl=5m \\\\\\n    token_max_ttl=5m \\\\\\n    policies=cicd-fake-app-policy\\n```\\n\\n### Read the Vault approle-id\\n\\nRetrieve the approle-id of the new appRole taking note of the returned approle-id.\\n\\n```\\nvault\xa0read auth/approle/role/fake-role\\n```\\n\\n### Add a Vault appRole secret-id\\n\\nAdd a secret-id for the appRole, taking note of the returned secret-id\\n\\n```\\nvault write -f auth/approle/role/fake-role/secret-id\\n```\\n\\n### Add CICD Job Steps\\n\\nIn the CICD job definition insert job steps to retrieve secrets values a set variables in the job execution environment. These are the steps to add in a gitlab-ci.yml CICD job.\\n\\n```\\n...\\nscript:\\n- get-vault-secrets-by-approle > ${VAULT_VAR_FILE}\\n- source ${VAULT_VAR_FILE} && rm ${VAULT_VAR_FILE}\\n...\\n```\\n\\nThe helper script `get-vault-secrets-by-approle` could be executed and sourced in a single step, e.g.\xa0`source $(get-vault-secrets-by-approle)`. \xa0However, when executed in\xa0a single statement all script output is processed by the\xa0`source`\xa0command and script\xa0error messages\xa0don\'t get printed and captured in the job logs. \xa0Splitting the read and environment var sourcing into 2 steps aids in troubleshooting.\\n\\n### Add CICD job vars for Vault access\\n\\nIn the CICD job configuration add Vault access environment variables.\\n\\n```\\nVAULT_ADDR=https://vault.example.com:8200\\nVAULT_ROLE_ID=db02de05-fa39-4855-059b-67221c5c2f63\\nVAULT_SECRET_ID=6a174c20-f6de-a53c-74d2-6018fcceff64\\nVAULT_VAR_FILE=/var/tmp/vault-vars.sh\\n```\\n\\n### Add CICD job vars for Vault secrets\\n\\nIn the CICD job configuration add environment variables for the items to be sourced from vault secrets. \xa0The secret path follows the convention of\xa0`<secret-mount-path>/<secret-path>/<secret-key>`\\n\\n```\\nV_FAKE_PASSWORD=secret/fake-app/users/fake-user/password\\n```\\n### Remove CICD job vars\\n\\nIn the CICD job configuration remove the previously used\xa0`FAKE_APP_PASSWORD`\xa0variable.\\n\\n### Execute the CICD job\\n\\nKick off the CICD job. \xa0Any CICD job configuration variables prefixed with \\"`V_`\\" results in the addition of a corresponding environment variable in the job execution environment with content sourced from Vault.\\n\\n> Full source code can be found at:\\n> \\n> [https://github.com/datwiz/cicd-secrets-in-vault](https://github.com/datwiz/cicd-secrets-in-vault)"},{"id":"change-data-capture-at-scale-using-spark","metadata":{"permalink":"/change-data-capture-at-scale-using-spark","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-06-28-change-data-capture-at-scale-using-spark/index.md","source":"@site/blog/2019-06-28-change-data-capture-at-scale-using-spark/index.md","title":"Change Data Capture at Scale using Spark","description":"Change Data Capture (CDC) is one of the most challenging processing patterns to implement at scale. I personally have had several cracks at this using various different frameworks and approaches, the most recent of which was implemented using Spark \u2013 and I think I have finally found the best approach. Even though the code examples referenced use Spark, the pattern is language agnostic \u2013 the focus is on the approach not the specific implementation (as this could be applied to any framework or runtime).","date":"2019-06-28T00:00:00.000Z","formattedDate":"June 28, 2019","tags":[{"label":"big-data","permalink":"/tags/big-data"},{"label":"cdc","permalink":"/tags/cdc"},{"label":"pyspark","permalink":"/tags/pyspark"},{"label":"python","permalink":"/tags/python"},{"label":"spark","permalink":"/tags/spark"}],"readingTime":8.225,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"change-data-capture-at-scale-using-spark","title":"Change Data Capture at Scale using Spark","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/CDC-using-Spark.png","tags":["big-data","cdc","pyspark","python","spark"],"keywords":["big-data","cdc","pyspark","python","spark"]},"prevItem":{"title":"Managing Secrets in CICD Pipelines","permalink":"/managing-secrets-in-cicd-pipelines"},"nextItem":{"title":"Synthetic CDC Data Generator","permalink":"/synthetic-cdc-data-generator"}},"content":"import Gist from \'react-gist\';\\n\\nChange Data Capture (CDC) is one of the most challenging processing patterns to implement at scale. I personally have had several cracks at this using various different frameworks and approaches, the most recent of which was implemented using Spark \u2013 and I think I have finally found the best approach. Even though the code examples referenced use Spark, the pattern is language agnostic \u2013 the focus is on the approach not the specific implementation (as this could be applied to any framework or runtime).\\n\\n:::note Spark Training Courses\\n\\n[Data Transformation and Analysis Using Apache Spark](https://academy.alphazetta.ai/data-transformation-and-analysis-using-apache-spark/)  \\n[Stream and Event Processing using Apache Spark](https://academy.alphazetta.ai/stream-and-event-processing-using-apache-spark/)  \\n[Advanced Analytics Using Apache Spark](https://academy.alphazetta.ai/advanced-analytics-using-apache-spark/)\\n\\n:::\\n\\nThe first challenge you are faced with, is to compare a very large dataset (representing the current state of an object) with another potentially very large dataset (representing new or incoming data). Ideally, you would like the process to be configuration driven and accommodate such things as composite primary keys, or operational columns which you would like to restrict from change detection. You may also want to implement a pattern to segregate sensitive attributes from non-sensitive attributes.\\n\\n## Overview\\n\\nThis pattern (and all my other recent attempts) is fundamentally based upon calculating a deterministic hash of the key and non-key attribute(s), and then using this hash as the basis for comparison. The difference between this pattern and my other attempts is in the distillation and reconstitution of data during the process, as well as breaking the pattern into discrete stages (designed to minimize the impact to other applications). This pattern can be used to process delta or full datasets.\\n\\nA high-level flowchart representing the basic pattern is shown here:\\n\\n[![CDC Flowchart](images/CDC.png)](images/CDC.png)\\n\\n## The Example\\n\\nThe example provided uses the [Synthetic CDC Data Generator application](https://github.com/avensolutions/synthetic-cdc-data-generator), configuring an incoming set with 5 uuid columns acting as a composite key, and 10 random number columns acting as non key values. The initial days payload consists of 10,000 records, the subsequent days payload consists of another 10,000 records. From the initial dataset, a `DELETE` operation was performed at the source system for 20% of records, an `UPDATE` was performed on 40% of the records and the remaining 40% of records were unchanged. In this case the 20% of records that were deleted at the source, were replaced by new `INSERT` operations creating new keys.\\n\\nAfter creating the synthesized day 1 and day 2 datasets, the files are processed as follows:\\n\\n$ spark-submit cdc.py config.yaml data/day1 2019-06-18  \\n$ spark-submit cdc.py config.yaml data/day2 2019-06-19\\n\\nWhere `config.yaml` is the configuration for the dataset, data/day1 and data/day2 represent the different data files, and 2019-06-18 and 2019-06-19 represent a business effective date.\\n\\n## The Results\\n\\nYou should see the following output from running the preceding commands for day 1 and day 2 respectively:\\n\\n### Day 1:\\n\\n<Gist id=\\"b75edc7825b46c12b328d78d47b4b902\\" \\n/>\\n\\n### Day 2:\\n\\n<Gist id=\\"ca92e132105fb5bb381bf9dfca562bf4\\" \\n/>\\n\\nA summary analysis of the resultant dataset should show:\\n\\n<Gist id=\\"ded1f98dc4fce13c9bb3d12a51a46b94\\" \\n/>\\n\\n## Pattern Details\\n\\nDetails about the pattern and its implementation follow.\\n\\n### Current and Historical Datasets\\n\\nThe output of each operation will yield a current dataset (that is the current stateful representation of a give object) and a historical dataset partition (capturing the net changes from the previous state in an appended partition).\\n\\nThis is useful, because often consumers will primarily query the latest state of an object. The change sets (or historical dataset partitions) can be used for more advanced analysis by sophisticated users.\\n\\n### Type 2 SCDs (sort of)\\n\\nTwo operational columns are added to each current and historical object:\\n\\n- `OPERATION` : Represents the last known operation to the record, valid values include :\\n    - `I` (`INSERT`)\\n    - `U` (`UPDATE`)\\n    - `D` (`DELETE` \u2013 hard `DELETE`s, applies to full datasets only)\\n    - `X` (Not supplied, applies to delta processing only)\\n    - `N` (No change)\\n- `EFF_START_DATE`\\n\\nSince data structures on most big data or cloud storage platforms are immutable, we only store the effective start date for each record, this is changed as needed with each coarse-grained operation on the current object. The effective end date is inferred by the presence of a new effective start date (or change in the `EFF_START_DATE` value for a given record).\\n\\n### The Configuration\\n\\nI am using a YAML document to store the configuration for the pattern. Important attributes to include in your configuration are a list of keys and non keys and their datatype (this implementation does type casting as well). Other important attributes include the table names and file paths for the current and historical data structures.\\n\\nThe configuration is read at the beginning of a routine as an input along with the path of an incoming data file (a CSV file in this case) and a business effective date (which will be used as the `EFF_START_DATE` for new or updated records).\\n\\nProcessing is performed using the specified key and non key attributes and the output datasets (current and historical) are written to columnar storage files (parquet in this case). This is designed to make subsequent access and processing more efficient.\\n\\n### The Algorithm\\n\\nI have broken the process into stages as follows:\\n\\n#### Stage 1 \u2013 Type Cast and Hash Incoming Data\\n\\nThe first step is to create deterministic hashes of the configured key and non key values for incoming data. The hashes are calculated based upon a list of elements representing the key and non key values using the MD5 algorithm. The hashes for each record are then stored with the respective record. Furthermore, the fields are casted their target datatype as specified in the configuration. Both of these operations can be performed in a single pass of each row using a `map()` operation.\\n\\nImportantly we only calculate hashes once upon arrival of new data, as the hashes are persisted for the life of the data \u2013 and the data structures are immutable \u2013 the hashes should never change or be invalidated.\\n\\n#### Stage 2 \u2013 Determine INSERTs\\n\\nWe now compare Incoming Hashes with previously calculated hash values for the (previous day\u2019s) current object. If no current object exists for the dataset, then it can be assumed this is a first run. In this case every record is considered as an `INSERT` with an `EFF_START_DATE` of the business effective date supplied.\\n\\nIf there is a current object, then the key and non key hash values (only the hash values) are read from the current object. These are then compared to the respective hashes of the incoming data (which should still be in memory).\\n\\nGiven the full outer join:\\n\\nincoming\\\\_data(keyhash, nonkeyhash) \\nFULL OUTER JOIN  \\ncurrent\\\\_data(keyhash, nonkeyhash) \\nON keyhash\\n\\nKeys which exist in the left entity which do not exist in the right entity must be the results of an INSERT operation.\\n\\nTag these records with an operation of `I` with an `EFF_START_DATE` of the business effective date, then rejoin only these records with their full attribute payload from the incoming dataset. Finally, write out these records to the current and historical partition in `overwrite` mode.\\n\\n#### Stage 3 - Determine DELETEs or Missing Records\\n\\nReferring the previous full outer join operation, keys which exist in the right entity (current object) which do not appear in the left entity (incoming data) will be the result of a (hard) `DELETE` operation if you are processing full snapshots, otherwise if you are processing deltas these would be missing records (possibly because there were no changes at the source).\\n\\nTag these records as `D` or `X` respectively with an `EFF_START_DATE` of the business effective date, rejoin these records with their full attribute payload from the current dataset, then write out these records to the current and historical partition in `append` mode.\\n\\n#### Stage 4 - Determine UPDATEs or Unchanged Records\\n\\nAgain, referring to the previous full outer join, keys which exist in both the incoming and current datasets must be either the result of an `UPDATE` or they could be unchanged. To determine which case they fall under, compare the non key hashes. If the non key hashes differ, it must have been a result of an `UPDATE` operation at the source, otherwise the record would be unchanged.\\n\\nTag these records as `U` or `N` respectively with an `EFF_START_DATE` of the business effective date (in the case of an update - otherwise maintain the current `EFF_START_DATE`), rejoin these records with their full attribute payload from the incoming dataset, then write out these records to the current and historical partition in `append` mode.\\n\\n### Key Callouts\\n\\nA summary of the key callouts from this pattern are:\\n\\n- Use the RDD API for iterative record operations (such as type casting and hashing)\\n- Persist hashes with the records\\n- Use Dataframes for `JOIN` operations\\n- Only perform `JOIN`s with the `keyhash` and `nonkeyhash` columns \u2013 this minimizes the amount of data shuffled across the network\\n- Write output data in columnar (Parquet) format\\n- Break the routine into stages, covering each operation, culminating with a `saveAsParquet()` action \u2013 this may seem expensive but for large datsets it is more efficient to break down DAGs for each operation\\n- Use caching for objects which will be reused between actions\\n\\n#### Metastore Integration\\n\\nAlthough I did not include this in my example, you could easily integrate this pattern with a metastore (such as a Hive metastore or AWS Glue Catalog), by using table objects and `ALTER TABLE` statements to add historical partitions.\\n\\n#### Further optimisations\\n\\nIf the incoming data is known to be relatively small (in the case of delta processing for instance), you could consider a broadcast join where the smaller incoming data is distributed to all of the different Executors hosting partitions from the current dataset.\\n\\nAlso you could add a key to the column config to configure a column to be nullable or not.\\n\\nHappy CDCing!\\n\\n> Full source code for this article can be found at: [https://github.com/avensolutions/cdc-at-scale-using-spark](https://github.com/avensolutions/cdc-at-scale-using-spark)"},{"id":"synthetic-cdc-data-generator","metadata":{"permalink":"/synthetic-cdc-data-generator","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-06-28-synthetic-cdc-data-generator/index.md","source":"@site/blog/2019-06-28-synthetic-cdc-data-generator/index.md","title":"Synthetic CDC Data Generator","description":"This is a simple routine to generate random data with a configurable number or records, key fields and non key fields to be used to create synthetic data for source change data capture (CDC) processing. The output includes an initial directory containing CSV files representing an initial data load, and an incremental directory containing CSV files representing incremental data.","date":"2019-06-28T00:00:00.000Z","formattedDate":"June 28, 2019","tags":[{"label":"cdc","permalink":"/tags/cdc"},{"label":"python","permalink":"/tags/python"},{"label":"spark","permalink":"/tags/spark"}],"readingTime":1.635,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"synthetic-cdc-data-generator","title":"Synthetic CDC Data Generator","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"tags":["cdc","python","spark"],"keywords":["cdc","python","spark"]},"prevItem":{"title":"Change Data Capture at Scale using Spark","permalink":"/change-data-capture-at-scale-using-spark"},"nextItem":{"title":"Scalable, Secure Application Load Balancing with VPC Native GKE and Istio","permalink":"/scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio"}},"content":"import Gist from \'react-gist\';\\n\\nThis is a simple routine to generate random data with a configurable number or records, key fields and non key fields to be used to create synthetic data for source change data capture (CDC) processing. The output includes an initial directory containing CSV files representing an initial data load, and an incremental directory containing CSV files representing incremental data.\\n\\nSpark Training Courses from the AlphaZetta Academy\\n\\n[Data Transformation and Analysis Using Apache Spark](https://academy.alphazetta.ai/data-transformation-and-analysis-using-apache-spark/)  \\n[Stream and Event Processing using Apache Spark](https://academy.alphazetta.ai/stream-and-event-processing-using-apache-spark/)  \\n[Advanced Analytics Using Apache Spark](https://academy.alphazetta.ai/advanced-analytics-using-apache-spark/)\\n\\nArguments (by position) include:\\n\\n- `no_init_recs` : the number of initial records to generate\\n- `no_incr_recs` : the number of incremental records on the second run - should be `>= no_init_recs`\\n- `no_keys` : number of key columns in the dataset \u2013 keys are generated as UUIDs\\n- `no_nonkeys` : number of non-key columns in the dataset \u2013 nonkey values are generated as random numbers\\n- `pct_del` : percentage of initial records deleted on the second run - between 0.0 and 1.0\\n- `pct_upd` : percentage of initial records updated on the second run - between 0.0 and 1.0\\n- `pct_unchanged` : percentage of records unchanged on the second run - between 0.0 and 1.0\\n- `initial_output` : folder for initial output in CSV format\\n- `incremental_output` : folder for incremental output in CSV format\\n\\nNOTE : `pct_del` + `pct_upd` + `pct_unchanged` must equal 1.0\\n\\nExample usage:\\n\\n```\\n$ spark-submit synthetic-cdc-data-generator.py 100000 100000 2 3 0.2 0.4 0.4 data/day1 data/day2\\n```\\n\\nExample output from the **_day1_** run for the above configuration would look like this:\\n\\n<Gist id=\\"befb034da2b4f25a1dbbc0e9b4b8eef6\\" \\n/>\\n\\nNote that this routine can be run subsequent times producing different key and non key values each time, as the keys are UUIDs and the values are random numbers.\\n\\nWe will use this application to generate random input data to demonstrate CDC using Spark in a subsequent post, see you soon!\\n\\n> Full source code can be found at: [https://github.com/avensolutions/synthetic-cdc-data-generator](https://github.com/avensolutions/synthetic-cdc-data-generator)"},{"id":"scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio","metadata":{"permalink":"/scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-05-18-scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio/index.md","source":"@site/blog/2019-05-18-scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio/index.md","title":"Scalable, Secure Application Load Balancing with VPC Native GKE and Istio","description":"At the time of this writing, GCP does not have a generally available non-public facing Layer 7 load balancer. While this is sure to change in the future, this article outlines a design pattern which has been proven to provide scalable and extensible application load balancing services for multiple applications running in Kubernetes pods on GKE.","date":"2019-05-18T00:00:00.000Z","formattedDate":"May 18, 2019","tags":[{"label":"cloud","permalink":"/tags/cloud"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"istio","permalink":"/tags/istio"},{"label":"load-balancing","permalink":"/tags/load-balancing"},{"label":"vpc-native","permalink":"/tags/vpc-native"}],"readingTime":2.855,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio","title":"Scalable, Secure Application Load Balancing with VPC Native GKE and Istio","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/istio-blog-feature-image.png","tags":["cloud","gcp","google-cloud-platform","istio","load-balancing","vpc-native"],"keywords":["cloud","gcp","google-cloud-platform","istio","load-balancing","vpc-native"]},"prevItem":{"title":"Synthetic CDC Data Generator","permalink":"/synthetic-cdc-data-generator"},"nextItem":{"title":"AWS Professional and Speciality Exam Tips","permalink":"/aws-professional-and-speciality-exam-tips"}},"content":"At the time of this writing, GCP does not have a generally available non-public facing Layer 7 load balancer. While this is sure to change in the future, this article outlines a design pattern which has been proven to provide scalable and extensible application load balancing services for multiple applications running in Kubernetes pods on GKE.\\n\\nWhen you create a service of type LoadBalancer in GKE, Kubernetes hooks into the provider (GCP in this case) on your behalf to create a Google Load Balancer, while this may be specified as INTERNAL, there are two issues:\\n\\n### Issue #1:\\n\\nThe GCP load balancer created for you is a Layer 4 TCP load balancer.\\n\\n### Issue #2:\\n\\nThe normal behaviour is for Google to enumerate all of the node pools in your GKE cluster and \u201cautomagically\u201d create mapping GCE instance groups for each node pool for each zone the instances are deployed in. This means the entire surface area of your cluster is exposed to the external network \u2013 which may not be optimal for internal applications on a multi tenanted cluster.\\n\\n### The Solution:\\n\\nUsing [Istio](https://istio.io/) deployed on GKE along with the [Istio Ingress Gateway](https://istio.io/docs/concepts/traffic-management/#ingress-and-egress) along with an externally created load balancer, it is possible to get scalable HTTP load balancing along with all the normal ALB goodness (stickiness, path-based routing, host-based routing, health checks, TLS offload, etc.).\\n\\nAn abstract depiction of this architecture is shown here:\\n\\n[![Istio Ingress Design Pattern for VPC Native GKE Clusters](images/istio-ingress-blog.png)](images/istio-ingress-blog.png)\\n\\nThis can be deployed with a combination of [Terraform](https://www.terraform.io/) and kubectl. The steps to deploy at a high level are:\\n\\n1. Create a GKE cluster with at least two node pools: ingress-nodepool and service-nodepool. Ideally create these node pools as multi-zonal for availability. You could create additional node pools for your Egress Gateway or an operations-nodepool to host Istio, etc as well.\\n2. Deploy Istio.\\n3. Deploy the Istio Ingress Gateway service on the ingress-nodepool using Service type NodePort.\\n4. Create an associated Certificate Gateway using server certificates and private keys for TLS offload.\\n5. Create a service in the service-nodepool.\\n6. Reserve an unallocated static IP address from the node network range.\\n7. [Create an internal TCP load balancer](https://cloud.google.com/load-balancing/docs/internal/setting-up-internal):\\n    1. Specify the frontend as the IP address reserved in step 6.\\n    2. Specify the backend as the managed instance groups created during the node pool creation for the ingress-nodepool (ingress-nodepool-ig-a, ingress-nodepool-ig-b, ingress-nodepool-ig-c).\\n    3. Specify ports 80 and 443.\\n8. Create a GCP Firewall Rule to allow traffic from authorized sources (network tags or CIDR ranges) to a target of the ingress-nodepool network tag.\\n9. Create a Cloud DNS A Record for your managed zone as \\\\*.namespace.zone pointing to the IP Address assigned to the load balancer frontend in step 7.1.\\n10. [Enable Health Checks through the GCP firewall](https://cloud.google.com/load-balancing/docs/health-checks#firewall_rules) to reach the ingress-nodepool network tag at a minimum \u2013 however there is no harm in allowing these to all node pools.\\n\\nThe service should then be resolvable and routable from authorized internal networks (peered private VPCs or internal networks connected via VPN or Dedicated Interconnect) as:\\n\\n> https://_service__.__namespace__.__zone__/__endpoint__\\n\\n### The advantages of this design pattern are...\\n\\n1. The Ingress Gateway provides fully functional application load balancing services.\\n2. Istio provides service discovery and routing using names and namespaces.\\n3. The Ingress Gateway service and ingress gateway node pool can be scaled as required to meet demand.\\n4. The Ingress Gateway is multi zonal for greater availability"},{"id":"aws-professional-and-speciality-exam-tips","metadata":{"permalink":"/aws-professional-and-speciality-exam-tips","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-04-04-aws-professional-and-speciality-exam-tips/index.md","source":"@site/blog/2019-04-04-aws-professional-and-speciality-exam-tips/index.md","title":"AWS Professional and Speciality Exam Tips","description":"One you get beyond the Associate level AWS certification exams into the Professional or Speciality track exams the degree of difficulty rises significantly. As a veteran of the Certified Solutions Architect Professional and Big Data Specialty exams, I thought I would share my experiences which I believe are applicable to all the certification streams and tracks in the AWS certification program.","date":"2019-04-04T00:00:00.000Z","formattedDate":"April 4, 2019","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"certification","permalink":"/tags/certification"}],"readingTime":4.65,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"aws-professional-and-speciality-exam-tips","title":"AWS Professional and Speciality Exam Tips","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/aws-pro-and-specialty-certs.png","tags":["aws","certification"],"keywords":["aws","certification"]},"prevItem":{"title":"Scalable, Secure Application Load Balancing with VPC Native GKE and Istio","permalink":"/scalable-secure-application-load-balancing-with-vpc-native-gke-and-istio"},"nextItem":{"title":"GCP Networking for AWS Professionals","permalink":"/gcp-networking-for-aws-professionals"}},"content":"One you get beyond the Associate level AWS certification exams into the Professional or Speciality track exams the degree of difficulty rises significantly. As a veteran of the Certified Solutions Architect Professional and Big Data Specialty exams, I thought I would share my experiences which I believe are applicable to all the certification streams and tracks in the AWS certification program.\\n\\nFirst off let me say that I am a self-professed certification addict, having sat more than thirty technical certification exams over my thirty plus year career in technology including certification and re-certification exams. I would put the AWS professional and specialty exams right up there in terms of their level of difficulty.\\n\\nThe AWS Professional and Specialty exams are specifically designed to be challenging. Although they have removed the pre-requisites for these exams (much to my dismay\u2026), you really need to be prepared for these exams otherwise you are throwing your hard-earned money away.  \\n\\nThere are very few - if any - \u201ceasy\u201d questions. All of the questions are scenario based and require you to design a solution to meet multiple requirements. The question and/or the correct answer will invariably involve the use of multiple AWS services (not just one). You will be tested on your reading comprehension, time management and ability to cope under pressure as well as being tested on your knowledge of the AWS platform.  \\n\\nThe following sections provide some general tips which will help you approach the exam and give you the best chance of success on the day. This is not a brain dump or a substitute for the hard work and dedication required to ensure success on your exam day.\\n\\n## Time Management\\n\\nNeedless to say, your ability to manage time is critical, on average you will have approximately 2-3 minutes to answer each question. Reading the questions and answers carefully may take up 1-2 minutes on its own. If the answer is not apparent to you, you are best to mark the question and come back to it at the end of the exam.  \\n\\nIn many cases there may be subsequent questions and answer sets which jog your memory or help you deduce the correct answers to the questions you initial passed on. For instance, you may see references in future questions which put context around services you may not be completely familiar with, this may enable you to answer flagged questions with more confidence.  \\n\\nOf course, you must answer all questions before completing the exam, there are no points for incomplete or unattempted answers.\\n\\n## Recommended Approach to each Question\\n\\nMost of the questions on the Professional or Specialty certification exams fall into one of three categories:\\n\\n- Short-ish question, multiple long detailed answer options\\n- Long-ish scenario question, multiple relatively short answer options\\n- Long-ish question with multiple relatively long, detailed answers\\n\\nThe latter scenario is thankfully less common. However, in all cases it is important to read the last sentence in the question first, this will provide indicators to help you read through the question in its entirety and all of the possible answers with a clear understanding of what is _\u201creally\u201d_ being asked. For instance, the operative phrase may be _\u201chighly available\u201d_ or _\u201cmost cost effective\u201d_.\\n\\nTry to eliminate answers based on what you know, for instance answers with erroneous instance families can be eliminated immediately. This will give you a much better statistical chance of success, even if you have to venture an educated guess in the end.\\n\\n## The Most Complicated Solution is Probably Not the Correct One\\n\\nIn many answer sets to questions on the Professional or Specialty exams you will see some ridiculously complicated solution approaches, these are most often incorrect answers. Although there may be enough loosely relevant terminology or services to appear reasonable.\\n\\nNote the following statement direct from the AWS Certified Solutions Architect Professional Exam Blueprint:\\n\\n>   \\n> \u201cDistractors, or incorrect answers, are response options that an examinee with incomplete knowledge or skill would likely choose. However, they are generally plausible responses that fit in the content area defined by the test objective.\u201d\\n\\nAWS wants professionals who design and implement solutions which are simple, sustainable, highly available, scalable and cost effective. One of the key Amazon Leadership Principles is _\u201cInvent and Simplify\u201d_, simplify is often the operative word.\\n\\n## Don\u2019t spend time on dumps or practice exams (other than those from AWS)\\n\\nThe question pools for AWS exams are enormous, the chances of you getting the same questions and answer sets as someone else are slim. Furthermore, non-AWS sources may not be trustworthy. There is no substitute to AWS white papers, how to\u2019s, and real-life application of your learnings.\\n\\n## Don\u2019t focus on Service Limits or Calculations\\n\\nIn my experiences with AWS exams, they are not overly concerned with service limits, default values, formulas (e.g. the formula to calculate required partitions for a DynamoDB table) or syntax - so don\u2019t waste time remembering them. You should however understand the 7 layer OSI model and be able to read and interpret CIDR notation.\\n\\nMainly, however, they want you to understand how services work together in an AWS solution to achieve an outcome for a customer.\\n\\n## Some Final Words of Advice\\n\\n**Always do what you think AWS would want you to do!**\xa0\\n\\nIt is worthwhile having a quick look at the [AWS Leadership Principles](https://blog.aboutamazon.com.au/amazon-in-australia/our-leadership-principles) (I have already referenced one of these in this article) as these are applied religiously in every aspect of the AWS business.\xa0 In particular, you should pay specific attention to the principals around simplicity and frugality.\\n\\n**Good luck!**"},{"id":"gcp-networking-for-aws-professionals","metadata":{"permalink":"/gcp-networking-for-aws-professionals","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-02-21-gcp-networking-for-aws-professionals/index.md","source":"@site/blog/2019-02-21-gcp-networking-for-aws-professionals/index.md","title":"GCP Networking for AWS Professionals","description":"A primer on GCP networking for AWS engineers and architects","date":"2019-02-21T00:00:00.000Z","formattedDate":"February 21, 2019","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"cloud","permalink":"/tags/cloud"},{"label":"gcp","permalink":"/tags/gcp"},{"label":"google-cloud-platform","permalink":"/tags/google-cloud-platform"},{"label":"networking","permalink":"/tags/networking"}],"readingTime":3.94,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"gcp-networking-for-aws-professionals","title":"GCP Networking for AWS Professionals","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"description":"A primer on GCP networking for AWS engineers and architects","image":"images/gcp-aws-networking.png","tags":["aws","cloud","gcp","google-cloud-platform","networking"],"keywords":["aws","cloud","gcp","google-cloud-platform","networking"]},"prevItem":{"title":"AWS Professional and Speciality Exam Tips","permalink":"/aws-professional-and-speciality-exam-tips"},"nextItem":{"title":"The Streaming Data Warehouse","permalink":"/the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined"}},"content":"GCP and AWS share many similarities, they both provide similar services and both leverage containerization, virtualization and software defined networking.\\n\\nThere are some significant differences when it comes to their respective implementations, networking is a key example of this.\\n\\nBefore we compare and contrast the two different approaches to networking, it is worthwhile noting the genesis of the two major cloud providers.\\n\\n#### _Google was born to be global, Amazon became global_\\n\\nBy no means am I suggesting that Amazon didn\'t have designs on going global from it\'s beginnings, but AWS was driven (entirely at the beginning) by the needs of the Amazon eCommerce business. Amazon started in the US before expanding into other regions (such as Europe and Australia). In some cases the expansion took decades (Amazon only entered Australia as a retailer in 2018).\\n\\nGoogle, by contrast, was providing application, search and marketing services worldwide from its very beginning. GCP which was used as the vector to deliver these services and applications was architected around this global model, even though their actual data centre expansion may not have been as rapid as AWS\u2019s (for example GCP opened its Australia region 5 years after AWS).\\n\\nTheir respective networking implementations reflect how their respective companies evolved.\\n\\n#### _AWS is a leader in IaaS, GCP is a leader in PaaS_\\n\\nThis is only an opinion and may be argued, however if you look at the chronology of the two platforms, consider this:\\n\\n- The first services released by AWS (simultaneously for all intents and purposes) were S3, SQS and EC2\\n- The first service released by Google was AppEngine (a pure PaaS offering)\\n\\nGoogle has launched and matured their IaaS offerings since as AWS has done similarly with their PaaS offerings, but they started from much different places.\\n\\nWith all of that said, here are the key differences when it comes to networking between the two major cloud providers:\\n\\n### GCP VPCs are Global by default, AWS VPCs are Regional only\\n\\nThis is the first fundamental difference between the two providers. Each GCP project is allocated one VPC network with Subnets in each of the 18 GCP Regions. Whereas each AWS Account is allocated one Default VPC in each AWS Region with a Subnet in each AWS Availability Zone for that Region, that is each account has 17 VPCs in each of the 17 Regions (excluding GovCloud regions).\\n\\n[![Default Global VPC Network in GCP](images/gcp-default-network.png)](images/gcp-default-network.png)\\n\\nIt is entirely possible to create VPCs in GCP which are Regional, but they are Global by default.\\n\\nThis global tenancy can be advantageous in many cases, but can be limiting in others, for instance there is a limit of 25 peering connections to any one VPC, the limit in AWS is 125.\\n\\n### GCP Subnets are Regional, AWS Subnets are Zonal\\n\\nSubnets in GCP automatically span all Zones in a Region, whereas AWS VPC Subnets are assigned to Availability Zones in a Region. This means you are abstracted from some of the networking and zonal complexity, but you have less control over specific network placement of instances and endpoints. You can infer from this design that Zones are replicated or synchronised within a Region, making them less of a direct consideration for High Availability (or at least as much or your concern as they otherwise would be).\\n\\n### All GCP Firewall Rules are Stateful\\n\\nAWS Security Groups are stateful firewall rules \u2013 meaning they maintain connection state for inbound connections, AWS also has Network ACLs (NACLs) which are stateless firewall rules. GCP has no direct equivalent of NACLs, however GCP Firewall Rules are more configurable than their AWS counterparts. For instance, GCP Firewall Rules can include Deny actions which is not an option with AWS Security Group Rules.\\n\\n### Load Balancers in GCP are layer 4 (TCP/UDP) unless they are public facing\\n\\nAWS Application Load Balancers can be deployed in private VPCs with no external IPs attached to them. GCP has Application Load Balancers (Layer 7 load balancers) but only for public facing applications, internal facing load balancers in GCP are Network Load Balancers. This presents some challenges with application level load balancing functionality such as stickiness. There are potential workarounds however such as NGINX in GKE behind\\n\\n### Firewall rules are at the Network Level not at the Instance or Service Level\\n\\nThere are simple firewall settings available at the instance level, these are limited to allowing HTTP and HTTPS traffic to the instance only and don\u2019t allow you to specify sources. Detailed Firewall Rules are set at the GCP VPC Network level and are not attached or associated with instances as they are in AWS.\\n\\n_Hopefully this is helpful for AWS engineers and architects being exposed to GCP for the first time!_"},{"id":"the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined","metadata":{"permalink":"/the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-02-14-the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined/index.md","source":"@site/blog/2019-02-14-the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined/index.md","title":"The Streaming Data Warehouse","description":"Kappa Architecture and Data Warehousing re-imagined","date":"2019-02-14T00:00:00.000Z","formattedDate":"February 14, 2019","tags":[{"label":"data-warehousing","permalink":"/tags/data-warehousing"},{"label":"kafka","permalink":"/tags/kafka"},{"label":"kappa-architecture","permalink":"/tags/kappa-architecture"},{"label":"stream-processing","permalink":"/tags/stream-processing"},{"label":"streaming-analytics","permalink":"/tags/streaming-analytics"}],"readingTime":3.43,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined","title":"The Streaming Data Warehouse","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/sdw.png","tags":["data-warehousing","kafka","kappa-architecture","stream-processing","streaming-analytics"],"keywords":["data-warehousing","kafka","kappa-architecture","stream-processing","streaming-analytics"]},"prevItem":{"title":"GCP Networking for AWS Professionals","permalink":"/gcp-networking-for-aws-professionals"},"nextItem":{"title":"Test Driven Infrastructure and Test Automation with Ansible, Molecule and Azure","permalink":"/test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure"}},"content":"### Kappa Architecture and Data Warehousing re-imagined\\n\\n![Streaming Data Warehouse](images/sdw.png)\\n\\nThe aspiration to extend data analysis (predictive, descriptive or otherwise) to streaming event data has been common across every enterprise scale program I have been involved with. Often, however, this aspiration goes unrealised as it tends to slide down the priority scale as we still grapple with legacy batch oriented integration patterns and processes.\\n\\nEvent processing is not a new concept, real time event and transaction processing has been a standard feature for security, digital and operations functions for some time, however in the Data Warehousing, BI and Advanced Analytics worlds it is often spoken about but rarely implemented, except for tech companies of course. In many cases personalization is still a batch oriented process, e.g. train a model from a feature set built from historical data, generate recommendations in batch, serve these recommendations upon the next visit - wash, rinse, and repeat.\\n\\nLambda has existed for several years now as a data-processing architecture pattern designed to incorporate both batch and stream-processing capabilities. Moreover, messaging platforms have existed for decades, from point-to-point messaging systems, to message-oriented-middleware systems, to distributed pub-sub messaging systems such as Apache Kafka.\\n\\nAdditionally, open source streaming data processing frameworks and tools have proliferated in recent years with projects such as Storm, Samza, Flink and Spark Streaming becoming established solutions.\\n\\nKafka in particular, with its focus on durability, resiliency, availability and consistency, has graduated into fully fledged data platform **not simply a transient messaging system**. In many cases Kafka is serving as a back end for operational processes, such as applications implementing the CQRS (Command Query Responsibility Segregation) design pattern.  \\n\\nIn other words, it is not the technology that holds us back, it\'s our lack of imagination.\\n\\nEnter [Kappa Architecture](http://milinda.pathirage.org/kappa-architecture.com/) where we no longer have to attempt to integrate streaming data with batch processes\u2026**everything is a stream**. The ultimate embodiment of Kappa Architecture is the **_Streaming Data Warehouse_**.\\n\\nIn the Streaming Data Warehouse, tables are represented by topics. Topics represent either:\\n\\n- unbounded event or change streams; or\\n- stateful representations of data (such as master, reference or summary data sets).\\n\\nThis approach makes possible the enrichment and/or summarisation of transaction or event data with master or reference data. Furthermore many of the patterns used in data warehousing and master data management are inherent in Kafka as you can represent the current state of an object as well as the complete change history of that object (in other words change data capture and associated slowly changing dimensions from one inbound stream).\\n\\nData is acquired from source systems either in real time or as a scheduled extract process, **in either case the data is presented to Kafka as a stream**.\\n\\nThe Kafka Avro Schema Registry provides a systematic contract with source systems which also serves as a data dictionary for consumers supporting schema evolution with backward and forward compatibility. Data is retained on the Kafka platform for a designated period of time (days or weeks) where it is available for applications and processes to consume - these processes can include data summarisation or sliding window operations for reporting or notification, or data integration or datamart building processes which sink data to other systems - these could include relational or non-relational data stores.\\n\\nReal time applications can be built using the KStreams API and emerging tools such as KSQL can be used to provide a well-known interface for sampling streaming data or performing windowed processing operations on streams. Structured Streaming in Spark or Spark Streaming in its original RDD/DStream implementation can be used to prepare and enrich data for machine learning operations using Spark ML or Spark MLlib.  \\n\\nIn addition, data sinks can operate concurrently to sink datasets to S3 or Google Cloud Storage or both (multi cloud - like real time analytics - is something which is talked about more than it\u2019s implemented\u2026).\\n\\nIn the Streaming Data Warehouse architecture Kafka is much more than a messaging platform it is a distributed data platform, which could easily replace major components of a legacy (or even a modern) data architecture.  \\n\\nIt just takes a little imagination\u2026"},{"id":"test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure","metadata":{"permalink":"/test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-31-test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure/index.md","source":"@site/blog/2019-01-31-test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure/index.md","title":"Test Driven Infrastructure and Test Automation with Ansible, Molecule and Azure","description":"A few years back, before the rise of the hyper-scalers, I had my first infracode \'aha moment\' with OpenStack. The second came with Kitchen.","date":"2019-01-31T00:00:00.000Z","formattedDate":"January 31, 2019","tags":[{"label":"ansible","permalink":"/tags/ansible"},{"label":"azure","permalink":"/tags/azure"},{"label":"cloud","permalink":"/tags/cloud"},{"label":"infrastructure-code","permalink":"/tags/infrastructure-code"},{"label":"molecule","permalink":"/tags/molecule"},{"label":"python","permalink":"/tags/python"},{"label":"test-automation","permalink":"/tags/test-automation"}],"readingTime":4.45,"truncated":false,"authors":[{"name":"Chris Ottinger","title":"Senior Technologist","url":"https://github.com/datwiz","imageURL":"http://0.gravatar.com/avatar/f9af9c3fae755ac170c5798c53c5267d?s=80","key":"chrisottinger"}],"frontMatter":{"slug":"test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure","title":"Test Driven Infrastructure and Test Automation with Ansible, Molecule and Azure","authors":["chrisottinger"],"draft":false,"hide_table_of_contents":true,"image":"images/molecule-ansible-azure.png","tags":["ansible","azure","cloud","infrastructure-code","molecule","python","test-automation"],"keywords":["ansible","azure","cloud","infrastructure-code","molecule","python","test-automation"]},"prevItem":{"title":"The Streaming Data Warehouse","permalink":"/the-streaming-data-warehouse-kappa-architecture-and-data-warehousing-re-imagined"},"nextItem":{"title":"When Life Gives you Undrinkable Wine \u2013 Make Cognac\u2026","permalink":"/when-life-gives-you-undrinkable-wine-make-cognac"}},"content":"import Gist from \'react-gist\';\\n\\nA few years back, before the rise of the hyper-scalers, I had my first infracode \'aha moment\' with OpenStack. The second came with [Kitchen](https://kitchen.ci/).\\n\\nI had already been using test driven development for application code and configuration automation for infrastructure but Kitchen brought the two together. Kitchen made it possible to write tests, spin up infrastructure, and then tear everything down again - the Red/Green/Refactor cycle for infrastructure. What made this even better was that it wasn\'t a facsimile of a target environment, it was the same - same VM\'s, same OS, same network.\\n\\nComing from a Chef background for configuration automation, Kitchen is a great fit to the Ruby ecosystem. Kitchen works with Ansible and Azure, but a Ruby environment and at least a smattering of Ruby coding skills are required.\\n\\n[Molecule](https://molecule.readthedocs.io/) provides a similar red-green development cycle to Kitchen, but without the need to step outside of the familiar Python environment.\\n\\nOut of the box, Molecule supports development of Ansible roles using either a Docker or Virtual Box infrastructure provider. Molecule also leverages the Ansible drivers for private and public cloud platforms.\\n\\nMolecule can be configured to test an individual role or collections of roles in Ansible playbooks.\\n\\nThis tutorial demonstrates how to use Molecule with Azure to develop and test an individual Ansible role following the red/green/refactor infracode workflow, which can be generalised as:\\n\\n- **Red**\\\\- write a failing infrastructure test\\n- **Green** - write the Ansible tasks needed to pass the test\\n- Refactor - repeat the process\\n\\nThe steps required for this tutorial are as follows:\\n\\n## Azure setup\\n\\nEnsure there is an existing Azure Resource Group that will be used for infracode development and testing. Within the resource group, ensure there is a single virtual network (vnet) with a single subnet. Ansible will use these for the default network setup.\\n\\n## Setup a working environment\\n\\nThere are a number of options for setting up a Python environment for Ansible and Molecule, including Python virtualenv or a Docker container environment.\\n\\n## Create a Docker image for Ansible+Molecule+Azure\\n\\nThis tutorial uses a Docker container environment. A `Dockerfile` for the image can be found in `./molecule-azure-image/Dockerfile`. The image sets up a sane Python3 environment with Ansible, Ansible\\\\[azure\\\\], and Molecule `pip` modules installed.\\n\\n<Gist id=\\"4bd0c2ccae06dcaedffc2d91e594145f\\" \\n/>\\n\\n## Create a Docker workspace\\n\\nSetup a working environment using the Docker image with Ansible, Molecule, and the `azure-cli` installed.\\n\\n<Gist id=\\"f80ef20a720914cfd4e02cf9783fec06\\" \\n/>\\n\\nThis example assumes the following:\\n\\n- a resource group already exists with access rights to create virtual machines; and\\n- the resource group contains a single vnet with a single subnet\\n\\n## Log into an Azure subcription\\n\\nAnsible supports a number of different methods for authenticating with Azure. This example uses the `azure-cli` to login interactively.\\n\\n<Gist id=\\"fd8987e7f724de5393a411c24c74978b\\" \\n/>\\n\\n## Create an empty Ansible role with Molecule\\n\\nMolecule provides an `init` function with defaults for various providers. The molecule-azure-role-template creates an empty role with scaffolding for Azure.\\n\\n<Gist id=\\"f9b301d950a2254ab9af4806f2110544\\" \\n/>\\n\\nCheck that the environment is working by running the following code:\\n\\n<Gist id=\\"d56c3cd1e25b51acc634e5adb8a0a256\\" \\n/>\\n\\nThe output should look be similar to\u2026\\n\\n<Gist id=\\"a3f8aed99a7c910588a5651d8cabf0e8\\" \\n/>\\n\\n## Spin up an Azure VM\\n\\nSpin up a fresh VM to be used for infra-code development.\\n\\n<Gist id=\\"14a621ee65f9c2db583ed5ef94274c71\\" \\n/>\\n\\nMolecule provides a handy option for logging into the new VM:\\n\\n<Gist id=\\"456aa8a8860bf785b382e18ede204d33\\" \\n/>\\n\\nThere is now a fresh Ubuntu 18.04 virtual machine ready for infra-code development. For this example, a basic Nginx server will be installed and verified.\\n\\n## Write a failing test\\n\\n[Testinfra](https://testinfra.readthedocs.io/en/latest/) provides a `pytest` based framework for verifying server and infrastructure configuration. Molecule then manages the execution of those `testinfra` tests. The Molecule template provides a starting point for crafting tests of your own. For this tutorial, installation of the `nginx` service is verified. Modify the tests file using `vi molecule/default/tests/test_default.py`\\n\\n<Gist id=\\"5b22b20a192aecbecb8cc229cb5f2a69\\" \\n/>\\n\\n## Execute the failing test\\n\\nThe Ansible task needed to install and enable `nginx` has not yet been written, so the test should fail:\\n\\n<Gist id=\\"38eb4bb776a41db7aa68f5962a97af62\\" \\n/>\\n\\nIf the initial sample tests in `test_default.py` are kept, then 3 tests should fail and 2 tests should pass.\\n\\n## Write a task to install `nginx`\\n\\nAdd a task to install the `nginx` service using `vi tasks/main.yml`:\\n\\n<Gist id=\\"40d884f0c3a39fc4b3e921d451d60358\\" \\n/>\\n\\n## Apply the role\\n\\nApply the role to the instance created using Molecule.\\n\\n<Gist id=\\"5787aee41e2e3e9373f656677567ae41\\" \\n/>\\n\\nThe `nginx` package should now be installed, both enabled and started, and listening on port 80. Note that the `nginx` instance will not be accessible from the Internet due to the Azure network security rules. The `nginx` instance can be confirmed manually by logging into the instance and using `curl` to make a request to the `nginx` service.\\n\\n<Gist id=\\"fb02518e7129bf28e27822c42221f706\\" \\n/>\\n\\n## Execute the passing test\\n\\nAfter applying the Ansible task to the instance, the `testinfra` tests should now pass.\\n\\n<Gist id=\\"b6359519ca6068615f8f1473636f90ea\\" \\n/>\\n\\n## Cleanup\\n\\nNow that the Ansible role works as defined in the test specification, the development environment can be cleaned up.\\n\\n<Gist id=\\"150971a02b3f4b2c65d551cb09a203d0\\" \\n/>\\n\\nMolecule removes the Azure resources created to develop and test the configuration role. Note that deletion may take a few minutes.\\n\\nFinally, once you are done, exit the container environment. If the container was started with the `--rm` switch, the container will also be removed, leaving you with a clean workspace and newly minted Ansible role with automated test cases.\\n\\n<Gist id=\\"4fbb00b116b1a389b0343f6424b19a1b\\" \\n/>"},{"id":"when-life-gives-you-undrinkable-wine-make-cognac","metadata":{"permalink":"/when-life-gives-you-undrinkable-wine-make-cognac","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-30-when-life-gives-you-undrinkable-wine-make-cognac/index.md","source":"@site/blog/2019-01-30-when-life-gives-you-undrinkable-wine-make-cognac/index.md","title":"When Life Gives you Undrinkable Wine \u2013 Make Cognac\u2026","description":"Make Cognac","date":"2019-01-30T00:00:00.000Z","formattedDate":"January 30, 2019","tags":[{"label":"cloud","permalink":"/tags/cloud"},{"label":"creativity","permalink":"/tags/creativity"},{"label":"lateral-thinking","permalink":"/tags/lateral-thinking"},{"label":"open-source-software","permalink":"/tags/open-source-software"},{"label":"technology","permalink":"/tags/technology"}],"readingTime":2.88,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"when-life-gives-you-undrinkable-wine-make-cognac","title":"When Life Gives you Undrinkable Wine \u2013 Make Cognac\u2026","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/shutterstock_425848342.jpg","tags":["cloud","creativity","lateral-thinking","open-source-software","technology"],"keywords":["cloud","creativity","lateral-thinking","open-source-software","technology"]},"prevItem":{"title":"Test Driven Infrastructure and Test Automation with Ansible, Molecule and Azure","permalink":"/test-driven-infrastructure-and-test-automation-with-ansible-molecule-and-azure"},"nextItem":{"title":"S3 Object Notifications using Lambda and SES","permalink":"/s3-object-notifications-using-lambda-and-ses"}},"content":"![Make Cognac](images/shutterstock_425848342.jpg)\\n\\nFirstly, this is not another motivational talk or motherhood statement (there are plenty of those out there already), but a metaphor about resourcefulness.\\n\\nWe have all heard the adage \u201cwhen life gives you lemons, make lemonade\u201d. Allow me to present a slight twist (pardon the pun\u2026) on this statement.\\n\\nCognac is a variety of brandy named after the town of Cognac, France. It is distilled from a white wine grown from grapes in the area. The wine used to make Cognac is characterised as \\"virtually undrinkable\\". However in its distilled form, Cognac is considered to be the world\'s most refined spirit. With bottles of high end Cognac fetching as much as $200,000.\\n\\nThe area surrounding the town of Cognac was a recognised wine-growing area dating back to the third century, however when it was evident that the grapes produced in the town of Cognac itself were unsuitable for wine making, local producers developed the practice of double distillation in copper pot stills and ageing in oak barrels for at least two years. The product yielded was the spirit we now know as Cognac.\\n\\nFast forward 15 centuries to Scotland in the 1800\u2019s, where John Walker was a humble shopkeeper. Local whiskey producers would bring John different varieties of single malt whiskeys, many of them below an acceptable standard. Instead of on selling these varieties \u2013 he began blending them as made-to-order whiskies, blended to meet specific customer requirements. From this idea a product (and subsequently one of the most globally recognised brands) was created which would last over 200 years.\\n\\n**Interesting, but what does this have to do with technology you might ask?**\\n\\nIngenuity and resourcefulness have existed for as long as man has, but in the realm of technology and in particular cloud computing and open source software it has never been more imperative. We are continually faced with challenges on each assignment or project, often technology not working as planned or as advertised, or finding dead ends when trying to solve problems. This is particularly evident now as software and technology are moving at such an accelerated rate.\\n\\nTo be successful in this era you need creativity and lateral thinking. You need an ability not just to solve problems to which there are no documented solutions, but to create new products from existing ones which are not necessarily suitable for your specific objective. In many cases, looking to add value in the process. That is not just making lemonade from lemons (which anyone could think of) but making Cognac from sub-standard grapes or premium blended whiskey from sub-standard single malt whiskies.\\n\\nOne of my favourite Amazon Leadership Principles is **_\u201cInvent and Simplify\u201d_**:\\n\\n> *Leaders expect and require innovation and invention from their teams and always find ways to simplify. They are externally aware, look for new ideas from everywhere, and are not limited by \u201cnot invented here\\". As we do new things, we accept that we may be misunderstood for long periods of time.*\\n> \\n> [_**https:**_**//www.amazon.jobs/en/principles**](https://www.amazon.jobs/en/principles)  \\n\\nThe intent in this statement is not simply to \u201clift and shift\u201d current on premise systems and processes to the cloud, but to look for ways to streamline, rationalise and simplify processes in doing so. This mandates a combination of practicality and creativity.\\n\\nThe take away is when you are presented with a challenge, be creative and inventive and not just solve the problem but look for ways to add value in the process.\\n\\nCheers!"},{"id":"s3-object-notifications-using-lambda-and-ses","metadata":{"permalink":"/s3-object-notifications-using-lambda-and-ses","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-18-s3-object-notifications-using-lambda-and-ses/index.md","source":"@site/blog/2019-01-18-s3-object-notifications-using-lambda-and-ses/index.md","title":"S3 Object Notifications using Lambda and SES","description":"Simple pattern for formatted emails from S3 object notifications using AWS Lambda and SES, built with Terraform and Python","date":"2019-01-18T00:00:00.000Z","formattedDate":"January 18, 2019","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"boto3","permalink":"/tags/boto-3"},{"label":"lambda","permalink":"/tags/lambda"},{"label":"python","permalink":"/tags/python"},{"label":"s3","permalink":"/tags/s-3"},{"label":"ses","permalink":"/tags/ses"},{"label":"terraform","permalink":"/tags/terraform"}],"readingTime":2.01,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"s3-object-notifications-using-lambda-and-ses","title":"S3 Object Notifications using Lambda and SES","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"description":"Simple pattern for formatted emails from S3 object notifications using AWS Lambda and SES, built with Terraform and Python","image":"images/s3-object-notifications-using-Lambda-and-SES-with-Terraform.png","tags":["aws","boto3","lambda","python","s3","ses","terraform"],"keywords":["aws","boto3","lambda","python","s3","ses","terraform"]},"prevItem":{"title":"When Life Gives you Undrinkable Wine \u2013 Make Cognac\u2026","permalink":"/when-life-gives-you-undrinkable-wine-make-cognac"},"nextItem":{"title":"Infrastructure Automation using AWS Lambda","permalink":"/infrastructure-automation-using-aws-lambda"}},"content":"import Gist from \'react-gist\';\\n\\nFollowing on from the previous post in the Really Simple Terraform series [simple-lambda-ec2-scheduler](https://cloudywithachanceofbigdata.com/really-simple-terraform-infrastructure-automation-using-aws-lambda/), where we used Terraform to deploy a Lambda function including the packaging of the Python function into a ZIP archive and creation of all supporting objects (roles, policies, permissions, etc) \u2013 in this post we will take things a step further by using templating to update parameters in the Lambda function code before the packaging and creation of the Lambda function.\\n\\nS3 event notifications can be published directly to an SNS topic which you could create an email subscription, this is quite straightforward. However the email notifications you get look something like this:\\n\\n![Email Notification sent via an SNS Topic Subscription](images/sns-object-notification-email.png)\\n\\nThere is very little you can do about this.\\n\\nHowever if you take a slightly different approach by triggering a Lambda function to send an email via SES you have much more control over content and formatting. Using this approach you could get an email notification that looks like this:\\n\\n![Email Notification sent using Lambda and SES](images/ses-object-notification-email.png)\\n\\nMuch easier on the eye!\\n\\n## Prerequisites\\n\\nYou will need verified AWS SES (Simple Email Service) email addresses for the sender and recipient\u2019s addresses used for your object notification emails. This can be done via the console as shown here:\\n\\n![SES Email Address Verification](images/ses-verify.png)\\n\\n_Note that SES is not available in every AWS region, pick one that is generally closest to your particular reason (but it really doesn\'t matter for this purpose)._\\n\\n## Deployment\\n\\nThe Terraform module creates an IAM Role and associated policy for the Lambda function as shown here:\\n\\n<Gist id=\\"023fab404c0df759d6d1d4bdb02ab4e8\\" \\n/>\\n\\nVariables in the module are substituted into the function code template, the rendered template file is then packaged as a ZIP archive to be uploaded as the Lambda function source as shown here:\\n\\n<Gist id=\\"7d72d8c67114a9df0af1528a3b754d9e\\" \\n/>\\n\\n_As in the previous post, I will reiterate that although Terraform is technically not a build tool, it can be used for simple build operations such as this._\\n\\nThe Lambda function is deployed using the following code:\\n\\n<Gist id=\\"5e7f2a238e8e0270cd55def40a389903\\" \\n/>\\n\\nFinally the S3 object notification events are configured as shown here:\\n\\n<Gist id=\\"e7de65f20c79e0efb115024597864a75\\" \\n/>\\n\\nUse the following commands to run this example (I have created a default credentials profile, but you could supply your API credentials directly, use STS, etc):\\n\\n```\\ncd simple-notifications-with-lambda-and-ses\\nterraform init\\nterraform apply\\n```\\n\\n> *Full source code can be found at: [__https://github.com/avensolutions/simple-notifications-with-lambda-and-ses__](https://github.com/avensolutions/simple-notifications-with-lambda-and-ses)*"},{"id":"infrastructure-automation-using-aws-lambda","metadata":{"permalink":"/infrastructure-automation-using-aws-lambda","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-15-infrastructure-automation-using-aws-lambda/index.md","source":"@site/blog/2019-01-15-infrastructure-automation-using-aws-lambda/index.md","title":"Infrastructure Automation using AWS Lambda","description":"Simple pattern for automating EC2 tasks using AWS Lambda and Terraform","date":"2019-01-15T00:00:00.000Z","formattedDate":"January 15, 2019","tags":[{"label":"aws","permalink":"/tags/aws"},{"label":"automation","permalink":"/tags/automation"},{"label":"boto3","permalink":"/tags/boto-3"},{"label":"cloudwatch","permalink":"/tags/cloudwatch"},{"label":"ec2","permalink":"/tags/ec-2"},{"label":"lambda","permalink":"/tags/lambda"},{"label":"python","permalink":"/tags/python"},{"label":"scheduled-tasks","permalink":"/tags/scheduled-tasks"},{"label":"terraform","permalink":"/tags/terraform"}],"readingTime":1.96,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"infrastructure-automation-using-aws-lambda","title":"Infrastructure Automation using AWS Lambda","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"description":"Simple pattern for automating EC2 tasks using AWS Lambda and Terraform","image":"images/automate-infrastructure-tasks-using-lambda-with-terraform.png","tags":["aws","automation","boto3","cloudwatch","ec2","lambda","python","scheduled-tasks","terraform"],"keywords":["aws","automation","boto3","cloudwatch","ec2","lambda","python","scheduled-tasks","terraform"]},"prevItem":{"title":"S3 Object Notifications using Lambda and SES","permalink":"/s3-object-notifications-using-lambda-and-ses"},"nextItem":{"title":"Multi Stage ETL Framework using Spark SQL","permalink":"/multi-stage-etl-framework-using-spark-sql"}},"content":"import Gist from \'react-gist\';\\n\\nThere are many other blog posts and examples available for either scheduling infrastructure tasks such as the starting or stopping of EC2 instances; or deploying a Lambda function using Terraform. However, I have found many of the other examples to be unnecessarily complicated, so I have put together a very simple example doing both.\\n\\nThe function itself could be easily adapted to take other actions including interacting with other AWS services using the boto3 library (the Python AWS SDK). The data payload could be modified to pass different data to the function as well.\\n\\nThe script only requires input variables for **_schedule\\\\_expression_** (cron schedule based upon GMT for triggering the function \u2013 could also be expressed as a rate, e.g. **_rate(5 minutes))_** and **_environment_** (value passed to the function on each invocation). In this example the Input data is the value for the \u201cEnvironment\u201d key for an EC2 instance tag \u2013 a user defined tag to associate the instance to a particular environment (e.g. Dev, Test. Prod). The key could be changed as required, for instance if you wanted to stop instances based upon their given name or part thereof you could change the tag key to be \u201cName\u201d.\\n\\nWhen triggered, the function will stop all running EC2 instances with the given Environment tag.\\n\\nThe Terraform script creates:\\n\\n- an IAM Role and associated policy for the Lambda Function\\n- the Lambda function\\n- a Cloudwatch event rule and trigger\\n\\nThe IAM role and policies required for the Lambda function are deployed as shown here:\\n\\n<Gist id=\\"6b8ed7c149a60e823361ee282615b826\\" \\n/>\\n\\nThe function source code is packaged into a ZIP archive and deployed using Terraform as follows:\\n\\n<Gist id=\\"ca6a26a62302ff809eae028bbfb28b41\\" \\n/>\\n\\nAdmittedly Terraform is an infrastructure automation tool and not a build/packaging tool (such as Jenkins, etc), but in this case the packaging only involves zipping up the function source code, so Terraform can be used as a \u2018one stop shop\u2019 to keep things simple.\\n\\nThe Cloudwatch schedule trigger is deployed as follows:\\n\\n<Gist id=\\"7920fda821eb4f03d8ba942da572180c\\" \\n/>\\n\\nUse the following commands to run this example (I have created a default credentials profile, but you could supply your API credentials directly, use STS, etc):\\n\\n```\\ncd simple-lambda-ec2-scheduler\\nterraform init\\nterraform apply\\n```\\n\\n![Terraform output](images/terraform-screenshot.png)\\n\\n> *Full source code can be found at: [__https://github.com/avensolutions/simple-lambda-ec2-scheduler__](https://github.com/avensolutions/simple-lambda-ec2-scheduler)*\\n\\nStay tuned for more simple Terraform deployment recipes in coming posts\u2026"},{"id":"multi-stage-etl-framework-using-spark-sql","metadata":{"permalink":"/multi-stage-etl-framework-using-spark-sql","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-09-multi-stage-etl-framework-using-spark-sql/index.md","source":"@site/blog/2019-01-09-multi-stage-etl-framework-using-spark-sql/index.md","title":"Multi Stage ETL Framework using Spark SQL","description":"A simple configuration driven Spark SQL ETL framework","date":"2019-01-09T00:00:00.000Z","formattedDate":"January 9, 2019","tags":[{"label":"etl","permalink":"/tags/etl"},{"label":"spark","permalink":"/tags/spark"},{"label":"sql","permalink":"/tags/sql"}],"readingTime":2.21,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"multi-stage-etl-framework-using-spark-sql","title":"Multi Stage ETL Framework using Spark SQL","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"description":"A simple configuration driven Spark SQL ETL framework","image":"images/spark-sql-etl-framework.png","tags":["etl","spark","sql"],"keywords":["etl","spark","sql"]},"prevItem":{"title":"Infrastructure Automation using AWS Lambda","permalink":"/infrastructure-automation-using-aws-lambda"},"nextItem":{"title":"The Cost of Future Change","permalink":"/cost-of-future-change"}},"content":"import Gist from \'react-gist\';\\n\\nMost traditional data warehouse or datamart ETL routines consist of multi stage SQL transformations, often a series of CTAS (`CREATE TABLE AS SELECT`) statements usually creating transient or temporary tables \u2013 such as volatile tables in Teradata or Common Table Expressions (CTE\u2019s).\\n\\n:::note Spark Training Courses\\n\\n[Data Transformation and Analysis Using Apache Spark](https://academy.alphazetta.ai/data-transformation-and-analysis-using-apache-spark/)  \\n[Stream and Event Processing using Apache Spark](https://academy.alphazetta.ai/stream-and-event-processing-using-apache-spark/)  \\n[Advanced Analytics Using Apache Spark](https://academy.alphazetta.ai/advanced-analytics-using-apache-spark/)\\n\\n:::\\n\\nThe initial challenge when moving from a SQL/MPP based ETL framework platformed on Oracle, Teradata, SQL Server, etc to a Spark based ETL framework is what to do with this\u2026\\n\\n![Multi Stage SQL Based ETL](images/multi-stage-sql.png)\\n\\nOne approach is to use the lightweight, configuration driven, multi stage Spark SQL based ETL framework described in this post.\\n\\nThis framework is driven from a YAML configuration document. YAML was preferred over JSON as a document format as it allows for multi-line statements (SQL statements), as well as comments - which are very useful as SQL can sometimes be undecipherable even for the person that wrote it.\\n\\nThe YAML config document has three main sections: __`sources`__, __`transforms`__ and __`targets`__.\\n\\n### Sources\\n\\nThe __`sources`__ section is used to configure the input data source(s) including optional column and row filters. In this case the data sources are tables available in the Spark catalog (for instance the AWS Glue Catalog or a Hive Metastore), this could easily be extended to read from other datasources using the Spark DataFrameReader API.\\n\\n<Gist id=\\"eaf03229466718ee125e0a6d23370f1b\\" \\n/>\\n\\n### Transforms\\n\\nThe __`transforms`__ section contains the multiple SQL statements to be run in sequence where each statement creates a temporary view using objects created by preceding statements.\\n\\n<Gist id=\\"89ad7ac6b036e5f22b2d3dec43b1fe44\\" \\n/>\\n\\n### Targets\\n\\nFinally the __`targets`__ section writes out the final object or objects to a specified destination (S3, HDFS, etc).\\n\\n<Gist id=\\"5af780dd6b6e5ddd79a4cac8a59e6a69\\" \\n/>\\n\\n### Process SQL Statements\\n\\nThe __`process_sql_statements.py`__ script that is used to execute the framework is very simple (30 lines of code not including comments, etc). It loads the sources into Spark Dataframes and then creates temporary views to reference these datasets in the __`transforms`__ section, then sequentially executes the SQL statements in the list of transforms. Lastly the script writes out the final view or views to the desired destination \u2013 in this case parquet files stored in S3 were used as the target.\\n\\nYou could implement an object naming convention such as prefixing object names with `sv_`, `iv_`, `fv_` (for source view, intermediate view and final view respectively) if this helps you differentiate between the different objects.\\n\\nTo use this framework you would simply use __`spark-submit`__ as follows:\\n\\n```\\nspark-submit process_sql_statements.py config.yml\\n```\\n\\n> *Full source code can be found at: [__https://github.com/avensolutions/spark-sql-etl-framework__](https://github.com/avensolutions/spark-sql-etl-framework)*"},{"id":"cost-of-future-change","metadata":{"permalink":"/cost-of-future-change","editUrl":"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2019-01-01-cost-of-future-change/index.md","source":"@site/blog/2019-01-01-cost-of-future-change/index.md","title":"The Cost of Future Change","description":"what we should really be focused on (but no one is\u2026)","date":"2019-01-01T00:00:00.000Z","formattedDate":"January 1, 2019","tags":[{"label":"change","permalink":"/tags/change"},{"label":"open-source-software","permalink":"/tags/open-source-software"},{"label":"technology","permalink":"/tags/technology"}],"readingTime":3.875,"truncated":false,"authors":[{"name":"Jeffrey Aven","title":"Technologist and Cloud Consultant","url":"https://www.linkedin.com/in/jeffreyaven/","imageURL":"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80","key":"jeffreyaven"}],"frontMatter":{"slug":"cost-of-future-change","title":"The Cost of Future Change","authors":["jeffreyaven"],"draft":false,"hide_table_of_contents":true,"image":"images/changes-ahead.jpg","tags":["change","open-source-software","technology"],"keywords":["change","open-source-software","technology"]},"prevItem":{"title":"Multi Stage ETL Framework using Spark SQL","permalink":"/multi-stage-etl-framework-using-spark-sql"}},"content":"### what we should really be focused on (but no one is\u2026)\\n\\n![Cost of Future Change](images/changes-ahead.jpg)\\n\\nIn my thirty year career in Technology I can\u2019t think of a more profound period of change. It is not as if change never existed previously, it did. Innovation and Moore\'s law have been constant features in technology. However, for decades we had experienced a long period of relativity stability. That is, the rate of change was somewhat fixed. This was largely due to the fact that change, for the most part, was dictated almost entirely by a handful of large companies (such as Oracle, Microsoft, IBM, SAP, etc.). We, the technology community, were exclusively at the mercy of the product management teams at these companies dreaming up the next new feature, and we were subject to the tech giant\u2019s product release cycle as to when we could use this feature. The rate of change was therefore artificially suppressed to a degree.\\n\\nThen along came the open source software revolution. I can recall being fortunate enough to be in a meeting with Steve Ballmer along with a small group of Microsoft partners in Sydney, Australia around 2002. I can remember him as a larger than life figure with a booming voice and an intense presence. I can vividly remember him going on a long diatribe about Open Source Software, primarily focused around Linux. To put some historical context around it, Linux was a fringe technology at best at that point in time \u2013 nobody was taking it seriously in the enterprise. The Apache Software Foundation wasn\u2019t a blip on the radar at the time, Software-as-a-Service was in its infancy, and Platform-as-a-Service and cloud were non-factors \u2013 so what was he worried about?\\n\\nFrom the fear instilled in his rant, you would have thought this was going to be the end of humanity as we knew it. Well it was the beginning of the end, the end of the halcyon days of the software industry as we knew it. The early beginnings of the end of the monopoly on change held by a select few software vendors. The beginning of the democratisation of change.\\n\\nFast forward fifteen years, and now everyone is a (potential) software publisher. Real world problems are solved in real companies and in many cases software products are created, published and made (freely) available to other companies. We have seen countless examples of this pattern, Hadoop at Yahoo!, Kafka at LinkedIn, Airflow at Airbnb, to name a few. Then there are companies created with scant capital or investment, driven by a small group of smart people focused on solving a problem or streamlining a process that they have encountered in the real world. Many of these companies growing to be globally recognised names, such as Atlassian or Hashicorp.\\n\\nThe rate of change is no longer suppressed to the privileged few \u2013 in fact we have an explosion of change. No longer do we have a handful of technology options to achieve a desired outcome or solve a particular problem, we have a constellation of options.\\n\\nNow the bad news, the force multiplier in change created by open source communities cuts both ways. When the community is behind a project it gets hyper-charged, conversely when the community drops off, functionality and stability drop off just as quickly.\\n\\nThis means there are components, projects, modules, services we are using today that won\u2019t be around in the same format in 2-3 years\u2019 time. There are products that don\u2019t exist today that will be integral (and potentially critical) to our operations in 1-2 years\u2019 time.\\n\\nThis brings me to my final point \u2013 the cost of future change. We as leaders and custodians of technology in this period should not only factor in current day run costs or the cost of change we know about (the cost of current change), but the hidden cost of future change. We need to think that whatever we are doing now is not what we will be doing in a years\u2019 time \u2013 we will need to accommodate future change.\\n\\nWe need to be thinking about the cost of future change and what we can do to minimise this. This means not just swapping out one system for another, but thinking about how you will change this system or component again in the near future. We need to take the opportunity that is in front of us to replace monoliths with modular systems, move from tightly coupled to loosely coupled components, from proprietary systems to open systems, from rigid architectures to extensible architectures.\\n\\nWhen you\u2019re planning a change today, consider the cost of future change\u2026"}]}')}}]);