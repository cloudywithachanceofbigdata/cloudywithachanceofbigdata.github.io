"use strict";(self.webpackChunkfull_stack_chronicles=self.webpackChunkfull_stack_chronicles||[]).push([[87961],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return a?n.createElement(f,r(r({ref:t},u),{},{components:a})):n.createElement(f,r({ref:t},u))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},30950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var n=a(83117),o=(a(67294),a(3905)),i=a(34259),r=a(18679),l=a(59943);const s={slug:"aws-deployments-with-cloudformation-and-gitlab-ci",title:"Simplified AWS Deployments with CloudFormation and GitLab CI",authors:["jeffreyaven"],draft:!1,image:"/img/blog/gitlabci-cloudformation-featured-image.png",tags:["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],keywords:["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],description:"A simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI which allows you to review changes before deploying."},c=void 0,u={permalink:"/aws-deployments-with-cloudformation-and-gitlab-ci",editUrl:"https://github.com/stackql/fullstackchronicles.io/tree/main/src/blog/blog/2021-11-11-aws-deployments-with-cloudformation-and-gitlab-ci/index.md",source:"@site/blog/2021-11-11-aws-deployments-with-cloudformation-and-gitlab-ci/index.md",title:"Simplified AWS Deployments with CloudFormation and GitLab CI",description:"A simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI which allows you to review changes before deploying.",date:"2021-11-11T00:00:00.000Z",formattedDate:"November 11, 2021",tags:[{label:"gitlab",permalink:"/tags/gitlab"},{label:"gitlabci",permalink:"/tags/gitlabci"},{label:"aws",permalink:"/tags/aws"},{label:"awscloudformation",permalink:"/tags/awscloudformation"},{label:"infrastructureascode",permalink:"/tags/infrastructureascode"},{label:"iac",permalink:"/tags/iac"},{label:"cloudautomation",permalink:"/tags/cloudautomation"}],readingTime:2.125,hasTruncateMarker:!1,authors:[{name:"Jeffrey Aven",title:"Technologist and Cloud Consultant",url:"https://www.linkedin.com/in/jeffreyaven/",imageURL:"https://s.gravatar.com/avatar/f96573d092470c74be233e1dded5376f?s=80",key:"jeffreyaven"}],frontMatter:{slug:"aws-deployments-with-cloudformation-and-gitlab-ci",title:"Simplified AWS Deployments with CloudFormation and GitLab CI",authors:["jeffreyaven"],draft:!1,image:"/img/blog/gitlabci-cloudformation-featured-image.png",tags:["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],keywords:["gitlab","gitlabci","aws","awscloudformation","infrastructureascode","iac","cloudautomation"],description:"A simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI which allows you to review changes before deploying."},prevItem:{title:"Simplifying Large CloudFormation Templates using Jsonnet",permalink:"/simplifying-large-cloudformation-templates-using-jsonnet"},nextItem:{title:"From Wordpress to Jamstack",permalink:"/from-wordpress-to-jamstack"}},p={authorsImageUrls:[void 0]},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"<code>.gitlab-ci.yml</code> code",id:"gitlab-ciyml-code",level:2},{value:"Reviewing change sets (plans) and applying",id:"reviewing-change-sets-plans-and-applying",level:2}],m={toc:d};function f(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Managing cloud deployments and IaC pipelines can be challenging.  I\u2019ve put together a simple pattern for deploying stacks in AWS using CloudFormation templates using GitLab CI.  "),(0,o.kt)("p",null,"This deployment framework enables you to target different environments based upon refs (branches or tags) for instance deploy to a dev environment for a push or merge into develop and deploy to prod on a push or merge into main, otherwise just lint/validate (e.g., for a push to a non-protected feature branch).  Templates are uploaded to a designated S3 bucket and staged for use in the pipeline and can be retained as an additional audit trail (in addition to the GitLab project history).  "),(0,o.kt)("p",null,"Furthermore, you can review changes (by inspecting change set contents) before deploying, saving you from fat finger deployments \ud83d\ude0a.  "),(0,o.kt)("h2",{id:"how-it-works"},"How it works"),(0,o.kt)("p",null,"The logic is described here:  "),(0,o.kt)(i.Z,{defaultValue:"flow",values:[{label:"Flow",value:"flow"},{label:"PlantUML",value:"plantuml"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"flow",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:a(96651).Z},(0,o.kt)("img",{alt:"GitLab CI",src:a(44013).Z,width:"449",height:"774"}))," ")),(0,o.kt)(r.Z,{value:"plantuml",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plantuml"},'@startuml\n\npartition prepare {\n  (*) --\x3e === S1 ===\n  === S1 === --\x3e "Validate Template"\n  --\x3e === S2 ===\n  === S1 === --\x3e "Check Stack State"\n  --\x3e === S2 ===\n}\n\npartition publish {\n  --\x3e "Publish Template to S3"\n}\n\npartition plan {\n  --\x3e "Stack Exists?"\n  --\x3e === S3 ===\n  === S3 === --\x3e [Yes] "Create Change Set"\n  === S3 === --\x3e [No] === S4 ===\n  "Create Change Set" --\x3e === S4 ===\n}\n\npartition deploy {\n  --\x3e "MANUAL: Review Changes"\n  --\x3e "Deploy Change Set"\n}\n\n--\x3e(*)\n\n@enduml\n')))),(0,o.kt)("p",null,"The pipleline looks like this in GitLab:  "),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:a(74620).Z},(0,o.kt)("img",{alt:"GitLab CI",src:a(85151).Z,width:"1264",height:"859"})),"  "),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You will need to set up GitLab CI variables for ",(0,o.kt)("inlineCode",{parentName:"p"},"AWS_ACCESS_KEY_ID"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"AWS_SECRET_ACCESS_KEY")," and optionally ",(0,o.kt)("inlineCode",{parentName:"p"},"AWS_DEFAULT_REGION"),".  You can do this via ",(0,o.kt)("strong",{parentName:"p"},"Settings -> CI/CD -> Variables")," in your GitLab project.   As ",(0,o.kt)("inlineCode",{parentName:"p"},"AWS_ACCESS_KEY_ID")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AWS_SECRET_ACCESS_KEY")," are secrets, they should be configured as ",(0,o.kt)("inlineCode",{parentName:"p"},"protected")," (as they are only required for protected branches) and ",(0,o.kt)("inlineCode",{parentName:"p"},"masked")," so they are not printed in job logs."),(0,o.kt)("h2",{id:"gitlab-ciyml-code"},(0,o.kt)("inlineCode",{parentName:"h2"},".gitlab-ci.yml")," code"),(0,o.kt)("p",null,"The GitLab CI code is shown here:  "),(0,o.kt)(l.Z,{id:"d561e9f002048b4e4be4043cf185d1bd",mdxType:"Gist"}),(0,o.kt)("h2",{id:"reviewing-change-sets-plans-and-applying"},"Reviewing change sets (plans) and applying"),(0,o.kt)("p",null,"Once a pipeline is triggered for an existing stack it will run hands off until a change set (plan) is created.  You can inspect the plan by clicking on the Plan GitLab CI job where you would see output like this:  "),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:a(78731).Z},(0,o.kt)("img",{alt:"Change Set",src:a(1250).Z,width:"1264",height:"879"})),"  "),(0,o.kt)("p",null,"If you are OK with the changes proposed, you can simply hit the play button on the last stage of the pipeline (Deploy).  Voil\xe0, stack deployed, enjoy!"))}f.isMDXComponent=!0},18679:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),o=a(34334);const i="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(83117),o=a(67294),i=a(34334),r=a(51048),l=a(33609),s=a(1943),c=a(72957);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:a,block:r,defaultValue:d,values:m,groupId:f,className:g}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,l.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==w&&!h.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:k}=(0,s.U)(),[C,S]=(0,o.useState)(w),E=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==C&&h.some((t=>t.value===e))&&S(e)}const x=e=>{const t=e.currentTarget,a=E.indexOf(t),n=h[a].value;n!==C&&(T(t),S(n),null!=f&&k(f,String(n)))},_=e=>{var t;let a=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;a=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;a=E[t]??E[E.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},g)},h.map((e=>{let{value:t,label:a,attributes:r}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>E.push(e),onKeyDown:_,onClick:x},r,{className:(0,i.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":C===t})}),a??t)}))),a?(0,o.cloneElement)(b.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,r.Z)();return o.createElement(d,(0,n.Z)({key:String(t)},e))}},78731:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/gitlab-ci-cloudformation-plan-fab980e936956a28a98a13ec4f20d48d.png"},74620:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/gitlab-ci-0f1e6af130941985838f49a568c723d4.png"},96651:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/gitlabci-cloudformation-flow-27282ec6781a04b2c32d1ac1d5fa01a5.png"},59943:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294);a(45697);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}const r=function(e){function t(){return o(this,t),i(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentDidMount=function(){this._updateIframeContent()},t.prototype.componentDidUpdate=function(e,t){this._updateIframeContent()},t.prototype._defineUrl=function(){var e=this.props,t=e.id,a=e.file;return"https://gist.github.com/"+t+".js"+(a?"?file="+a:"")},t.prototype._updateIframeContent=function(){var e=this.props,t=e.id,a=e.file,n=this.iframeNode,o=n.document;n.contentDocument?o=n.contentDocument:n.contentWindow&&(o=n.contentWindow.document);var i='<html><head><base target="_parent"><style>*{font-size:12px;}</style></head><body '+("onload=\"parent.document.getElementById('"+(a?"gist-"+t+"-"+a:"gist-"+t)+"').style.height=document.body.scrollHeight + 'px'\"")+">"+('<script type="text/javascript" src="'+this._defineUrl()+'"><\/script>')+"</body></html>";o.open(),o.writeln(i),o.close()},t.prototype.render=function(){var e=this,t=this.props,a=t.id,o=t.file;return n.createElement("iframe",{ref:function(t){e.iframeNode=t},width:"100%",frameBorder:0,id:o?"gist-"+a+"-"+o:"gist-"+a})},t}(n.PureComponent)},1250:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gitlab-ci-cloudformation-plan-fab980e936956a28a98a13ec4f20d48d.png"},85151:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gitlab-ci-0f1e6af130941985838f49a568c723d4.png"},44013:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gitlabci-cloudformation-flow-27282ec6781a04b2c32d1ac1d5fa01a5.png"}}]);